
Avaliacao1-menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e80  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406e80  00406e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000088c  20400000  00406e88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001a4  2040088c  00407714  0002088c  2**2
                  ALLOC
  4 .stack        00002000  20400a30  004078b8  0002088c  2**0
                  ALLOC
  5 .heap         00000200  20402a30  004098b8  0002088c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000a99b  00000000  00000000  00020913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016ca  00000000  00000000  0002b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007320  00000000  00000000  0002c978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c08  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  000348a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001dc91  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a3f3  00000000  00000000  00053059  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008a7e7  00000000  00000000  0005d44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003cc0  00000000  00000000  000e7c34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402a30 	.word	0x20402a30
  400004:	00401459 	.word	0x00401459
  400008:	00401509 	.word	0x00401509
  40000c:	00401509 	.word	0x00401509
  400010:	00401509 	.word	0x00401509
  400014:	00401509 	.word	0x00401509
  400018:	00401509 	.word	0x00401509
	...
  40002c:	00401509 	.word	0x00401509
  400030:	00401509 	.word	0x00401509
  400034:	00000000 	.word	0x00000000
  400038:	00401509 	.word	0x00401509
  40003c:	00401509 	.word	0x00401509
  400040:	00401509 	.word	0x00401509
  400044:	00401509 	.word	0x00401509
  400048:	00401509 	.word	0x00401509
  40004c:	00401509 	.word	0x00401509
  400050:	00401509 	.word	0x00401509
  400054:	00401509 	.word	0x00401509
  400058:	00401509 	.word	0x00401509
  40005c:	00401509 	.word	0x00401509
  400060:	00401509 	.word	0x00401509
  400064:	00000000 	.word	0x00000000
  400068:	00400819 	.word	0x00400819
  40006c:	00400831 	.word	0x00400831
  400070:	00400849 	.word	0x00400849
  400074:	00401509 	.word	0x00401509
  400078:	00401509 	.word	0x00401509
  40007c:	00401509 	.word	0x00401509
  400080:	00400861 	.word	0x00400861
  400084:	00400879 	.word	0x00400879
  400088:	00401509 	.word	0x00401509
  40008c:	00401509 	.word	0x00401509
  400090:	00401509 	.word	0x00401509
  400094:	00401509 	.word	0x00401509
  400098:	00401509 	.word	0x00401509
  40009c:	00401509 	.word	0x00401509
  4000a0:	00401b49 	.word	0x00401b49
  4000a4:	00401509 	.word	0x00401509
  4000a8:	00401509 	.word	0x00401509
  4000ac:	00401509 	.word	0x00401509
  4000b0:	00401509 	.word	0x00401509
  4000b4:	00401509 	.word	0x00401509
  4000b8:	00401509 	.word	0x00401509
  4000bc:	00401509 	.word	0x00401509
  4000c0:	00401509 	.word	0x00401509
  4000c4:	00401509 	.word	0x00401509
  4000c8:	00401509 	.word	0x00401509
  4000cc:	00401509 	.word	0x00401509
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401509 	.word	0x00401509
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401509 	.word	0x00401509
  4000e0:	00401509 	.word	0x00401509
  4000e4:	00401509 	.word	0x00401509
  4000e8:	00401509 	.word	0x00401509
  4000ec:	00401509 	.word	0x00401509
  4000f0:	00401509 	.word	0x00401509
  4000f4:	00401509 	.word	0x00401509
  4000f8:	00401509 	.word	0x00401509
  4000fc:	00401509 	.word	0x00401509
  400100:	00401509 	.word	0x00401509
  400104:	00401509 	.word	0x00401509
  400108:	00401509 	.word	0x00401509
  40010c:	00401509 	.word	0x00401509
  400110:	00401509 	.word	0x00401509
	...
  400120:	00401509 	.word	0x00401509
  400124:	00401509 	.word	0x00401509
  400128:	00401509 	.word	0x00401509
  40012c:	00401509 	.word	0x00401509
  400130:	00401509 	.word	0x00401509
  400134:	00000000 	.word	0x00000000
  400138:	00401509 	.word	0x00401509
  40013c:	00401509 	.word	0x00401509

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040088c 	.word	0x2040088c
  40015c:	00000000 	.word	0x00000000
  400160:	00406e88 	.word	0x00406e88

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400890 	.word	0x20400890
  400190:	00406e88 	.word	0x00406e88
  400194:	00406e88 	.word	0x00406e88
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00400991 	.word	0x00400991
  40021c:	004009fd 	.word	0x004009fd
  400220:	00400a6d 	.word	0x00400a6d

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	004009c9 	.word	0x004009c9
  400290:	00400ae5 	.word	0x00400ae5

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	00400b01 	.word	0x00400b01
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00400b1d 	.word	0x00400b1d
  400408:	00400b39 	.word	0x00400b39

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	0040167d 	.word	0x0040167d
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	00400891 	.word	0x00400891
  40050c:	0040090d 	.word	0x0040090d
  400510:	00401511 	.word	0x00401511
  400514:	00400489 	.word	0x00400489

00400518 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400518:	b480      	push	{r7}
  40051a:	b085      	sub	sp, #20
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	2b00      	cmp	r3, #0
  400528:	d003      	beq.n	400532 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40052a:	68fb      	ldr	r3, [r7, #12]
  40052c:	68ba      	ldr	r2, [r7, #8]
  40052e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400530:	e002      	b.n	400538 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400532:	68fb      	ldr	r3, [r7, #12]
  400534:	68ba      	ldr	r2, [r7, #8]
  400536:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400538:	bf00      	nop
  40053a:	3714      	adds	r7, #20
  40053c:	46bd      	mov	sp, r7
  40053e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400542:	4770      	bx	lr

00400544 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400544:	b480      	push	{r7}
  400546:	b083      	sub	sp, #12
  400548:	af00      	add	r7, sp, #0
  40054a:	6078      	str	r0, [r7, #4]
  40054c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	683a      	ldr	r2, [r7, #0]
  400552:	631a      	str	r2, [r3, #48]	; 0x30
}
  400554:	bf00      	nop
  400556:	370c      	adds	r7, #12
  400558:	46bd      	mov	sp, r7
  40055a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055e:	4770      	bx	lr

00400560 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	6078      	str	r0, [r7, #4]
  400568:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40056a:	687b      	ldr	r3, [r7, #4]
  40056c:	683a      	ldr	r2, [r7, #0]
  40056e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400570:	bf00      	nop
  400572:	370c      	adds	r7, #12
  400574:	46bd      	mov	sp, r7
  400576:	f85d 7b04 	ldr.w	r7, [sp], #4
  40057a:	4770      	bx	lr

0040057c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40057c:	b480      	push	{r7}
  40057e:	b087      	sub	sp, #28
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	687a      	ldr	r2, [r7, #4]
  40058c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40058e:	68bb      	ldr	r3, [r7, #8]
  400590:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400594:	d04a      	beq.n	40062c <pio_set_peripheral+0xb0>
  400596:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40059a:	d808      	bhi.n	4005ae <pio_set_peripheral+0x32>
  40059c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005a0:	d016      	beq.n	4005d0 <pio_set_peripheral+0x54>
  4005a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005a6:	d02c      	beq.n	400602 <pio_set_peripheral+0x86>
  4005a8:	2b00      	cmp	r3, #0
  4005aa:	d069      	beq.n	400680 <pio_set_peripheral+0x104>
  4005ac:	e064      	b.n	400678 <pio_set_peripheral+0xfc>
  4005ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005b2:	d065      	beq.n	400680 <pio_set_peripheral+0x104>
  4005b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005b8:	d803      	bhi.n	4005c2 <pio_set_peripheral+0x46>
  4005ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005be:	d04a      	beq.n	400656 <pio_set_peripheral+0xda>
  4005c0:	e05a      	b.n	400678 <pio_set_peripheral+0xfc>
  4005c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005c6:	d05b      	beq.n	400680 <pio_set_peripheral+0x104>
  4005c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005cc:	d058      	beq.n	400680 <pio_set_peripheral+0x104>
  4005ce:	e053      	b.n	400678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005d0:	68fb      	ldr	r3, [r7, #12]
  4005d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005d4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005da:	687b      	ldr	r3, [r7, #4]
  4005dc:	43d9      	mvns	r1, r3
  4005de:	697b      	ldr	r3, [r7, #20]
  4005e0:	400b      	ands	r3, r1
  4005e2:	401a      	ands	r2, r3
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005e8:	68fb      	ldr	r3, [r7, #12]
  4005ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005f2:	687b      	ldr	r3, [r7, #4]
  4005f4:	43d9      	mvns	r1, r3
  4005f6:	697b      	ldr	r3, [r7, #20]
  4005f8:	400b      	ands	r3, r1
  4005fa:	401a      	ands	r2, r3
  4005fc:	68fb      	ldr	r3, [r7, #12]
  4005fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400600:	e03a      	b.n	400678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400606:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400608:	687a      	ldr	r2, [r7, #4]
  40060a:	697b      	ldr	r3, [r7, #20]
  40060c:	431a      	orrs	r2, r3
  40060e:	68fb      	ldr	r3, [r7, #12]
  400610:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400616:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400618:	68fb      	ldr	r3, [r7, #12]
  40061a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	43d9      	mvns	r1, r3
  400620:	697b      	ldr	r3, [r7, #20]
  400622:	400b      	ands	r3, r1
  400624:	401a      	ands	r2, r3
  400626:	68fb      	ldr	r3, [r7, #12]
  400628:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40062a:	e025      	b.n	400678 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40062c:	68fb      	ldr	r3, [r7, #12]
  40062e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400630:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400632:	68fb      	ldr	r3, [r7, #12]
  400634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400636:	687b      	ldr	r3, [r7, #4]
  400638:	43d9      	mvns	r1, r3
  40063a:	697b      	ldr	r3, [r7, #20]
  40063c:	400b      	ands	r3, r1
  40063e:	401a      	ands	r2, r3
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400644:	68fb      	ldr	r3, [r7, #12]
  400646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400648:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40064a:	687a      	ldr	r2, [r7, #4]
  40064c:	697b      	ldr	r3, [r7, #20]
  40064e:	431a      	orrs	r2, r3
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400654:	e010      	b.n	400678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400656:	68fb      	ldr	r3, [r7, #12]
  400658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40065a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40065c:	687a      	ldr	r2, [r7, #4]
  40065e:	697b      	ldr	r3, [r7, #20]
  400660:	431a      	orrs	r2, r3
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400666:	68fb      	ldr	r3, [r7, #12]
  400668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40066a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40066c:	687a      	ldr	r2, [r7, #4]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	431a      	orrs	r2, r3
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400676:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	687a      	ldr	r2, [r7, #4]
  40067c:	605a      	str	r2, [r3, #4]
  40067e:	e000      	b.n	400682 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400680:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400682:	371c      	adds	r7, #28
  400684:	46bd      	mov	sp, r7
  400686:	f85d 7b04 	ldr.w	r7, [sp], #4
  40068a:	4770      	bx	lr

0040068c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40068c:	b580      	push	{r7, lr}
  40068e:	b084      	sub	sp, #16
  400690:	af00      	add	r7, sp, #0
  400692:	60f8      	str	r0, [r7, #12]
  400694:	60b9      	str	r1, [r7, #8]
  400696:	607a      	str	r2, [r7, #4]
  400698:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40069a:	68b9      	ldr	r1, [r7, #8]
  40069c:	68f8      	ldr	r0, [r7, #12]
  40069e:	4b12      	ldr	r3, [pc, #72]	; (4006e8 <pio_set_output+0x5c>)
  4006a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4006a2:	69ba      	ldr	r2, [r7, #24]
  4006a4:	68b9      	ldr	r1, [r7, #8]
  4006a6:	68f8      	ldr	r0, [r7, #12]
  4006a8:	4b10      	ldr	r3, [pc, #64]	; (4006ec <pio_set_output+0x60>)
  4006aa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006ac:	683b      	ldr	r3, [r7, #0]
  4006ae:	2b00      	cmp	r3, #0
  4006b0:	d003      	beq.n	4006ba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	68ba      	ldr	r2, [r7, #8]
  4006b6:	651a      	str	r2, [r3, #80]	; 0x50
  4006b8:	e002      	b.n	4006c0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006c0:	687b      	ldr	r3, [r7, #4]
  4006c2:	2b00      	cmp	r3, #0
  4006c4:	d003      	beq.n	4006ce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	68ba      	ldr	r2, [r7, #8]
  4006ca:	631a      	str	r2, [r3, #48]	; 0x30
  4006cc:	e002      	b.n	4006d4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	68ba      	ldr	r2, [r7, #8]
  4006d2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006d4:	68fb      	ldr	r3, [r7, #12]
  4006d6:	68ba      	ldr	r2, [r7, #8]
  4006d8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4006da:	68fb      	ldr	r3, [r7, #12]
  4006dc:	68ba      	ldr	r2, [r7, #8]
  4006de:	601a      	str	r2, [r3, #0]
}
  4006e0:	bf00      	nop
  4006e2:	3710      	adds	r7, #16
  4006e4:	46bd      	mov	sp, r7
  4006e6:	bd80      	pop	{r7, pc}
  4006e8:	00400719 	.word	0x00400719
  4006ec:	00400519 	.word	0x00400519

004006f0 <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  4006f0:	b480      	push	{r7}
  4006f2:	b083      	sub	sp, #12
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	6078      	str	r0, [r7, #4]
  4006f8:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4006fa:	687b      	ldr	r3, [r7, #4]
  4006fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4006fe:	683b      	ldr	r3, [r7, #0]
  400700:	4013      	ands	r3, r2
  400702:	2b00      	cmp	r3, #0
  400704:	d101      	bne.n	40070a <pio_get_output_data_status+0x1a>
		return 0;
  400706:	2300      	movs	r3, #0
  400708:	e000      	b.n	40070c <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  40070a:	2301      	movs	r3, #1
	}
}
  40070c:	4618      	mov	r0, r3
  40070e:	370c      	adds	r7, #12
  400710:	46bd      	mov	sp, r7
  400712:	f85d 7b04 	ldr.w	r7, [sp], #4
  400716:	4770      	bx	lr

00400718 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400718:	b480      	push	{r7}
  40071a:	b083      	sub	sp, #12
  40071c:	af00      	add	r7, sp, #0
  40071e:	6078      	str	r0, [r7, #4]
  400720:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	683a      	ldr	r2, [r7, #0]
  400726:	645a      	str	r2, [r3, #68]	; 0x44
}
  400728:	bf00      	nop
  40072a:	370c      	adds	r7, #12
  40072c:	46bd      	mov	sp, r7
  40072e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400732:	4770      	bx	lr

00400734 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400734:	b480      	push	{r7}
  400736:	b083      	sub	sp, #12
  400738:	af00      	add	r7, sp, #0
  40073a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40073c:	687b      	ldr	r3, [r7, #4]
  40073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400740:	4618      	mov	r0, r3
  400742:	370c      	adds	r7, #12
  400744:	46bd      	mov	sp, r7
  400746:	f85d 7b04 	ldr.w	r7, [sp], #4
  40074a:	4770      	bx	lr

0040074c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40074c:	b480      	push	{r7}
  40074e:	b083      	sub	sp, #12
  400750:	af00      	add	r7, sp, #0
  400752:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400754:	687b      	ldr	r3, [r7, #4]
  400756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400758:	4618      	mov	r0, r3
  40075a:	370c      	adds	r7, #12
  40075c:	46bd      	mov	sp, r7
  40075e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400762:	4770      	bx	lr

00400764 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400764:	b580      	push	{r7, lr}
  400766:	b084      	sub	sp, #16
  400768:	af00      	add	r7, sp, #0
  40076a:	6078      	str	r0, [r7, #4]
  40076c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40076e:	6878      	ldr	r0, [r7, #4]
  400770:	4b26      	ldr	r3, [pc, #152]	; (40080c <pio_handler_process+0xa8>)
  400772:	4798      	blx	r3
  400774:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400776:	6878      	ldr	r0, [r7, #4]
  400778:	4b25      	ldr	r3, [pc, #148]	; (400810 <pio_handler_process+0xac>)
  40077a:	4798      	blx	r3
  40077c:	4602      	mov	r2, r0
  40077e:	68fb      	ldr	r3, [r7, #12]
  400780:	4013      	ands	r3, r2
  400782:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400784:	68fb      	ldr	r3, [r7, #12]
  400786:	2b00      	cmp	r3, #0
  400788:	d03c      	beq.n	400804 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40078a:	2300      	movs	r3, #0
  40078c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40078e:	e034      	b.n	4007fa <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400790:	4a20      	ldr	r2, [pc, #128]	; (400814 <pio_handler_process+0xb0>)
  400792:	68bb      	ldr	r3, [r7, #8]
  400794:	011b      	lsls	r3, r3, #4
  400796:	4413      	add	r3, r2
  400798:	681a      	ldr	r2, [r3, #0]
  40079a:	683b      	ldr	r3, [r7, #0]
  40079c:	429a      	cmp	r2, r3
  40079e:	d126      	bne.n	4007ee <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007a0:	4a1c      	ldr	r2, [pc, #112]	; (400814 <pio_handler_process+0xb0>)
  4007a2:	68bb      	ldr	r3, [r7, #8]
  4007a4:	011b      	lsls	r3, r3, #4
  4007a6:	4413      	add	r3, r2
  4007a8:	3304      	adds	r3, #4
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	4013      	ands	r3, r2
  4007b0:	2b00      	cmp	r3, #0
  4007b2:	d01c      	beq.n	4007ee <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007b4:	4a17      	ldr	r2, [pc, #92]	; (400814 <pio_handler_process+0xb0>)
  4007b6:	68bb      	ldr	r3, [r7, #8]
  4007b8:	011b      	lsls	r3, r3, #4
  4007ba:	4413      	add	r3, r2
  4007bc:	330c      	adds	r3, #12
  4007be:	681b      	ldr	r3, [r3, #0]
  4007c0:	4914      	ldr	r1, [pc, #80]	; (400814 <pio_handler_process+0xb0>)
  4007c2:	68ba      	ldr	r2, [r7, #8]
  4007c4:	0112      	lsls	r2, r2, #4
  4007c6:	440a      	add	r2, r1
  4007c8:	6810      	ldr	r0, [r2, #0]
  4007ca:	4912      	ldr	r1, [pc, #72]	; (400814 <pio_handler_process+0xb0>)
  4007cc:	68ba      	ldr	r2, [r7, #8]
  4007ce:	0112      	lsls	r2, r2, #4
  4007d0:	440a      	add	r2, r1
  4007d2:	3204      	adds	r2, #4
  4007d4:	6812      	ldr	r2, [r2, #0]
  4007d6:	4611      	mov	r1, r2
  4007d8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4007da:	4a0e      	ldr	r2, [pc, #56]	; (400814 <pio_handler_process+0xb0>)
  4007dc:	68bb      	ldr	r3, [r7, #8]
  4007de:	011b      	lsls	r3, r3, #4
  4007e0:	4413      	add	r3, r2
  4007e2:	3304      	adds	r3, #4
  4007e4:	681b      	ldr	r3, [r3, #0]
  4007e6:	43db      	mvns	r3, r3
  4007e8:	68fa      	ldr	r2, [r7, #12]
  4007ea:	4013      	ands	r3, r2
  4007ec:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4007ee:	68bb      	ldr	r3, [r7, #8]
  4007f0:	3301      	adds	r3, #1
  4007f2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4007f4:	68bb      	ldr	r3, [r7, #8]
  4007f6:	2b06      	cmp	r3, #6
  4007f8:	d803      	bhi.n	400802 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4007fa:	68fb      	ldr	r3, [r7, #12]
  4007fc:	2b00      	cmp	r3, #0
  4007fe:	d1c7      	bne.n	400790 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400800:	e000      	b.n	400804 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400802:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400804:	bf00      	nop
  400806:	3710      	adds	r7, #16
  400808:	46bd      	mov	sp, r7
  40080a:	bd80      	pop	{r7, pc}
  40080c:	00400735 	.word	0x00400735
  400810:	0040074d 	.word	0x0040074d
  400814:	204008a8 	.word	0x204008a8

00400818 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400818:	b580      	push	{r7, lr}
  40081a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40081c:	210a      	movs	r1, #10
  40081e:	4802      	ldr	r0, [pc, #8]	; (400828 <PIOA_Handler+0x10>)
  400820:	4b02      	ldr	r3, [pc, #8]	; (40082c <PIOA_Handler+0x14>)
  400822:	4798      	blx	r3
}
  400824:	bf00      	nop
  400826:	bd80      	pop	{r7, pc}
  400828:	400e0e00 	.word	0x400e0e00
  40082c:	00400765 	.word	0x00400765

00400830 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400830:	b580      	push	{r7, lr}
  400832:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400834:	210b      	movs	r1, #11
  400836:	4802      	ldr	r0, [pc, #8]	; (400840 <PIOB_Handler+0x10>)
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <PIOB_Handler+0x14>)
  40083a:	4798      	blx	r3
}
  40083c:	bf00      	nop
  40083e:	bd80      	pop	{r7, pc}
  400840:	400e1000 	.word	0x400e1000
  400844:	00400765 	.word	0x00400765

00400848 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400848:	b580      	push	{r7, lr}
  40084a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40084c:	210c      	movs	r1, #12
  40084e:	4802      	ldr	r0, [pc, #8]	; (400858 <PIOC_Handler+0x10>)
  400850:	4b02      	ldr	r3, [pc, #8]	; (40085c <PIOC_Handler+0x14>)
  400852:	4798      	blx	r3
}
  400854:	bf00      	nop
  400856:	bd80      	pop	{r7, pc}
  400858:	400e1200 	.word	0x400e1200
  40085c:	00400765 	.word	0x00400765

00400860 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400860:	b580      	push	{r7, lr}
  400862:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400864:	2110      	movs	r1, #16
  400866:	4802      	ldr	r0, [pc, #8]	; (400870 <PIOD_Handler+0x10>)
  400868:	4b02      	ldr	r3, [pc, #8]	; (400874 <PIOD_Handler+0x14>)
  40086a:	4798      	blx	r3
}
  40086c:	bf00      	nop
  40086e:	bd80      	pop	{r7, pc}
  400870:	400e1400 	.word	0x400e1400
  400874:	00400765 	.word	0x00400765

00400878 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400878:	b580      	push	{r7, lr}
  40087a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  40087c:	2111      	movs	r1, #17
  40087e:	4802      	ldr	r0, [pc, #8]	; (400888 <PIOE_Handler+0x10>)
  400880:	4b02      	ldr	r3, [pc, #8]	; (40088c <PIOE_Handler+0x14>)
  400882:	4798      	blx	r3
}
  400884:	bf00      	nop
  400886:	bd80      	pop	{r7, pc}
  400888:	400e1600 	.word	0x400e1600
  40088c:	00400765 	.word	0x00400765

00400890 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400890:	b480      	push	{r7}
  400892:	b083      	sub	sp, #12
  400894:	af00      	add	r7, sp, #0
  400896:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400898:	687b      	ldr	r3, [r7, #4]
  40089a:	3b01      	subs	r3, #1
  40089c:	2b03      	cmp	r3, #3
  40089e:	d81a      	bhi.n	4008d6 <pmc_mck_set_division+0x46>
  4008a0:	a201      	add	r2, pc, #4	; (adr r2, 4008a8 <pmc_mck_set_division+0x18>)
  4008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008a6:	bf00      	nop
  4008a8:	004008b9 	.word	0x004008b9
  4008ac:	004008bf 	.word	0x004008bf
  4008b0:	004008c7 	.word	0x004008c7
  4008b4:	004008cf 	.word	0x004008cf
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4008b8:	2300      	movs	r3, #0
  4008ba:	607b      	str	r3, [r7, #4]
			break;
  4008bc:	e00e      	b.n	4008dc <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4008be:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008c2:	607b      	str	r3, [r7, #4]
			break;
  4008c4:	e00a      	b.n	4008dc <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4008c6:	f44f 7340 	mov.w	r3, #768	; 0x300
  4008ca:	607b      	str	r3, [r7, #4]
			break;
  4008cc:	e006      	b.n	4008dc <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4008ce:	f44f 7300 	mov.w	r3, #512	; 0x200
  4008d2:	607b      	str	r3, [r7, #4]
			break;
  4008d4:	e002      	b.n	4008dc <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4008d6:	2300      	movs	r3, #0
  4008d8:	607b      	str	r3, [r7, #4]
			break;
  4008da:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4008dc:	490a      	ldr	r1, [pc, #40]	; (400908 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4008de:	4b0a      	ldr	r3, [pc, #40]	; (400908 <pmc_mck_set_division+0x78>)
  4008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4008e6:	687b      	ldr	r3, [r7, #4]
  4008e8:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4008ea:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008ec:	bf00      	nop
  4008ee:	4b06      	ldr	r3, [pc, #24]	; (400908 <pmc_mck_set_division+0x78>)
  4008f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008f2:	f003 0308 	and.w	r3, r3, #8
  4008f6:	2b00      	cmp	r3, #0
  4008f8:	d0f9      	beq.n	4008ee <pmc_mck_set_division+0x5e>
}
  4008fa:	bf00      	nop
  4008fc:	370c      	adds	r7, #12
  4008fe:	46bd      	mov	sp, r7
  400900:	f85d 7b04 	ldr.w	r7, [sp], #4
  400904:	4770      	bx	lr
  400906:	bf00      	nop
  400908:	400e0600 	.word	0x400e0600

0040090c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40090c:	b480      	push	{r7}
  40090e:	b085      	sub	sp, #20
  400910:	af00      	add	r7, sp, #0
  400912:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400914:	491d      	ldr	r1, [pc, #116]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  400916:	4b1d      	ldr	r3, [pc, #116]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  400918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40091a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40091e:	687b      	ldr	r3, [r7, #4]
  400920:	4313      	orrs	r3, r2
  400922:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400928:	60fb      	str	r3, [r7, #12]
  40092a:	e007      	b.n	40093c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40092c:	68fb      	ldr	r3, [r7, #12]
  40092e:	2b00      	cmp	r3, #0
  400930:	d101      	bne.n	400936 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400932:	2301      	movs	r3, #1
  400934:	e023      	b.n	40097e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400936:	68fb      	ldr	r3, [r7, #12]
  400938:	3b01      	subs	r3, #1
  40093a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40093c:	4b13      	ldr	r3, [pc, #76]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  40093e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400940:	f003 0308 	and.w	r3, r3, #8
  400944:	2b00      	cmp	r3, #0
  400946:	d0f1      	beq.n	40092c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400948:	4a10      	ldr	r2, [pc, #64]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  40094a:	4b10      	ldr	r3, [pc, #64]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  40094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40094e:	f023 0303 	bic.w	r3, r3, #3
  400952:	f043 0302 	orr.w	r3, r3, #2
  400956:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40095c:	60fb      	str	r3, [r7, #12]
  40095e:	e007      	b.n	400970 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400960:	68fb      	ldr	r3, [r7, #12]
  400962:	2b00      	cmp	r3, #0
  400964:	d101      	bne.n	40096a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400966:	2301      	movs	r3, #1
  400968:	e009      	b.n	40097e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40096a:	68fb      	ldr	r3, [r7, #12]
  40096c:	3b01      	subs	r3, #1
  40096e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400970:	4b06      	ldr	r3, [pc, #24]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  400972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400974:	f003 0308 	and.w	r3, r3, #8
  400978:	2b00      	cmp	r3, #0
  40097a:	d0f1      	beq.n	400960 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40097c:	2300      	movs	r3, #0
}
  40097e:	4618      	mov	r0, r3
  400980:	3714      	adds	r7, #20
  400982:	46bd      	mov	sp, r7
  400984:	f85d 7b04 	ldr.w	r7, [sp], #4
  400988:	4770      	bx	lr
  40098a:	bf00      	nop
  40098c:	400e0600 	.word	0x400e0600

00400990 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400990:	b480      	push	{r7}
  400992:	b083      	sub	sp, #12
  400994:	af00      	add	r7, sp, #0
  400996:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400998:	687b      	ldr	r3, [r7, #4]
  40099a:	2b01      	cmp	r3, #1
  40099c:	d105      	bne.n	4009aa <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40099e:	4907      	ldr	r1, [pc, #28]	; (4009bc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4009a0:	4b06      	ldr	r3, [pc, #24]	; (4009bc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4009a2:	689a      	ldr	r2, [r3, #8]
  4009a4:	4b06      	ldr	r3, [pc, #24]	; (4009c0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4009a6:	4313      	orrs	r3, r2
  4009a8:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4009aa:	4b04      	ldr	r3, [pc, #16]	; (4009bc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4009ac:	4a05      	ldr	r2, [pc, #20]	; (4009c4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4009ae:	601a      	str	r2, [r3, #0]
}
  4009b0:	bf00      	nop
  4009b2:	370c      	adds	r7, #12
  4009b4:	46bd      	mov	sp, r7
  4009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009ba:	4770      	bx	lr
  4009bc:	400e1810 	.word	0x400e1810
  4009c0:	a5100000 	.word	0xa5100000
  4009c4:	a5000008 	.word	0xa5000008

004009c8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4009c8:	b480      	push	{r7}
  4009ca:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4009cc:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4009ce:	695b      	ldr	r3, [r3, #20]
  4009d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4009d4:	2b00      	cmp	r3, #0
  4009d6:	d007      	beq.n	4009e8 <pmc_osc_is_ready_32kxtal+0x20>
  4009d8:	4b07      	ldr	r3, [pc, #28]	; (4009f8 <pmc_osc_is_ready_32kxtal+0x30>)
  4009da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4009e0:	2b00      	cmp	r3, #0
  4009e2:	d001      	beq.n	4009e8 <pmc_osc_is_ready_32kxtal+0x20>
  4009e4:	2301      	movs	r3, #1
  4009e6:	e000      	b.n	4009ea <pmc_osc_is_ready_32kxtal+0x22>
  4009e8:	2300      	movs	r3, #0
}
  4009ea:	4618      	mov	r0, r3
  4009ec:	46bd      	mov	sp, r7
  4009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009f2:	4770      	bx	lr
  4009f4:	400e1810 	.word	0x400e1810
  4009f8:	400e0600 	.word	0x400e0600

004009fc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4009fc:	b480      	push	{r7}
  4009fe:	b083      	sub	sp, #12
  400a00:	af00      	add	r7, sp, #0
  400a02:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400a04:	4915      	ldr	r1, [pc, #84]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a06:	4b15      	ldr	r3, [pc, #84]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a08:	6a1a      	ldr	r2, [r3, #32]
  400a0a:	4b15      	ldr	r3, [pc, #84]	; (400a60 <pmc_switch_mainck_to_fastrc+0x64>)
  400a0c:	4313      	orrs	r3, r2
  400a0e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400a10:	bf00      	nop
  400a12:	4b12      	ldr	r3, [pc, #72]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400a1a:	2b00      	cmp	r3, #0
  400a1c:	d0f9      	beq.n	400a12 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400a1e:	490f      	ldr	r1, [pc, #60]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a20:	4b0e      	ldr	r3, [pc, #56]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a22:	6a1a      	ldr	r2, [r3, #32]
  400a24:	4b0f      	ldr	r3, [pc, #60]	; (400a64 <pmc_switch_mainck_to_fastrc+0x68>)
  400a26:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400a28:	687a      	ldr	r2, [r7, #4]
  400a2a:	4313      	orrs	r3, r2
  400a2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400a30:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400a32:	bf00      	nop
  400a34:	4b09      	ldr	r3, [pc, #36]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400a3c:	2b00      	cmp	r3, #0
  400a3e:	d0f9      	beq.n	400a34 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400a40:	4906      	ldr	r1, [pc, #24]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a42:	4b06      	ldr	r3, [pc, #24]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a44:	6a1a      	ldr	r2, [r3, #32]
  400a46:	4b08      	ldr	r3, [pc, #32]	; (400a68 <pmc_switch_mainck_to_fastrc+0x6c>)
  400a48:	4013      	ands	r3, r2
  400a4a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a4e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400a50:	bf00      	nop
  400a52:	370c      	adds	r7, #12
  400a54:	46bd      	mov	sp, r7
  400a56:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a5a:	4770      	bx	lr
  400a5c:	400e0600 	.word	0x400e0600
  400a60:	00370008 	.word	0x00370008
  400a64:	ffc8ff8f 	.word	0xffc8ff8f
  400a68:	fec8ffff 	.word	0xfec8ffff

00400a6c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400a6c:	b480      	push	{r7}
  400a6e:	b083      	sub	sp, #12
  400a70:	af00      	add	r7, sp, #0
  400a72:	6078      	str	r0, [r7, #4]
  400a74:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a76:	687b      	ldr	r3, [r7, #4]
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d008      	beq.n	400a8e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a7c:	4913      	ldr	r1, [pc, #76]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a7e:	4b13      	ldr	r3, [pc, #76]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a80:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a82:	4a13      	ldr	r2, [pc, #76]	; (400ad0 <pmc_switch_mainck_to_xtal+0x64>)
  400a84:	401a      	ands	r2, r3
  400a86:	4b13      	ldr	r3, [pc, #76]	; (400ad4 <pmc_switch_mainck_to_xtal+0x68>)
  400a88:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a8a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400a8c:	e018      	b.n	400ac0 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a8e:	490f      	ldr	r1, [pc, #60]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a90:	4b0e      	ldr	r3, [pc, #56]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a92:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a94:	4b10      	ldr	r3, [pc, #64]	; (400ad8 <pmc_switch_mainck_to_xtal+0x6c>)
  400a96:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a98:	683a      	ldr	r2, [r7, #0]
  400a9a:	0212      	lsls	r2, r2, #8
  400a9c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a9e:	431a      	orrs	r2, r3
  400aa0:	4b0e      	ldr	r3, [pc, #56]	; (400adc <pmc_switch_mainck_to_xtal+0x70>)
  400aa2:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400aa4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400aa6:	bf00      	nop
  400aa8:	4b08      	ldr	r3, [pc, #32]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400aac:	f003 0301 	and.w	r3, r3, #1
  400ab0:	2b00      	cmp	r3, #0
  400ab2:	d0f9      	beq.n	400aa8 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400ab4:	4905      	ldr	r1, [pc, #20]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400ab6:	4b05      	ldr	r3, [pc, #20]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400ab8:	6a1a      	ldr	r2, [r3, #32]
  400aba:	4b09      	ldr	r3, [pc, #36]	; (400ae0 <pmc_switch_mainck_to_xtal+0x74>)
  400abc:	4313      	orrs	r3, r2
  400abe:	620b      	str	r3, [r1, #32]
	}
}
  400ac0:	bf00      	nop
  400ac2:	370c      	adds	r7, #12
  400ac4:	46bd      	mov	sp, r7
  400ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aca:	4770      	bx	lr
  400acc:	400e0600 	.word	0x400e0600
  400ad0:	fec8fffc 	.word	0xfec8fffc
  400ad4:	01370002 	.word	0x01370002
  400ad8:	ffc8fffc 	.word	0xffc8fffc
  400adc:	00370001 	.word	0x00370001
  400ae0:	01370000 	.word	0x01370000

00400ae4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400ae4:	b480      	push	{r7}
  400ae6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ae8:	4b04      	ldr	r3, [pc, #16]	; (400afc <pmc_osc_is_ready_mainck+0x18>)
  400aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400af0:	4618      	mov	r0, r3
  400af2:	46bd      	mov	sp, r7
  400af4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400af8:	4770      	bx	lr
  400afa:	bf00      	nop
  400afc:	400e0600 	.word	0x400e0600

00400b00 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400b00:	b480      	push	{r7}
  400b02:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b04:	4b04      	ldr	r3, [pc, #16]	; (400b18 <pmc_disable_pllack+0x18>)
  400b06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400b0c:	bf00      	nop
  400b0e:	46bd      	mov	sp, r7
  400b10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b14:	4770      	bx	lr
  400b16:	bf00      	nop
  400b18:	400e0600 	.word	0x400e0600

00400b1c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400b1c:	b480      	push	{r7}
  400b1e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b20:	4b04      	ldr	r3, [pc, #16]	; (400b34 <pmc_is_locked_pllack+0x18>)
  400b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b24:	f003 0302 	and.w	r3, r3, #2
}
  400b28:	4618      	mov	r0, r3
  400b2a:	46bd      	mov	sp, r7
  400b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b30:	4770      	bx	lr
  400b32:	bf00      	nop
  400b34:	400e0600 	.word	0x400e0600

00400b38 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400b38:	b480      	push	{r7}
  400b3a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400b3c:	4b04      	ldr	r3, [pc, #16]	; (400b50 <pmc_is_locked_upll+0x18>)
  400b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400b44:	4618      	mov	r0, r3
  400b46:	46bd      	mov	sp, r7
  400b48:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b4c:	4770      	bx	lr
  400b4e:	bf00      	nop
  400b50:	400e0600 	.word	0x400e0600

00400b54 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400b54:	b480      	push	{r7}
  400b56:	b083      	sub	sp, #12
  400b58:	af00      	add	r7, sp, #0
  400b5a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400b5c:	687b      	ldr	r3, [r7, #4]
  400b5e:	2b3f      	cmp	r3, #63	; 0x3f
  400b60:	d901      	bls.n	400b66 <pmc_enable_periph_clk+0x12>
		return 1;
  400b62:	2301      	movs	r3, #1
  400b64:	e02f      	b.n	400bc6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400b66:	687b      	ldr	r3, [r7, #4]
  400b68:	2b1f      	cmp	r3, #31
  400b6a:	d813      	bhi.n	400b94 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b6c:	4b19      	ldr	r3, [pc, #100]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400b6e:	699a      	ldr	r2, [r3, #24]
  400b70:	2101      	movs	r1, #1
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	fa01 f303 	lsl.w	r3, r1, r3
  400b78:	401a      	ands	r2, r3
  400b7a:	2101      	movs	r1, #1
  400b7c:	687b      	ldr	r3, [r7, #4]
  400b7e:	fa01 f303 	lsl.w	r3, r1, r3
  400b82:	429a      	cmp	r2, r3
  400b84:	d01e      	beq.n	400bc4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b86:	4a13      	ldr	r2, [pc, #76]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400b88:	2101      	movs	r1, #1
  400b8a:	687b      	ldr	r3, [r7, #4]
  400b8c:	fa01 f303 	lsl.w	r3, r1, r3
  400b90:	6113      	str	r3, [r2, #16]
  400b92:	e017      	b.n	400bc4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400b94:	687b      	ldr	r3, [r7, #4]
  400b96:	3b20      	subs	r3, #32
  400b98:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b9a:	4b0e      	ldr	r3, [pc, #56]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400b9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ba0:	2101      	movs	r1, #1
  400ba2:	687b      	ldr	r3, [r7, #4]
  400ba4:	fa01 f303 	lsl.w	r3, r1, r3
  400ba8:	401a      	ands	r2, r3
  400baa:	2101      	movs	r1, #1
  400bac:	687b      	ldr	r3, [r7, #4]
  400bae:	fa01 f303 	lsl.w	r3, r1, r3
  400bb2:	429a      	cmp	r2, r3
  400bb4:	d006      	beq.n	400bc4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bb6:	4a07      	ldr	r2, [pc, #28]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400bb8:	2101      	movs	r1, #1
  400bba:	687b      	ldr	r3, [r7, #4]
  400bbc:	fa01 f303 	lsl.w	r3, r1, r3
  400bc0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400bc4:	2300      	movs	r3, #0
}
  400bc6:	4618      	mov	r0, r3
  400bc8:	370c      	adds	r7, #12
  400bca:	46bd      	mov	sp, r7
  400bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd0:	4770      	bx	lr
  400bd2:	bf00      	nop
  400bd4:	400e0600 	.word	0x400e0600

00400bd8 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  400bd8:	b480      	push	{r7}
  400bda:	b083      	sub	sp, #12
  400bdc:	af00      	add	r7, sp, #0
  400bde:	6078      	str	r0, [r7, #4]
  400be0:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  400be2:	683b      	ldr	r3, [r7, #0]
  400be4:	2b00      	cmp	r3, #0
  400be6:	d006      	beq.n	400bf6 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400be8:	687b      	ldr	r3, [r7, #4]
  400bea:	685b      	ldr	r3, [r3, #4]
  400bec:	f043 0201 	orr.w	r2, r3, #1
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  400bf4:	e005      	b.n	400c02 <rtc_set_hour_mode+0x2a>
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  400bf6:	687b      	ldr	r3, [r7, #4]
  400bf8:	685b      	ldr	r3, [r3, #4]
  400bfa:	f023 0201 	bic.w	r2, r3, #1
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	605a      	str	r2, [r3, #4]
	}
}
  400c02:	bf00      	nop
  400c04:	370c      	adds	r7, #12
  400c06:	46bd      	mov	sp, r7
  400c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop

00400c10 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  400c10:	b480      	push	{r7}
  400c12:	b083      	sub	sp, #12
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
  400c18:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  400c1a:	687b      	ldr	r3, [r7, #4]
  400c1c:	683a      	ldr	r2, [r7, #0]
  400c1e:	621a      	str	r2, [r3, #32]
}
  400c20:	bf00      	nop
  400c22:	370c      	adds	r7, #12
  400c24:	46bd      	mov	sp, r7
  400c26:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c2a:	4770      	bx	lr

00400c2c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400c2c:	b480      	push	{r7}
  400c2e:	b087      	sub	sp, #28
  400c30:	af00      	add	r7, sp, #0
  400c32:	60f8      	str	r0, [r7, #12]
  400c34:	60b9      	str	r1, [r7, #8]
  400c36:	607a      	str	r2, [r7, #4]
  400c38:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400c3a:	68fb      	ldr	r3, [r7, #12]
  400c3c:	689b      	ldr	r3, [r3, #8]
  400c3e:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  400c40:	e002      	b.n	400c48 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  400c42:	68fb      	ldr	r3, [r7, #12]
  400c44:	689b      	ldr	r3, [r3, #8]
  400c46:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  400c48:	68fb      	ldr	r3, [r7, #12]
  400c4a:	689a      	ldr	r2, [r3, #8]
  400c4c:	697b      	ldr	r3, [r7, #20]
  400c4e:	429a      	cmp	r2, r3
  400c50:	d1f7      	bne.n	400c42 <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  400c52:	68bb      	ldr	r3, [r7, #8]
  400c54:	2b00      	cmp	r3, #0
  400c56:	d01c      	beq.n	400c92 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400c58:	697b      	ldr	r3, [r7, #20]
  400c5a:	0c1b      	lsrs	r3, r3, #16
  400c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400c60:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400c62:	693b      	ldr	r3, [r7, #16]
  400c64:	091a      	lsrs	r2, r3, #4
  400c66:	4613      	mov	r3, r2
  400c68:	009b      	lsls	r3, r3, #2
  400c6a:	4413      	add	r3, r2
  400c6c:	005b      	lsls	r3, r3, #1
  400c6e:	461a      	mov	r2, r3
  400c70:	693b      	ldr	r3, [r7, #16]
  400c72:	f003 030f 	and.w	r3, r3, #15
  400c76:	441a      	add	r2, r3
  400c78:	68bb      	ldr	r3, [r7, #8]
  400c7a:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400c7c:	697b      	ldr	r3, [r7, #20]
  400c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  400c82:	2b00      	cmp	r3, #0
  400c84:	d005      	beq.n	400c92 <rtc_get_time+0x66>
			*pul_hour += 12;
  400c86:	68bb      	ldr	r3, [r7, #8]
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	f103 020c 	add.w	r2, r3, #12
  400c8e:	68bb      	ldr	r3, [r7, #8]
  400c90:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400c92:	687b      	ldr	r3, [r7, #4]
  400c94:	2b00      	cmp	r3, #0
  400c96:	d011      	beq.n	400cbc <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400c98:	697b      	ldr	r3, [r7, #20]
  400c9a:	0a1b      	lsrs	r3, r3, #8
  400c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400ca0:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400ca2:	693b      	ldr	r3, [r7, #16]
  400ca4:	091a      	lsrs	r2, r3, #4
  400ca6:	4613      	mov	r3, r2
  400ca8:	009b      	lsls	r3, r3, #2
  400caa:	4413      	add	r3, r2
  400cac:	005b      	lsls	r3, r3, #1
  400cae:	461a      	mov	r2, r3
  400cb0:	693b      	ldr	r3, [r7, #16]
  400cb2:	f003 030f 	and.w	r3, r3, #15
  400cb6:	441a      	add	r2, r3
  400cb8:	687b      	ldr	r3, [r7, #4]
  400cba:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  400cbc:	683b      	ldr	r3, [r7, #0]
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d010      	beq.n	400ce4 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  400cc2:	697b      	ldr	r3, [r7, #20]
  400cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400cc8:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400cca:	693b      	ldr	r3, [r7, #16]
  400ccc:	091a      	lsrs	r2, r3, #4
  400cce:	4613      	mov	r3, r2
  400cd0:	009b      	lsls	r3, r3, #2
  400cd2:	4413      	add	r3, r2
  400cd4:	005b      	lsls	r3, r3, #1
  400cd6:	461a      	mov	r2, r3
  400cd8:	693b      	ldr	r3, [r7, #16]
  400cda:	f003 030f 	and.w	r3, r3, #15
  400cde:	441a      	add	r2, r3
  400ce0:	683b      	ldr	r3, [r7, #0]
  400ce2:	601a      	str	r2, [r3, #0]
	}
}
  400ce4:	bf00      	nop
  400ce6:	371c      	adds	r7, #28
  400ce8:	46bd      	mov	sp, r7
  400cea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cee:	4770      	bx	lr

00400cf0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400cf0:	b480      	push	{r7}
  400cf2:	b087      	sub	sp, #28
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	60f8      	str	r0, [r7, #12]
  400cf8:	60b9      	str	r1, [r7, #8]
  400cfa:	607a      	str	r2, [r7, #4]
  400cfc:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  400cfe:	2300      	movs	r3, #0
  400d00:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400d02:	68fb      	ldr	r3, [r7, #12]
  400d04:	685b      	ldr	r3, [r3, #4]
  400d06:	f003 0301 	and.w	r3, r3, #1
  400d0a:	2b00      	cmp	r3, #0
  400d0c:	d009      	beq.n	400d22 <rtc_set_time+0x32>
		if (ul_hour > 12) {
  400d0e:	68bb      	ldr	r3, [r7, #8]
  400d10:	2b0c      	cmp	r3, #12
  400d12:	d906      	bls.n	400d22 <rtc_set_time+0x32>
			ul_hour -= 12;
  400d14:	68bb      	ldr	r3, [r7, #8]
  400d16:	3b0c      	subs	r3, #12
  400d18:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  400d1a:	697b      	ldr	r3, [r7, #20]
  400d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400d20:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400d22:	68bb      	ldr	r3, [r7, #8]
  400d24:	4a33      	ldr	r2, [pc, #204]	; (400df4 <rtc_set_time+0x104>)
  400d26:	fba2 2303 	umull	r2, r3, r2, r3
  400d2a:	08db      	lsrs	r3, r3, #3
  400d2c:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400d2e:	68b9      	ldr	r1, [r7, #8]
  400d30:	4b30      	ldr	r3, [pc, #192]	; (400df4 <rtc_set_time+0x104>)
  400d32:	fba3 2301 	umull	r2, r3, r3, r1
  400d36:	08da      	lsrs	r2, r3, #3
  400d38:	4613      	mov	r3, r2
  400d3a:	009b      	lsls	r3, r3, #2
  400d3c:	4413      	add	r3, r2
  400d3e:	005b      	lsls	r3, r3, #1
  400d40:	1aca      	subs	r2, r1, r3
  400d42:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400d44:	4303      	orrs	r3, r0
  400d46:	697a      	ldr	r2, [r7, #20]
  400d48:	4313      	orrs	r3, r2
  400d4a:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400d4c:	687b      	ldr	r3, [r7, #4]
  400d4e:	4a29      	ldr	r2, [pc, #164]	; (400df4 <rtc_set_time+0x104>)
  400d50:	fba2 2303 	umull	r2, r3, r2, r3
  400d54:	08db      	lsrs	r3, r3, #3
  400d56:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400d58:	6879      	ldr	r1, [r7, #4]
  400d5a:	4b26      	ldr	r3, [pc, #152]	; (400df4 <rtc_set_time+0x104>)
  400d5c:	fba3 2301 	umull	r2, r3, r3, r1
  400d60:	08da      	lsrs	r2, r3, #3
  400d62:	4613      	mov	r3, r2
  400d64:	009b      	lsls	r3, r3, #2
  400d66:	4413      	add	r3, r2
  400d68:	005b      	lsls	r3, r3, #1
  400d6a:	1aca      	subs	r2, r1, r3
  400d6c:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400d6e:	4303      	orrs	r3, r0
  400d70:	697a      	ldr	r2, [r7, #20]
  400d72:	4313      	orrs	r3, r2
  400d74:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400d76:	683b      	ldr	r3, [r7, #0]
  400d78:	4a1e      	ldr	r2, [pc, #120]	; (400df4 <rtc_set_time+0x104>)
  400d7a:	fba2 2303 	umull	r2, r3, r2, r3
  400d7e:	08db      	lsrs	r3, r3, #3
  400d80:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400d82:	6839      	ldr	r1, [r7, #0]
  400d84:	4b1b      	ldr	r3, [pc, #108]	; (400df4 <rtc_set_time+0x104>)
  400d86:	fba3 2301 	umull	r2, r3, r3, r1
  400d8a:	08da      	lsrs	r2, r3, #3
  400d8c:	4613      	mov	r3, r2
  400d8e:	009b      	lsls	r3, r3, #2
  400d90:	4413      	add	r3, r2
  400d92:	005b      	lsls	r3, r3, #1
  400d94:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400d96:	ea40 0302 	orr.w	r3, r0, r2
  400d9a:	697a      	ldr	r2, [r7, #20]
  400d9c:	4313      	orrs	r3, r2
  400d9e:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400da0:	68fb      	ldr	r3, [r7, #12]
  400da2:	681b      	ldr	r3, [r3, #0]
  400da4:	f043 0201 	orr.w	r2, r3, #1
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400dac:	bf00      	nop
  400dae:	68fb      	ldr	r3, [r7, #12]
  400db0:	699b      	ldr	r3, [r3, #24]
  400db2:	f003 0301 	and.w	r3, r3, #1
  400db6:	2b00      	cmp	r3, #0
  400db8:	d0f9      	beq.n	400dae <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400dba:	68fb      	ldr	r3, [r7, #12]
  400dbc:	2201      	movs	r2, #1
  400dbe:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  400dc0:	68fb      	ldr	r3, [r7, #12]
  400dc2:	697a      	ldr	r2, [r7, #20]
  400dc4:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400dc6:	68fb      	ldr	r3, [r7, #12]
  400dc8:	681b      	ldr	r3, [r3, #0]
  400dca:	f023 0201 	bic.w	r2, r3, #1
  400dce:	68fb      	ldr	r3, [r7, #12]
  400dd0:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  400dd2:	68fb      	ldr	r3, [r7, #12]
  400dd4:	69db      	ldr	r3, [r3, #28]
  400dd6:	f043 0204 	orr.w	r2, r3, #4
  400dda:	68fb      	ldr	r3, [r7, #12]
  400ddc:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400dde:	68fb      	ldr	r3, [r7, #12]
  400de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400de2:	f003 0301 	and.w	r3, r3, #1
}
  400de6:	4618      	mov	r0, r3
  400de8:	371c      	adds	r7, #28
  400dea:	46bd      	mov	sp, r7
  400dec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop
  400df4:	cccccccd 	.word	0xcccccccd

00400df8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400df8:	b480      	push	{r7}
  400dfa:	b087      	sub	sp, #28
  400dfc:	af00      	add	r7, sp, #0
  400dfe:	60f8      	str	r0, [r7, #12]
  400e00:	60b9      	str	r1, [r7, #8]
  400e02:	607a      	str	r2, [r7, #4]
  400e04:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  400e06:	2300      	movs	r3, #0
  400e08:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400e0a:	68bb      	ldr	r3, [r7, #8]
  400e0c:	4a46      	ldr	r2, [pc, #280]	; (400f28 <rtc_set_date+0x130>)
  400e0e:	fba2 2303 	umull	r2, r3, r2, r3
  400e12:	099b      	lsrs	r3, r3, #6
  400e14:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400e16:	68bb      	ldr	r3, [r7, #8]
  400e18:	4a44      	ldr	r2, [pc, #272]	; (400f2c <rtc_set_date+0x134>)
  400e1a:	fba2 2303 	umull	r2, r3, r2, r3
  400e1e:	0959      	lsrs	r1, r3, #5
  400e20:	4b43      	ldr	r3, [pc, #268]	; (400f30 <rtc_set_date+0x138>)
  400e22:	fba3 2301 	umull	r2, r3, r3, r1
  400e26:	08da      	lsrs	r2, r3, #3
  400e28:	4613      	mov	r3, r2
  400e2a:	009b      	lsls	r3, r3, #2
  400e2c:	4413      	add	r3, r2
  400e2e:	005b      	lsls	r3, r3, #1
  400e30:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  400e32:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400e36:	697a      	ldr	r2, [r7, #20]
  400e38:	4313      	orrs	r3, r2
  400e3a:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400e3c:	68bb      	ldr	r3, [r7, #8]
  400e3e:	4a3c      	ldr	r2, [pc, #240]	; (400f30 <rtc_set_date+0x138>)
  400e40:	fba2 2303 	umull	r2, r3, r2, r3
  400e44:	08d9      	lsrs	r1, r3, #3
  400e46:	4b3a      	ldr	r3, [pc, #232]	; (400f30 <rtc_set_date+0x138>)
  400e48:	fba3 2301 	umull	r2, r3, r3, r1
  400e4c:	08da      	lsrs	r2, r3, #3
  400e4e:	4613      	mov	r3, r2
  400e50:	009b      	lsls	r3, r3, #2
  400e52:	4413      	add	r3, r2
  400e54:	005b      	lsls	r3, r3, #1
  400e56:	1aca      	subs	r2, r1, r3
  400e58:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400e5a:	68b9      	ldr	r1, [r7, #8]
  400e5c:	4b34      	ldr	r3, [pc, #208]	; (400f30 <rtc_set_date+0x138>)
  400e5e:	fba3 2301 	umull	r2, r3, r3, r1
  400e62:	08da      	lsrs	r2, r3, #3
  400e64:	4613      	mov	r3, r2
  400e66:	009b      	lsls	r3, r3, #2
  400e68:	4413      	add	r3, r2
  400e6a:	005b      	lsls	r3, r3, #1
  400e6c:	1aca      	subs	r2, r1, r3
  400e6e:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  400e70:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400e72:	697a      	ldr	r2, [r7, #20]
  400e74:	4313      	orrs	r3, r2
  400e76:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	4a2d      	ldr	r2, [pc, #180]	; (400f30 <rtc_set_date+0x138>)
  400e7c:	fba2 2303 	umull	r2, r3, r2, r3
  400e80:	08db      	lsrs	r3, r3, #3
  400e82:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400e84:	6879      	ldr	r1, [r7, #4]
  400e86:	4b2a      	ldr	r3, [pc, #168]	; (400f30 <rtc_set_date+0x138>)
  400e88:	fba3 2301 	umull	r2, r3, r3, r1
  400e8c:	08da      	lsrs	r2, r3, #3
  400e8e:	4613      	mov	r3, r2
  400e90:	009b      	lsls	r3, r3, #2
  400e92:	4413      	add	r3, r2
  400e94:	005b      	lsls	r3, r3, #1
  400e96:	1aca      	subs	r2, r1, r3
  400e98:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400e9a:	4303      	orrs	r3, r0
  400e9c:	697a      	ldr	r2, [r7, #20]
  400e9e:	4313      	orrs	r3, r2
  400ea0:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400ea2:	6a3b      	ldr	r3, [r7, #32]
  400ea4:	055b      	lsls	r3, r3, #21
  400ea6:	697a      	ldr	r2, [r7, #20]
  400ea8:	4313      	orrs	r3, r2
  400eaa:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400eac:	683b      	ldr	r3, [r7, #0]
  400eae:	4a20      	ldr	r2, [pc, #128]	; (400f30 <rtc_set_date+0x138>)
  400eb0:	fba2 2303 	umull	r2, r3, r2, r3
  400eb4:	08db      	lsrs	r3, r3, #3
  400eb6:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400eb8:	6839      	ldr	r1, [r7, #0]
  400eba:	4b1d      	ldr	r3, [pc, #116]	; (400f30 <rtc_set_date+0x138>)
  400ebc:	fba3 2301 	umull	r2, r3, r3, r1
  400ec0:	08da      	lsrs	r2, r3, #3
  400ec2:	4613      	mov	r3, r2
  400ec4:	009b      	lsls	r3, r3, #2
  400ec6:	4413      	add	r3, r2
  400ec8:	005b      	lsls	r3, r3, #1
  400eca:	1aca      	subs	r2, r1, r3
  400ecc:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400ece:	4303      	orrs	r3, r0
  400ed0:	697a      	ldr	r2, [r7, #20]
  400ed2:	4313      	orrs	r3, r2
  400ed4:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	681b      	ldr	r3, [r3, #0]
  400eda:	f043 0202 	orr.w	r2, r3, #2
  400ede:	68fb      	ldr	r3, [r7, #12]
  400ee0:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400ee2:	bf00      	nop
  400ee4:	68fb      	ldr	r3, [r7, #12]
  400ee6:	699b      	ldr	r3, [r3, #24]
  400ee8:	f003 0301 	and.w	r3, r3, #1
  400eec:	2b00      	cmp	r3, #0
  400eee:	d0f9      	beq.n	400ee4 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400ef0:	68fb      	ldr	r3, [r7, #12]
  400ef2:	2201      	movs	r2, #1
  400ef4:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  400ef6:	68fb      	ldr	r3, [r7, #12]
  400ef8:	697a      	ldr	r2, [r7, #20]
  400efa:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	f023 0202 	bic.w	r2, r3, #2
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	69db      	ldr	r3, [r3, #28]
  400f0c:	f043 0204 	orr.w	r2, r3, #4
  400f10:	68fb      	ldr	r3, [r7, #12]
  400f12:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400f18:	f003 0302 	and.w	r3, r3, #2
}
  400f1c:	4618      	mov	r0, r3
  400f1e:	371c      	adds	r7, #28
  400f20:	46bd      	mov	sp, r7
  400f22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f26:	4770      	bx	lr
  400f28:	10624dd3 	.word	0x10624dd3
  400f2c:	51eb851f 	.word	0x51eb851f
  400f30:	cccccccd 	.word	0xcccccccd

00400f34 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400f34:	b480      	push	{r7}
  400f36:	b087      	sub	sp, #28
  400f38:	af00      	add	r7, sp, #0
  400f3a:	60f8      	str	r0, [r7, #12]
  400f3c:	60b9      	str	r1, [r7, #8]
  400f3e:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f40:	68fa      	ldr	r2, [r7, #12]
  400f42:	68bb      	ldr	r3, [r7, #8]
  400f44:	019b      	lsls	r3, r3, #6
  400f46:	4413      	add	r3, r2
  400f48:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400f4a:	697b      	ldr	r3, [r7, #20]
  400f4c:	2202      	movs	r2, #2
  400f4e:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400f50:	697b      	ldr	r3, [r7, #20]
  400f52:	f04f 32ff 	mov.w	r2, #4294967295
  400f56:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400f58:	697b      	ldr	r3, [r7, #20]
  400f5a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400f5c:	697b      	ldr	r3, [r7, #20]
  400f5e:	687a      	ldr	r2, [r7, #4]
  400f60:	605a      	str	r2, [r3, #4]
}
  400f62:	bf00      	nop
  400f64:	371c      	adds	r7, #28
  400f66:	46bd      	mov	sp, r7
  400f68:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f6c:	4770      	bx	lr
  400f6e:	bf00      	nop

00400f70 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400f70:	b480      	push	{r7}
  400f72:	b083      	sub	sp, #12
  400f74:	af00      	add	r7, sp, #0
  400f76:	6078      	str	r0, [r7, #4]
  400f78:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400f7a:	687a      	ldr	r2, [r7, #4]
  400f7c:	683b      	ldr	r3, [r7, #0]
  400f7e:	019b      	lsls	r3, r3, #6
  400f80:	4413      	add	r3, r2
  400f82:	2205      	movs	r2, #5
  400f84:	601a      	str	r2, [r3, #0]
}
  400f86:	bf00      	nop
  400f88:	370c      	adds	r7, #12
  400f8a:	46bd      	mov	sp, r7
  400f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f90:	4770      	bx	lr
  400f92:	bf00      	nop

00400f94 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400f94:	b480      	push	{r7}
  400f96:	b085      	sub	sp, #20
  400f98:	af00      	add	r7, sp, #0
  400f9a:	60f8      	str	r0, [r7, #12]
  400f9c:	60b9      	str	r1, [r7, #8]
  400f9e:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400fa0:	68fa      	ldr	r2, [r7, #12]
  400fa2:	68bb      	ldr	r3, [r7, #8]
  400fa4:	019b      	lsls	r3, r3, #6
  400fa6:	4413      	add	r3, r2
  400fa8:	331c      	adds	r3, #28
  400faa:	687a      	ldr	r2, [r7, #4]
  400fac:	601a      	str	r2, [r3, #0]
}
  400fae:	bf00      	nop
  400fb0:	3714      	adds	r7, #20
  400fb2:	46bd      	mov	sp, r7
  400fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop

00400fbc <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400fbc:	b480      	push	{r7}
  400fbe:	b087      	sub	sp, #28
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	60f8      	str	r0, [r7, #12]
  400fc4:	60b9      	str	r1, [r7, #8]
  400fc6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400fc8:	68fa      	ldr	r2, [r7, #12]
  400fca:	68bb      	ldr	r3, [r7, #8]
  400fcc:	019b      	lsls	r3, r3, #6
  400fce:	4413      	add	r3, r2
  400fd0:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400fd2:	697b      	ldr	r3, [r7, #20]
  400fd4:	687a      	ldr	r2, [r7, #4]
  400fd6:	625a      	str	r2, [r3, #36]	; 0x24
}
  400fd8:	bf00      	nop
  400fda:	371c      	adds	r7, #28
  400fdc:	46bd      	mov	sp, r7
  400fde:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fe2:	4770      	bx	lr

00400fe4 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400fe4:	b480      	push	{r7}
  400fe6:	b085      	sub	sp, #20
  400fe8:	af00      	add	r7, sp, #0
  400fea:	6078      	str	r0, [r7, #4]
  400fec:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400fee:	687a      	ldr	r2, [r7, #4]
  400ff0:	683b      	ldr	r3, [r7, #0]
  400ff2:	019b      	lsls	r3, r3, #6
  400ff4:	4413      	add	r3, r2
  400ff6:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400ff8:	68fb      	ldr	r3, [r7, #12]
  400ffa:	6a1b      	ldr	r3, [r3, #32]
}
  400ffc:	4618      	mov	r0, r3
  400ffe:	3714      	adds	r7, #20
  401000:	46bd      	mov	sp, r7
  401002:	f85d 7b04 	ldr.w	r7, [sp], #4
  401006:	4770      	bx	lr

00401008 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401008:	b480      	push	{r7}
  40100a:	b08d      	sub	sp, #52	; 0x34
  40100c:	af00      	add	r7, sp, #0
  40100e:	60f8      	str	r0, [r7, #12]
  401010:	60b9      	str	r1, [r7, #8]
  401012:	607a      	str	r2, [r7, #4]
  401014:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401016:	2302      	movs	r3, #2
  401018:	613b      	str	r3, [r7, #16]
  40101a:	2308      	movs	r3, #8
  40101c:	617b      	str	r3, [r7, #20]
  40101e:	2320      	movs	r3, #32
  401020:	61bb      	str	r3, [r7, #24]
  401022:	2380      	movs	r3, #128	; 0x80
  401024:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401028:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40102a:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40102c:	2300      	movs	r3, #0
  40102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  401030:	e01a      	b.n	401068 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401034:	009b      	lsls	r3, r3, #2
  401036:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40103a:	4413      	add	r3, r2
  40103c:	f853 3c20 	ldr.w	r3, [r3, #-32]
  401040:	68ba      	ldr	r2, [r7, #8]
  401042:	fbb2 f3f3 	udiv	r3, r2, r3
  401046:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  401048:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40104a:	0c1b      	lsrs	r3, r3, #16
  40104c:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40104e:	68fa      	ldr	r2, [r7, #12]
  401050:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401052:	429a      	cmp	r2, r3
  401054:	d901      	bls.n	40105a <tc_find_mck_divisor+0x52>
			return 0;
  401056:	2300      	movs	r3, #0
  401058:	e023      	b.n	4010a2 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40105a:	68fa      	ldr	r2, [r7, #12]
  40105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40105e:	429a      	cmp	r2, r3
  401060:	d206      	bcs.n	401070 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  401062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401064:	3301      	adds	r3, #1
  401066:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40106a:	2b04      	cmp	r3, #4
  40106c:	d9e1      	bls.n	401032 <tc_find_mck_divisor+0x2a>
  40106e:	e000      	b.n	401072 <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  401070:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401074:	2b04      	cmp	r3, #4
  401076:	d901      	bls.n	40107c <tc_find_mck_divisor+0x74>
		return 0;
  401078:	2300      	movs	r3, #0
  40107a:	e012      	b.n	4010a2 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40107c:	687b      	ldr	r3, [r7, #4]
  40107e:	2b00      	cmp	r3, #0
  401080:	d008      	beq.n	401094 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401084:	009b      	lsls	r3, r3, #2
  401086:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40108a:	4413      	add	r3, r2
  40108c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401090:	687b      	ldr	r3, [r7, #4]
  401092:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401094:	683b      	ldr	r3, [r7, #0]
  401096:	2b00      	cmp	r3, #0
  401098:	d002      	beq.n	4010a0 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40109a:	683b      	ldr	r3, [r7, #0]
  40109c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40109e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4010a0:	2301      	movs	r3, #1
}
  4010a2:	4618      	mov	r0, r3
  4010a4:	3734      	adds	r7, #52	; 0x34
  4010a6:	46bd      	mov	sp, r7
  4010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010ac:	4770      	bx	lr
  4010ae:	bf00      	nop

004010b0 <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  4010b0:	b480      	push	{r7}
  4010b2:	b083      	sub	sp, #12
  4010b4:	af00      	add	r7, sp, #0
  4010b6:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  4010b8:	687b      	ldr	r3, [r7, #4]
  4010ba:	695b      	ldr	r3, [r3, #20]
  4010bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4010c0:	2b00      	cmp	r3, #0
  4010c2:	bf14      	ite	ne
  4010c4:	2301      	movne	r3, #1
  4010c6:	2300      	moveq	r3, #0
  4010c8:	b2db      	uxtb	r3, r3
}
  4010ca:	4618      	mov	r0, r3
  4010cc:	370c      	adds	r7, #12
  4010ce:	46bd      	mov	sp, r7
  4010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010d4:	4770      	bx	lr
  4010d6:	bf00      	nop

004010d8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4010d8:	b480      	push	{r7}
  4010da:	b083      	sub	sp, #12
  4010dc:	af00      	add	r7, sp, #0
  4010de:	6078      	str	r0, [r7, #4]
  4010e0:	460b      	mov	r3, r1
  4010e2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4010e4:	687b      	ldr	r3, [r7, #4]
  4010e6:	695b      	ldr	r3, [r3, #20]
  4010e8:	f003 0302 	and.w	r3, r3, #2
  4010ec:	2b00      	cmp	r3, #0
  4010ee:	d101      	bne.n	4010f4 <uart_write+0x1c>
		return 1;
  4010f0:	2301      	movs	r3, #1
  4010f2:	e003      	b.n	4010fc <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4010f4:	78fa      	ldrb	r2, [r7, #3]
  4010f6:	687b      	ldr	r3, [r7, #4]
  4010f8:	61da      	str	r2, [r3, #28]
	return 0;
  4010fa:	2300      	movs	r3, #0
}
  4010fc:	4618      	mov	r0, r3
  4010fe:	370c      	adds	r7, #12
  401100:	46bd      	mov	sp, r7
  401102:	f85d 7b04 	ldr.w	r7, [sp], #4
  401106:	4770      	bx	lr

00401108 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401108:	b480      	push	{r7}
  40110a:	b083      	sub	sp, #12
  40110c:	af00      	add	r7, sp, #0
  40110e:	6078      	str	r0, [r7, #4]
  401110:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401112:	687b      	ldr	r3, [r7, #4]
  401114:	695b      	ldr	r3, [r3, #20]
  401116:	f003 0301 	and.w	r3, r3, #1
  40111a:	2b00      	cmp	r3, #0
  40111c:	d101      	bne.n	401122 <uart_read+0x1a>
		return 1;
  40111e:	2301      	movs	r3, #1
  401120:	e005      	b.n	40112e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401122:	687b      	ldr	r3, [r7, #4]
  401124:	699b      	ldr	r3, [r3, #24]
  401126:	b2da      	uxtb	r2, r3
  401128:	683b      	ldr	r3, [r7, #0]
  40112a:	701a      	strb	r2, [r3, #0]
	return 0;
  40112c:	2300      	movs	r3, #0
}
  40112e:	4618      	mov	r0, r3
  401130:	370c      	adds	r7, #12
  401132:	46bd      	mov	sp, r7
  401134:	f85d 7b04 	ldr.w	r7, [sp], #4
  401138:	4770      	bx	lr
  40113a:	bf00      	nop

0040113c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40113c:	b480      	push	{r7}
  40113e:	b089      	sub	sp, #36	; 0x24
  401140:	af00      	add	r7, sp, #0
  401142:	60f8      	str	r0, [r7, #12]
  401144:	60b9      	str	r1, [r7, #8]
  401146:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401148:	68bb      	ldr	r3, [r7, #8]
  40114a:	011a      	lsls	r2, r3, #4
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	429a      	cmp	r2, r3
  401150:	d802      	bhi.n	401158 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401152:	2310      	movs	r3, #16
  401154:	61fb      	str	r3, [r7, #28]
  401156:	e001      	b.n	40115c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401158:	2308      	movs	r3, #8
  40115a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40115c:	687b      	ldr	r3, [r7, #4]
  40115e:	00da      	lsls	r2, r3, #3
  401160:	69fb      	ldr	r3, [r7, #28]
  401162:	68b9      	ldr	r1, [r7, #8]
  401164:	fb01 f303 	mul.w	r3, r1, r3
  401168:	085b      	lsrs	r3, r3, #1
  40116a:	441a      	add	r2, r3
  40116c:	69fb      	ldr	r3, [r7, #28]
  40116e:	68b9      	ldr	r1, [r7, #8]
  401170:	fb01 f303 	mul.w	r3, r1, r3
  401174:	fbb2 f3f3 	udiv	r3, r2, r3
  401178:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40117a:	69bb      	ldr	r3, [r7, #24]
  40117c:	08db      	lsrs	r3, r3, #3
  40117e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401180:	69bb      	ldr	r3, [r7, #24]
  401182:	f003 0307 	and.w	r3, r3, #7
  401186:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401188:	697b      	ldr	r3, [r7, #20]
  40118a:	2b00      	cmp	r3, #0
  40118c:	d003      	beq.n	401196 <usart_set_async_baudrate+0x5a>
  40118e:	697b      	ldr	r3, [r7, #20]
  401190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401194:	d301      	bcc.n	40119a <usart_set_async_baudrate+0x5e>
		return 1;
  401196:	2301      	movs	r3, #1
  401198:	e00f      	b.n	4011ba <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40119a:	69fb      	ldr	r3, [r7, #28]
  40119c:	2b08      	cmp	r3, #8
  40119e:	d105      	bne.n	4011ac <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	685b      	ldr	r3, [r3, #4]
  4011a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4011a8:	68fb      	ldr	r3, [r7, #12]
  4011aa:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4011ac:	693b      	ldr	r3, [r7, #16]
  4011ae:	041a      	lsls	r2, r3, #16
  4011b0:	697b      	ldr	r3, [r7, #20]
  4011b2:	431a      	orrs	r2, r3
  4011b4:	68fb      	ldr	r3, [r7, #12]
  4011b6:	621a      	str	r2, [r3, #32]

	return 0;
  4011b8:	2300      	movs	r3, #0
}
  4011ba:	4618      	mov	r0, r3
  4011bc:	3724      	adds	r7, #36	; 0x24
  4011be:	46bd      	mov	sp, r7
  4011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011c4:	4770      	bx	lr
  4011c6:	bf00      	nop

004011c8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4011c8:	b580      	push	{r7, lr}
  4011ca:	b082      	sub	sp, #8
  4011cc:	af00      	add	r7, sp, #0
  4011ce:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4011d0:	6878      	ldr	r0, [r7, #4]
  4011d2:	4b0d      	ldr	r3, [pc, #52]	; (401208 <usart_reset+0x40>)
  4011d4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4011d6:	687b      	ldr	r3, [r7, #4]
  4011d8:	2200      	movs	r2, #0
  4011da:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4011dc:	687b      	ldr	r3, [r7, #4]
  4011de:	2200      	movs	r2, #0
  4011e0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4011e2:	687b      	ldr	r3, [r7, #4]
  4011e4:	2200      	movs	r2, #0
  4011e6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4011e8:	6878      	ldr	r0, [r7, #4]
  4011ea:	4b08      	ldr	r3, [pc, #32]	; (40120c <usart_reset+0x44>)
  4011ec:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4011ee:	6878      	ldr	r0, [r7, #4]
  4011f0:	4b07      	ldr	r3, [pc, #28]	; (401210 <usart_reset+0x48>)
  4011f2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4011f4:	6878      	ldr	r0, [r7, #4]
  4011f6:	4b07      	ldr	r3, [pc, #28]	; (401214 <usart_reset+0x4c>)
  4011f8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4011fa:	6878      	ldr	r0, [r7, #4]
  4011fc:	4b06      	ldr	r3, [pc, #24]	; (401218 <usart_reset+0x50>)
  4011fe:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401200:	bf00      	nop
  401202:	3708      	adds	r7, #8
  401204:	46bd      	mov	sp, r7
  401206:	bd80      	pop	{r7, pc}
  401208:	004013b1 	.word	0x004013b1
  40120c:	004012bd 	.word	0x004012bd
  401210:	004012f5 	.word	0x004012f5
  401214:	00401311 	.word	0x00401311
  401218:	0040132d 	.word	0x0040132d

0040121c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40121c:	b580      	push	{r7, lr}
  40121e:	b084      	sub	sp, #16
  401220:	af00      	add	r7, sp, #0
  401222:	60f8      	str	r0, [r7, #12]
  401224:	60b9      	str	r1, [r7, #8]
  401226:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401228:	68f8      	ldr	r0, [r7, #12]
  40122a:	4b1a      	ldr	r3, [pc, #104]	; (401294 <usart_init_rs232+0x78>)
  40122c:	4798      	blx	r3

	ul_reg_val = 0;
  40122e:	4b1a      	ldr	r3, [pc, #104]	; (401298 <usart_init_rs232+0x7c>)
  401230:	2200      	movs	r2, #0
  401232:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401234:	68bb      	ldr	r3, [r7, #8]
  401236:	2b00      	cmp	r3, #0
  401238:	d009      	beq.n	40124e <usart_init_rs232+0x32>
  40123a:	68bb      	ldr	r3, [r7, #8]
  40123c:	681b      	ldr	r3, [r3, #0]
  40123e:	687a      	ldr	r2, [r7, #4]
  401240:	4619      	mov	r1, r3
  401242:	68f8      	ldr	r0, [r7, #12]
  401244:	4b15      	ldr	r3, [pc, #84]	; (40129c <usart_init_rs232+0x80>)
  401246:	4798      	blx	r3
  401248:	4603      	mov	r3, r0
  40124a:	2b00      	cmp	r3, #0
  40124c:	d001      	beq.n	401252 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40124e:	2301      	movs	r3, #1
  401250:	e01b      	b.n	40128a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401252:	68bb      	ldr	r3, [r7, #8]
  401254:	685a      	ldr	r2, [r3, #4]
  401256:	68bb      	ldr	r3, [r7, #8]
  401258:	689b      	ldr	r3, [r3, #8]
  40125a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40125c:	68bb      	ldr	r3, [r7, #8]
  40125e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401260:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401262:	68bb      	ldr	r3, [r7, #8]
  401264:	68db      	ldr	r3, [r3, #12]
  401266:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401268:	4b0b      	ldr	r3, [pc, #44]	; (401298 <usart_init_rs232+0x7c>)
  40126a:	681b      	ldr	r3, [r3, #0]
  40126c:	4313      	orrs	r3, r2
  40126e:	4a0a      	ldr	r2, [pc, #40]	; (401298 <usart_init_rs232+0x7c>)
  401270:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401272:	4b09      	ldr	r3, [pc, #36]	; (401298 <usart_init_rs232+0x7c>)
  401274:	681b      	ldr	r3, [r3, #0]
  401276:	4a08      	ldr	r2, [pc, #32]	; (401298 <usart_init_rs232+0x7c>)
  401278:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40127a:	68fb      	ldr	r3, [r7, #12]
  40127c:	685a      	ldr	r2, [r3, #4]
  40127e:	4b06      	ldr	r3, [pc, #24]	; (401298 <usart_init_rs232+0x7c>)
  401280:	681b      	ldr	r3, [r3, #0]
  401282:	431a      	orrs	r2, r3
  401284:	68fb      	ldr	r3, [r7, #12]
  401286:	605a      	str	r2, [r3, #4]

	return 0;
  401288:	2300      	movs	r3, #0
}
  40128a:	4618      	mov	r0, r3
  40128c:	3710      	adds	r7, #16
  40128e:	46bd      	mov	sp, r7
  401290:	bd80      	pop	{r7, pc}
  401292:	bf00      	nop
  401294:	004011c9 	.word	0x004011c9
  401298:	20400918 	.word	0x20400918
  40129c:	0040113d 	.word	0x0040113d

004012a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4012a0:	b480      	push	{r7}
  4012a2:	b083      	sub	sp, #12
  4012a4:	af00      	add	r7, sp, #0
  4012a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4012a8:	687b      	ldr	r3, [r7, #4]
  4012aa:	2240      	movs	r2, #64	; 0x40
  4012ac:	601a      	str	r2, [r3, #0]
}
  4012ae:	bf00      	nop
  4012b0:	370c      	adds	r7, #12
  4012b2:	46bd      	mov	sp, r7
  4012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012b8:	4770      	bx	lr
  4012ba:	bf00      	nop

004012bc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4012bc:	b480      	push	{r7}
  4012be:	b083      	sub	sp, #12
  4012c0:	af00      	add	r7, sp, #0
  4012c2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	2288      	movs	r2, #136	; 0x88
  4012c8:	601a      	str	r2, [r3, #0]
}
  4012ca:	bf00      	nop
  4012cc:	370c      	adds	r7, #12
  4012ce:	46bd      	mov	sp, r7
  4012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d4:	4770      	bx	lr
  4012d6:	bf00      	nop

004012d8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4012d8:	b480      	push	{r7}
  4012da:	b083      	sub	sp, #12
  4012dc:	af00      	add	r7, sp, #0
  4012de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	2210      	movs	r2, #16
  4012e4:	601a      	str	r2, [r3, #0]
}
  4012e6:	bf00      	nop
  4012e8:	370c      	adds	r7, #12
  4012ea:	46bd      	mov	sp, r7
  4012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012f0:	4770      	bx	lr
  4012f2:	bf00      	nop

004012f4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4012f4:	b480      	push	{r7}
  4012f6:	b083      	sub	sp, #12
  4012f8:	af00      	add	r7, sp, #0
  4012fa:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4012fc:	687b      	ldr	r3, [r7, #4]
  4012fe:	2224      	movs	r2, #36	; 0x24
  401300:	601a      	str	r2, [r3, #0]
}
  401302:	bf00      	nop
  401304:	370c      	adds	r7, #12
  401306:	46bd      	mov	sp, r7
  401308:	f85d 7b04 	ldr.w	r7, [sp], #4
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop

00401310 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401310:	b480      	push	{r7}
  401312:	b083      	sub	sp, #12
  401314:	af00      	add	r7, sp, #0
  401316:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401318:	687b      	ldr	r3, [r7, #4]
  40131a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40131e:	601a      	str	r2, [r3, #0]
}
  401320:	bf00      	nop
  401322:	370c      	adds	r7, #12
  401324:	46bd      	mov	sp, r7
  401326:	f85d 7b04 	ldr.w	r7, [sp], #4
  40132a:	4770      	bx	lr

0040132c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40132c:	b480      	push	{r7}
  40132e:	b083      	sub	sp, #12
  401330:	af00      	add	r7, sp, #0
  401332:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401334:	687b      	ldr	r3, [r7, #4]
  401336:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40133a:	601a      	str	r2, [r3, #0]
}
  40133c:	bf00      	nop
  40133e:	370c      	adds	r7, #12
  401340:	46bd      	mov	sp, r7
  401342:	f85d 7b04 	ldr.w	r7, [sp], #4
  401346:	4770      	bx	lr

00401348 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401348:	b480      	push	{r7}
  40134a:	b083      	sub	sp, #12
  40134c:	af00      	add	r7, sp, #0
  40134e:	6078      	str	r0, [r7, #4]
  401350:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401352:	687b      	ldr	r3, [r7, #4]
  401354:	695b      	ldr	r3, [r3, #20]
  401356:	f003 0302 	and.w	r3, r3, #2
  40135a:	2b00      	cmp	r3, #0
  40135c:	d101      	bne.n	401362 <usart_write+0x1a>
		return 1;
  40135e:	2301      	movs	r3, #1
  401360:	e005      	b.n	40136e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401362:	683b      	ldr	r3, [r7, #0]
  401364:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401368:	687b      	ldr	r3, [r7, #4]
  40136a:	61da      	str	r2, [r3, #28]
	return 0;
  40136c:	2300      	movs	r3, #0
}
  40136e:	4618      	mov	r0, r3
  401370:	370c      	adds	r7, #12
  401372:	46bd      	mov	sp, r7
  401374:	f85d 7b04 	ldr.w	r7, [sp], #4
  401378:	4770      	bx	lr
  40137a:	bf00      	nop

0040137c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40137c:	b480      	push	{r7}
  40137e:	b083      	sub	sp, #12
  401380:	af00      	add	r7, sp, #0
  401382:	6078      	str	r0, [r7, #4]
  401384:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	695b      	ldr	r3, [r3, #20]
  40138a:	f003 0301 	and.w	r3, r3, #1
  40138e:	2b00      	cmp	r3, #0
  401390:	d101      	bne.n	401396 <usart_read+0x1a>
		return 1;
  401392:	2301      	movs	r3, #1
  401394:	e006      	b.n	4013a4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401396:	687b      	ldr	r3, [r7, #4]
  401398:	699b      	ldr	r3, [r3, #24]
  40139a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40139e:	683b      	ldr	r3, [r7, #0]
  4013a0:	601a      	str	r2, [r3, #0]

	return 0;
  4013a2:	2300      	movs	r3, #0
}
  4013a4:	4618      	mov	r0, r3
  4013a6:	370c      	adds	r7, #12
  4013a8:	46bd      	mov	sp, r7
  4013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013ae:	4770      	bx	lr

004013b0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4013b0:	b480      	push	{r7}
  4013b2:	b083      	sub	sp, #12
  4013b4:	af00      	add	r7, sp, #0
  4013b6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4013b8:	687b      	ldr	r3, [r7, #4]
  4013ba:	4a04      	ldr	r2, [pc, #16]	; (4013cc <usart_disable_writeprotect+0x1c>)
  4013bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4013c0:	bf00      	nop
  4013c2:	370c      	adds	r7, #12
  4013c4:	46bd      	mov	sp, r7
  4013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013ca:	4770      	bx	lr
  4013cc:	55534100 	.word	0x55534100

004013d0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4013d0:	b480      	push	{r7}
  4013d2:	b083      	sub	sp, #12
  4013d4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013d6:	f3ef 8310 	mrs	r3, PRIMASK
  4013da:	607b      	str	r3, [r7, #4]
  return(result);
  4013dc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4013de:	2b00      	cmp	r3, #0
  4013e0:	bf0c      	ite	eq
  4013e2:	2301      	moveq	r3, #1
  4013e4:	2300      	movne	r3, #0
  4013e6:	b2db      	uxtb	r3, r3
  4013e8:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4013ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4013ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4013f0:	4b04      	ldr	r3, [pc, #16]	; (401404 <cpu_irq_save+0x34>)
  4013f2:	2200      	movs	r2, #0
  4013f4:	701a      	strb	r2, [r3, #0]
	return flags;
  4013f6:	683b      	ldr	r3, [r7, #0]
}
  4013f8:	4618      	mov	r0, r3
  4013fa:	370c      	adds	r7, #12
  4013fc:	46bd      	mov	sp, r7
  4013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401402:	4770      	bx	lr
  401404:	2040000c 	.word	0x2040000c

00401408 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401408:	b480      	push	{r7}
  40140a:	b083      	sub	sp, #12
  40140c:	af00      	add	r7, sp, #0
  40140e:	6078      	str	r0, [r7, #4]
	return (flags);
  401410:	687b      	ldr	r3, [r7, #4]
  401412:	2b00      	cmp	r3, #0
  401414:	bf14      	ite	ne
  401416:	2301      	movne	r3, #1
  401418:	2300      	moveq	r3, #0
  40141a:	b2db      	uxtb	r3, r3
}
  40141c:	4618      	mov	r0, r3
  40141e:	370c      	adds	r7, #12
  401420:	46bd      	mov	sp, r7
  401422:	f85d 7b04 	ldr.w	r7, [sp], #4
  401426:	4770      	bx	lr

00401428 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401428:	b580      	push	{r7, lr}
  40142a:	b082      	sub	sp, #8
  40142c:	af00      	add	r7, sp, #0
  40142e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401430:	6878      	ldr	r0, [r7, #4]
  401432:	4b07      	ldr	r3, [pc, #28]	; (401450 <cpu_irq_restore+0x28>)
  401434:	4798      	blx	r3
  401436:	4603      	mov	r3, r0
  401438:	2b00      	cmp	r3, #0
  40143a:	d005      	beq.n	401448 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40143c:	4b05      	ldr	r3, [pc, #20]	; (401454 <cpu_irq_restore+0x2c>)
  40143e:	2201      	movs	r2, #1
  401440:	701a      	strb	r2, [r3, #0]
  401442:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401446:	b662      	cpsie	i
}
  401448:	bf00      	nop
  40144a:	3708      	adds	r7, #8
  40144c:	46bd      	mov	sp, r7
  40144e:	bd80      	pop	{r7, pc}
  401450:	00401409 	.word	0x00401409
  401454:	2040000c 	.word	0x2040000c

00401458 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401458:	b580      	push	{r7, lr}
  40145a:	b084      	sub	sp, #16
  40145c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40145e:	4b1e      	ldr	r3, [pc, #120]	; (4014d8 <Reset_Handler+0x80>)
  401460:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401462:	4b1e      	ldr	r3, [pc, #120]	; (4014dc <Reset_Handler+0x84>)
  401464:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401466:	68fa      	ldr	r2, [r7, #12]
  401468:	68bb      	ldr	r3, [r7, #8]
  40146a:	429a      	cmp	r2, r3
  40146c:	d00c      	beq.n	401488 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40146e:	e007      	b.n	401480 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401470:	68bb      	ldr	r3, [r7, #8]
  401472:	1d1a      	adds	r2, r3, #4
  401474:	60ba      	str	r2, [r7, #8]
  401476:	68fa      	ldr	r2, [r7, #12]
  401478:	1d11      	adds	r1, r2, #4
  40147a:	60f9      	str	r1, [r7, #12]
  40147c:	6812      	ldr	r2, [r2, #0]
  40147e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401480:	68bb      	ldr	r3, [r7, #8]
  401482:	4a17      	ldr	r2, [pc, #92]	; (4014e0 <Reset_Handler+0x88>)
  401484:	4293      	cmp	r3, r2
  401486:	d3f3      	bcc.n	401470 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401488:	4b16      	ldr	r3, [pc, #88]	; (4014e4 <Reset_Handler+0x8c>)
  40148a:	60bb      	str	r3, [r7, #8]
  40148c:	e004      	b.n	401498 <Reset_Handler+0x40>
                *pDest++ = 0;
  40148e:	68bb      	ldr	r3, [r7, #8]
  401490:	1d1a      	adds	r2, r3, #4
  401492:	60ba      	str	r2, [r7, #8]
  401494:	2200      	movs	r2, #0
  401496:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401498:	68bb      	ldr	r3, [r7, #8]
  40149a:	4a13      	ldr	r2, [pc, #76]	; (4014e8 <Reset_Handler+0x90>)
  40149c:	4293      	cmp	r3, r2
  40149e:	d3f6      	bcc.n	40148e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4014a0:	4b12      	ldr	r3, [pc, #72]	; (4014ec <Reset_Handler+0x94>)
  4014a2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014a4:	4a12      	ldr	r2, [pc, #72]	; (4014f0 <Reset_Handler+0x98>)
  4014a6:	68fb      	ldr	r3, [r7, #12]
  4014a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014ac:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4014ae:	4b11      	ldr	r3, [pc, #68]	; (4014f4 <Reset_Handler+0x9c>)
  4014b0:	4798      	blx	r3
  4014b2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4014b4:	4a10      	ldr	r2, [pc, #64]	; (4014f8 <Reset_Handler+0xa0>)
  4014b6:	4b10      	ldr	r3, [pc, #64]	; (4014f8 <Reset_Handler+0xa0>)
  4014b8:	681b      	ldr	r3, [r3, #0]
  4014ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4014be:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4014c0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4014c4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4014c8:	6878      	ldr	r0, [r7, #4]
  4014ca:	4b0c      	ldr	r3, [pc, #48]	; (4014fc <Reset_Handler+0xa4>)
  4014cc:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4014ce:	4b0c      	ldr	r3, [pc, #48]	; (401500 <Reset_Handler+0xa8>)
  4014d0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4014d2:	4b0c      	ldr	r3, [pc, #48]	; (401504 <Reset_Handler+0xac>)
  4014d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4014d6:	e7fe      	b.n	4014d6 <Reset_Handler+0x7e>
  4014d8:	00406e88 	.word	0x00406e88
  4014dc:	20400000 	.word	0x20400000
  4014e0:	2040088c 	.word	0x2040088c
  4014e4:	2040088c 	.word	0x2040088c
  4014e8:	20400a30 	.word	0x20400a30
  4014ec:	00400000 	.word	0x00400000
  4014f0:	e000ed00 	.word	0xe000ed00
  4014f4:	004013d1 	.word	0x004013d1
  4014f8:	e000ed88 	.word	0xe000ed88
  4014fc:	00401429 	.word	0x00401429
  401500:	0040237d 	.word	0x0040237d
  401504:	00401e81 	.word	0x00401e81

00401508 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401508:	b480      	push	{r7}
  40150a:	af00      	add	r7, sp, #0
        while (1) {
        }
  40150c:	e7fe      	b.n	40150c <Dummy_Handler+0x4>
  40150e:	bf00      	nop

00401510 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401510:	b480      	push	{r7}
  401512:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401514:	4b52      	ldr	r3, [pc, #328]	; (401660 <SystemCoreClockUpdate+0x150>)
  401516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401518:	f003 0303 	and.w	r3, r3, #3
  40151c:	2b01      	cmp	r3, #1
  40151e:	d014      	beq.n	40154a <SystemCoreClockUpdate+0x3a>
  401520:	2b01      	cmp	r3, #1
  401522:	d302      	bcc.n	40152a <SystemCoreClockUpdate+0x1a>
  401524:	2b02      	cmp	r3, #2
  401526:	d038      	beq.n	40159a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401528:	e07a      	b.n	401620 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40152a:	4b4e      	ldr	r3, [pc, #312]	; (401664 <SystemCoreClockUpdate+0x154>)
  40152c:	695b      	ldr	r3, [r3, #20]
  40152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401532:	2b00      	cmp	r3, #0
  401534:	d004      	beq.n	401540 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401536:	4b4c      	ldr	r3, [pc, #304]	; (401668 <SystemCoreClockUpdate+0x158>)
  401538:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40153c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40153e:	e06f      	b.n	401620 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401540:	4b49      	ldr	r3, [pc, #292]	; (401668 <SystemCoreClockUpdate+0x158>)
  401542:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401546:	601a      	str	r2, [r3, #0]
      }
    break;
  401548:	e06a      	b.n	401620 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40154a:	4b45      	ldr	r3, [pc, #276]	; (401660 <SystemCoreClockUpdate+0x150>)
  40154c:	6a1b      	ldr	r3, [r3, #32]
  40154e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401552:	2b00      	cmp	r3, #0
  401554:	d003      	beq.n	40155e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401556:	4b44      	ldr	r3, [pc, #272]	; (401668 <SystemCoreClockUpdate+0x158>)
  401558:	4a44      	ldr	r2, [pc, #272]	; (40166c <SystemCoreClockUpdate+0x15c>)
  40155a:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  40155c:	e060      	b.n	401620 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40155e:	4b42      	ldr	r3, [pc, #264]	; (401668 <SystemCoreClockUpdate+0x158>)
  401560:	4a43      	ldr	r2, [pc, #268]	; (401670 <SystemCoreClockUpdate+0x160>)
  401562:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401564:	4b3e      	ldr	r3, [pc, #248]	; (401660 <SystemCoreClockUpdate+0x150>)
  401566:	6a1b      	ldr	r3, [r3, #32]
  401568:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40156c:	2b10      	cmp	r3, #16
  40156e:	d004      	beq.n	40157a <SystemCoreClockUpdate+0x6a>
  401570:	2b20      	cmp	r3, #32
  401572:	d008      	beq.n	401586 <SystemCoreClockUpdate+0x76>
  401574:	2b00      	cmp	r3, #0
  401576:	d00e      	beq.n	401596 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401578:	e00e      	b.n	401598 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40157a:	4b3b      	ldr	r3, [pc, #236]	; (401668 <SystemCoreClockUpdate+0x158>)
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	005b      	lsls	r3, r3, #1
  401580:	4a39      	ldr	r2, [pc, #228]	; (401668 <SystemCoreClockUpdate+0x158>)
  401582:	6013      	str	r3, [r2, #0]
          break;
  401584:	e008      	b.n	401598 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401586:	4b38      	ldr	r3, [pc, #224]	; (401668 <SystemCoreClockUpdate+0x158>)
  401588:	681a      	ldr	r2, [r3, #0]
  40158a:	4613      	mov	r3, r2
  40158c:	005b      	lsls	r3, r3, #1
  40158e:	4413      	add	r3, r2
  401590:	4a35      	ldr	r2, [pc, #212]	; (401668 <SystemCoreClockUpdate+0x158>)
  401592:	6013      	str	r3, [r2, #0]
          break;
  401594:	e000      	b.n	401598 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401596:	bf00      	nop

          default:
          break;
        }
      }
    break;
  401598:	e042      	b.n	401620 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40159a:	4b31      	ldr	r3, [pc, #196]	; (401660 <SystemCoreClockUpdate+0x150>)
  40159c:	6a1b      	ldr	r3, [r3, #32]
  40159e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4015a2:	2b00      	cmp	r3, #0
  4015a4:	d003      	beq.n	4015ae <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015a6:	4b30      	ldr	r3, [pc, #192]	; (401668 <SystemCoreClockUpdate+0x158>)
  4015a8:	4a30      	ldr	r2, [pc, #192]	; (40166c <SystemCoreClockUpdate+0x15c>)
  4015aa:	601a      	str	r2, [r3, #0]
  4015ac:	e01c      	b.n	4015e8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015ae:	4b2e      	ldr	r3, [pc, #184]	; (401668 <SystemCoreClockUpdate+0x158>)
  4015b0:	4a2f      	ldr	r2, [pc, #188]	; (401670 <SystemCoreClockUpdate+0x160>)
  4015b2:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015b4:	4b2a      	ldr	r3, [pc, #168]	; (401660 <SystemCoreClockUpdate+0x150>)
  4015b6:	6a1b      	ldr	r3, [r3, #32]
  4015b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015bc:	2b10      	cmp	r3, #16
  4015be:	d004      	beq.n	4015ca <SystemCoreClockUpdate+0xba>
  4015c0:	2b20      	cmp	r3, #32
  4015c2:	d008      	beq.n	4015d6 <SystemCoreClockUpdate+0xc6>
  4015c4:	2b00      	cmp	r3, #0
  4015c6:	d00e      	beq.n	4015e6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4015c8:	e00e      	b.n	4015e8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4015ca:	4b27      	ldr	r3, [pc, #156]	; (401668 <SystemCoreClockUpdate+0x158>)
  4015cc:	681b      	ldr	r3, [r3, #0]
  4015ce:	005b      	lsls	r3, r3, #1
  4015d0:	4a25      	ldr	r2, [pc, #148]	; (401668 <SystemCoreClockUpdate+0x158>)
  4015d2:	6013      	str	r3, [r2, #0]
          break;
  4015d4:	e008      	b.n	4015e8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4015d6:	4b24      	ldr	r3, [pc, #144]	; (401668 <SystemCoreClockUpdate+0x158>)
  4015d8:	681a      	ldr	r2, [r3, #0]
  4015da:	4613      	mov	r3, r2
  4015dc:	005b      	lsls	r3, r3, #1
  4015de:	4413      	add	r3, r2
  4015e0:	4a21      	ldr	r2, [pc, #132]	; (401668 <SystemCoreClockUpdate+0x158>)
  4015e2:	6013      	str	r3, [r2, #0]
          break;
  4015e4:	e000      	b.n	4015e8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4015e6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4015e8:	4b1d      	ldr	r3, [pc, #116]	; (401660 <SystemCoreClockUpdate+0x150>)
  4015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015ec:	f003 0303 	and.w	r3, r3, #3
  4015f0:	2b02      	cmp	r3, #2
  4015f2:	d114      	bne.n	40161e <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015f4:	4b1a      	ldr	r3, [pc, #104]	; (401660 <SystemCoreClockUpdate+0x150>)
  4015f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4015f8:	4b1e      	ldr	r3, [pc, #120]	; (401674 <SystemCoreClockUpdate+0x164>)
  4015fa:	4013      	ands	r3, r2
  4015fc:	0c1b      	lsrs	r3, r3, #16
  4015fe:	3301      	adds	r3, #1
  401600:	4a19      	ldr	r2, [pc, #100]	; (401668 <SystemCoreClockUpdate+0x158>)
  401602:	6812      	ldr	r2, [r2, #0]
  401604:	fb02 f303 	mul.w	r3, r2, r3
  401608:	4a17      	ldr	r2, [pc, #92]	; (401668 <SystemCoreClockUpdate+0x158>)
  40160a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40160c:	4b14      	ldr	r3, [pc, #80]	; (401660 <SystemCoreClockUpdate+0x150>)
  40160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401610:	b2db      	uxtb	r3, r3
  401612:	4a15      	ldr	r2, [pc, #84]	; (401668 <SystemCoreClockUpdate+0x158>)
  401614:	6812      	ldr	r2, [r2, #0]
  401616:	fbb2 f3f3 	udiv	r3, r2, r3
  40161a:	4a13      	ldr	r2, [pc, #76]	; (401668 <SystemCoreClockUpdate+0x158>)
  40161c:	6013      	str	r3, [r2, #0]
      }
    break;
  40161e:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401620:	4b0f      	ldr	r3, [pc, #60]	; (401660 <SystemCoreClockUpdate+0x150>)
  401622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401624:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401628:	2b70      	cmp	r3, #112	; 0x70
  40162a:	d108      	bne.n	40163e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  40162c:	4b0e      	ldr	r3, [pc, #56]	; (401668 <SystemCoreClockUpdate+0x158>)
  40162e:	681b      	ldr	r3, [r3, #0]
  401630:	4a11      	ldr	r2, [pc, #68]	; (401678 <SystemCoreClockUpdate+0x168>)
  401632:	fba2 2303 	umull	r2, r3, r2, r3
  401636:	085b      	lsrs	r3, r3, #1
  401638:	4a0b      	ldr	r2, [pc, #44]	; (401668 <SystemCoreClockUpdate+0x158>)
  40163a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  40163c:	e00a      	b.n	401654 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40163e:	4b08      	ldr	r3, [pc, #32]	; (401660 <SystemCoreClockUpdate+0x150>)
  401640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401642:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401646:	091b      	lsrs	r3, r3, #4
  401648:	4a07      	ldr	r2, [pc, #28]	; (401668 <SystemCoreClockUpdate+0x158>)
  40164a:	6812      	ldr	r2, [r2, #0]
  40164c:	fa22 f303 	lsr.w	r3, r2, r3
  401650:	4a05      	ldr	r2, [pc, #20]	; (401668 <SystemCoreClockUpdate+0x158>)
  401652:	6013      	str	r3, [r2, #0]
  }
}
  401654:	bf00      	nop
  401656:	46bd      	mov	sp, r7
  401658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40165c:	4770      	bx	lr
  40165e:	bf00      	nop
  401660:	400e0600 	.word	0x400e0600
  401664:	400e1810 	.word	0x400e1810
  401668:	20400010 	.word	0x20400010
  40166c:	00b71b00 	.word	0x00b71b00
  401670:	003d0900 	.word	0x003d0900
  401674:	07ff0000 	.word	0x07ff0000
  401678:	aaaaaaab 	.word	0xaaaaaaab

0040167c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  40167c:	b480      	push	{r7}
  40167e:	b083      	sub	sp, #12
  401680:	af00      	add	r7, sp, #0
  401682:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401684:	687b      	ldr	r3, [r7, #4]
  401686:	4a19      	ldr	r2, [pc, #100]	; (4016ec <system_init_flash+0x70>)
  401688:	4293      	cmp	r3, r2
  40168a:	d804      	bhi.n	401696 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40168c:	4b18      	ldr	r3, [pc, #96]	; (4016f0 <system_init_flash+0x74>)
  40168e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401692:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401694:	e023      	b.n	4016de <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401696:	687b      	ldr	r3, [r7, #4]
  401698:	4a16      	ldr	r2, [pc, #88]	; (4016f4 <system_init_flash+0x78>)
  40169a:	4293      	cmp	r3, r2
  40169c:	d803      	bhi.n	4016a6 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40169e:	4b14      	ldr	r3, [pc, #80]	; (4016f0 <system_init_flash+0x74>)
  4016a0:	4a15      	ldr	r2, [pc, #84]	; (4016f8 <system_init_flash+0x7c>)
  4016a2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016a4:	e01b      	b.n	4016de <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	4a14      	ldr	r2, [pc, #80]	; (4016fc <system_init_flash+0x80>)
  4016aa:	4293      	cmp	r3, r2
  4016ac:	d803      	bhi.n	4016b6 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016ae:	4b10      	ldr	r3, [pc, #64]	; (4016f0 <system_init_flash+0x74>)
  4016b0:	4a13      	ldr	r2, [pc, #76]	; (401700 <system_init_flash+0x84>)
  4016b2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016b4:	e013      	b.n	4016de <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4016b6:	687b      	ldr	r3, [r7, #4]
  4016b8:	4a12      	ldr	r2, [pc, #72]	; (401704 <system_init_flash+0x88>)
  4016ba:	4293      	cmp	r3, r2
  4016bc:	d803      	bhi.n	4016c6 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016be:	4b0c      	ldr	r3, [pc, #48]	; (4016f0 <system_init_flash+0x74>)
  4016c0:	4a11      	ldr	r2, [pc, #68]	; (401708 <system_init_flash+0x8c>)
  4016c2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016c4:	e00b      	b.n	4016de <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4016c6:	687b      	ldr	r3, [r7, #4]
  4016c8:	4a10      	ldr	r2, [pc, #64]	; (40170c <system_init_flash+0x90>)
  4016ca:	4293      	cmp	r3, r2
  4016cc:	d804      	bhi.n	4016d8 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016ce:	4b08      	ldr	r3, [pc, #32]	; (4016f0 <system_init_flash+0x74>)
  4016d0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4016d4:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016d6:	e002      	b.n	4016de <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4016d8:	4b05      	ldr	r3, [pc, #20]	; (4016f0 <system_init_flash+0x74>)
  4016da:	4a0d      	ldr	r2, [pc, #52]	; (401710 <system_init_flash+0x94>)
  4016dc:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016de:	bf00      	nop
  4016e0:	370c      	adds	r7, #12
  4016e2:	46bd      	mov	sp, r7
  4016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016e8:	4770      	bx	lr
  4016ea:	bf00      	nop
  4016ec:	01312cff 	.word	0x01312cff
  4016f0:	400e0c00 	.word	0x400e0c00
  4016f4:	026259ff 	.word	0x026259ff
  4016f8:	04000100 	.word	0x04000100
  4016fc:	039386ff 	.word	0x039386ff
  401700:	04000200 	.word	0x04000200
  401704:	04c4b3ff 	.word	0x04c4b3ff
  401708:	04000300 	.word	0x04000300
  40170c:	05f5e0ff 	.word	0x05f5e0ff
  401710:	04000500 	.word	0x04000500

00401714 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401714:	b480      	push	{r7}
  401716:	b085      	sub	sp, #20
  401718:	af00      	add	r7, sp, #0
  40171a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40171c:	4b10      	ldr	r3, [pc, #64]	; (401760 <_sbrk+0x4c>)
  40171e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401720:	4b10      	ldr	r3, [pc, #64]	; (401764 <_sbrk+0x50>)
  401722:	681b      	ldr	r3, [r3, #0]
  401724:	2b00      	cmp	r3, #0
  401726:	d102      	bne.n	40172e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401728:	4b0e      	ldr	r3, [pc, #56]	; (401764 <_sbrk+0x50>)
  40172a:	4a0f      	ldr	r2, [pc, #60]	; (401768 <_sbrk+0x54>)
  40172c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40172e:	4b0d      	ldr	r3, [pc, #52]	; (401764 <_sbrk+0x50>)
  401730:	681b      	ldr	r3, [r3, #0]
  401732:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401734:	68ba      	ldr	r2, [r7, #8]
  401736:	687b      	ldr	r3, [r7, #4]
  401738:	441a      	add	r2, r3
  40173a:	68fb      	ldr	r3, [r7, #12]
  40173c:	429a      	cmp	r2, r3
  40173e:	dd02      	ble.n	401746 <_sbrk+0x32>
		return (caddr_t) -1;	
  401740:	f04f 33ff 	mov.w	r3, #4294967295
  401744:	e006      	b.n	401754 <_sbrk+0x40>
	}

	heap += incr;
  401746:	4b07      	ldr	r3, [pc, #28]	; (401764 <_sbrk+0x50>)
  401748:	681a      	ldr	r2, [r3, #0]
  40174a:	687b      	ldr	r3, [r7, #4]
  40174c:	4413      	add	r3, r2
  40174e:	4a05      	ldr	r2, [pc, #20]	; (401764 <_sbrk+0x50>)
  401750:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401752:	68bb      	ldr	r3, [r7, #8]
}
  401754:	4618      	mov	r0, r3
  401756:	3714      	adds	r7, #20
  401758:	46bd      	mov	sp, r7
  40175a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40175e:	4770      	bx	lr
  401760:	2045fffc 	.word	0x2045fffc
  401764:	2040091c 	.word	0x2040091c
  401768:	20402c30 	.word	0x20402c30

0040176c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40176c:	b480      	push	{r7}
  40176e:	b083      	sub	sp, #12
  401770:	af00      	add	r7, sp, #0
  401772:	4603      	mov	r3, r0
  401774:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401776:	4909      	ldr	r1, [pc, #36]	; (40179c <NVIC_EnableIRQ+0x30>)
  401778:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40177c:	095b      	lsrs	r3, r3, #5
  40177e:	79fa      	ldrb	r2, [r7, #7]
  401780:	f002 021f 	and.w	r2, r2, #31
  401784:	2001      	movs	r0, #1
  401786:	fa00 f202 	lsl.w	r2, r0, r2
  40178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40178e:	bf00      	nop
  401790:	370c      	adds	r7, #12
  401792:	46bd      	mov	sp, r7
  401794:	f85d 7b04 	ldr.w	r7, [sp], #4
  401798:	4770      	bx	lr
  40179a:	bf00      	nop
  40179c:	e000e100 	.word	0xe000e100

004017a0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4017a0:	b480      	push	{r7}
  4017a2:	b083      	sub	sp, #12
  4017a4:	af00      	add	r7, sp, #0
  4017a6:	4603      	mov	r3, r0
  4017a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4017aa:	4909      	ldr	r1, [pc, #36]	; (4017d0 <NVIC_DisableIRQ+0x30>)
  4017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017b0:	095b      	lsrs	r3, r3, #5
  4017b2:	79fa      	ldrb	r2, [r7, #7]
  4017b4:	f002 021f 	and.w	r2, r2, #31
  4017b8:	2001      	movs	r0, #1
  4017ba:	fa00 f202 	lsl.w	r2, r0, r2
  4017be:	3320      	adds	r3, #32
  4017c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4017c4:	bf00      	nop
  4017c6:	370c      	adds	r7, #12
  4017c8:	46bd      	mov	sp, r7
  4017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017ce:	4770      	bx	lr
  4017d0:	e000e100 	.word	0xe000e100

004017d4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4017d4:	b480      	push	{r7}
  4017d6:	b083      	sub	sp, #12
  4017d8:	af00      	add	r7, sp, #0
  4017da:	4603      	mov	r3, r0
  4017dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4017de:	4909      	ldr	r1, [pc, #36]	; (401804 <NVIC_ClearPendingIRQ+0x30>)
  4017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017e4:	095b      	lsrs	r3, r3, #5
  4017e6:	79fa      	ldrb	r2, [r7, #7]
  4017e8:	f002 021f 	and.w	r2, r2, #31
  4017ec:	2001      	movs	r0, #1
  4017ee:	fa00 f202 	lsl.w	r2, r0, r2
  4017f2:	3360      	adds	r3, #96	; 0x60
  4017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4017f8:	bf00      	nop
  4017fa:	370c      	adds	r7, #12
  4017fc:	46bd      	mov	sp, r7
  4017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401802:	4770      	bx	lr
  401804:	e000e100 	.word	0xe000e100

00401808 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401808:	b480      	push	{r7}
  40180a:	b083      	sub	sp, #12
  40180c:	af00      	add	r7, sp, #0
  40180e:	4603      	mov	r3, r0
  401810:	6039      	str	r1, [r7, #0]
  401812:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401814:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401818:	2b00      	cmp	r3, #0
  40181a:	da0b      	bge.n	401834 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40181c:	490d      	ldr	r1, [pc, #52]	; (401854 <NVIC_SetPriority+0x4c>)
  40181e:	79fb      	ldrb	r3, [r7, #7]
  401820:	f003 030f 	and.w	r3, r3, #15
  401824:	3b04      	subs	r3, #4
  401826:	683a      	ldr	r2, [r7, #0]
  401828:	b2d2      	uxtb	r2, r2
  40182a:	0152      	lsls	r2, r2, #5
  40182c:	b2d2      	uxtb	r2, r2
  40182e:	440b      	add	r3, r1
  401830:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401832:	e009      	b.n	401848 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401834:	4908      	ldr	r1, [pc, #32]	; (401858 <NVIC_SetPriority+0x50>)
  401836:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40183a:	683a      	ldr	r2, [r7, #0]
  40183c:	b2d2      	uxtb	r2, r2
  40183e:	0152      	lsls	r2, r2, #5
  401840:	b2d2      	uxtb	r2, r2
  401842:	440b      	add	r3, r1
  401844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401848:	bf00      	nop
  40184a:	370c      	adds	r7, #12
  40184c:	46bd      	mov	sp, r7
  40184e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401852:	4770      	bx	lr
  401854:	e000ed00 	.word	0xe000ed00
  401858:	e000e100 	.word	0xe000e100

0040185c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40185c:	b480      	push	{r7}
  40185e:	b083      	sub	sp, #12
  401860:	af00      	add	r7, sp, #0
  401862:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401864:	687b      	ldr	r3, [r7, #4]
  401866:	2b07      	cmp	r3, #7
  401868:	d825      	bhi.n	4018b6 <osc_get_rate+0x5a>
  40186a:	a201      	add	r2, pc, #4	; (adr r2, 401870 <osc_get_rate+0x14>)
  40186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401870:	00401891 	.word	0x00401891
  401874:	00401897 	.word	0x00401897
  401878:	0040189d 	.word	0x0040189d
  40187c:	004018a3 	.word	0x004018a3
  401880:	004018a7 	.word	0x004018a7
  401884:	004018ab 	.word	0x004018ab
  401888:	004018af 	.word	0x004018af
  40188c:	004018b3 	.word	0x004018b3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401890:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401894:	e010      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40189a:	e00d      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40189c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018a0:	e00a      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4018a2:	4b08      	ldr	r3, [pc, #32]	; (4018c4 <osc_get_rate+0x68>)
  4018a4:	e008      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4018a6:	4b08      	ldr	r3, [pc, #32]	; (4018c8 <osc_get_rate+0x6c>)
  4018a8:	e006      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4018aa:	4b08      	ldr	r3, [pc, #32]	; (4018cc <osc_get_rate+0x70>)
  4018ac:	e004      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4018ae:	4b07      	ldr	r3, [pc, #28]	; (4018cc <osc_get_rate+0x70>)
  4018b0:	e002      	b.n	4018b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4018b2:	4b06      	ldr	r3, [pc, #24]	; (4018cc <osc_get_rate+0x70>)
  4018b4:	e000      	b.n	4018b8 <osc_get_rate+0x5c>
	}

	return 0;
  4018b6:	2300      	movs	r3, #0
}
  4018b8:	4618      	mov	r0, r3
  4018ba:	370c      	adds	r7, #12
  4018bc:	46bd      	mov	sp, r7
  4018be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018c2:	4770      	bx	lr
  4018c4:	003d0900 	.word	0x003d0900
  4018c8:	007a1200 	.word	0x007a1200
  4018cc:	00b71b00 	.word	0x00b71b00

004018d0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4018d0:	b580      	push	{r7, lr}
  4018d2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4018d4:	2006      	movs	r0, #6
  4018d6:	4b05      	ldr	r3, [pc, #20]	; (4018ec <sysclk_get_main_hz+0x1c>)
  4018d8:	4798      	blx	r3
  4018da:	4602      	mov	r2, r0
  4018dc:	4613      	mov	r3, r2
  4018de:	009b      	lsls	r3, r3, #2
  4018e0:	4413      	add	r3, r2
  4018e2:	009a      	lsls	r2, r3, #2
  4018e4:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4018e6:	4618      	mov	r0, r3
  4018e8:	bd80      	pop	{r7, pc}
  4018ea:	bf00      	nop
  4018ec:	0040185d 	.word	0x0040185d

004018f0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4018f0:	b580      	push	{r7, lr}
  4018f2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4018f4:	4b02      	ldr	r3, [pc, #8]	; (401900 <sysclk_get_cpu_hz+0x10>)
  4018f6:	4798      	blx	r3
  4018f8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4018fa:	4618      	mov	r0, r3
  4018fc:	bd80      	pop	{r7, pc}
  4018fe:	bf00      	nop
  401900:	004018d1 	.word	0x004018d1

00401904 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401904:	b580      	push	{r7, lr}
  401906:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401908:	4b02      	ldr	r3, [pc, #8]	; (401914 <sysclk_get_peripheral_hz+0x10>)
  40190a:	4798      	blx	r3
  40190c:	4603      	mov	r3, r0
  40190e:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401910:	4618      	mov	r0, r3
  401912:	bd80      	pop	{r7, pc}
  401914:	004018d1 	.word	0x004018d1

00401918 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401918:	b580      	push	{r7, lr}
  40191a:	b082      	sub	sp, #8
  40191c:	af00      	add	r7, sp, #0
  40191e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401920:	6878      	ldr	r0, [r7, #4]
  401922:	4b03      	ldr	r3, [pc, #12]	; (401930 <sysclk_enable_peripheral_clock+0x18>)
  401924:	4798      	blx	r3
}
  401926:	bf00      	nop
  401928:	3708      	adds	r7, #8
  40192a:	46bd      	mov	sp, r7
  40192c:	bd80      	pop	{r7, pc}
  40192e:	bf00      	nop
  401930:	00400b55 	.word	0x00400b55

00401934 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401934:	b580      	push	{r7, lr}
  401936:	b082      	sub	sp, #8
  401938:	af00      	add	r7, sp, #0
  40193a:	6078      	str	r0, [r7, #4]
  40193c:	460b      	mov	r3, r1
  40193e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401940:	687b      	ldr	r3, [r7, #4]
  401942:	4a36      	ldr	r2, [pc, #216]	; (401a1c <usart_serial_putchar+0xe8>)
  401944:	4293      	cmp	r3, r2
  401946:	d10a      	bne.n	40195e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401948:	bf00      	nop
  40194a:	78fb      	ldrb	r3, [r7, #3]
  40194c:	4619      	mov	r1, r3
  40194e:	6878      	ldr	r0, [r7, #4]
  401950:	4b33      	ldr	r3, [pc, #204]	; (401a20 <usart_serial_putchar+0xec>)
  401952:	4798      	blx	r3
  401954:	4603      	mov	r3, r0
  401956:	2b00      	cmp	r3, #0
  401958:	d1f7      	bne.n	40194a <usart_serial_putchar+0x16>
		return 1;
  40195a:	2301      	movs	r3, #1
  40195c:	e05a      	b.n	401a14 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40195e:	687b      	ldr	r3, [r7, #4]
  401960:	4a30      	ldr	r2, [pc, #192]	; (401a24 <usart_serial_putchar+0xf0>)
  401962:	4293      	cmp	r3, r2
  401964:	d10a      	bne.n	40197c <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401966:	bf00      	nop
  401968:	78fb      	ldrb	r3, [r7, #3]
  40196a:	4619      	mov	r1, r3
  40196c:	6878      	ldr	r0, [r7, #4]
  40196e:	4b2c      	ldr	r3, [pc, #176]	; (401a20 <usart_serial_putchar+0xec>)
  401970:	4798      	blx	r3
  401972:	4603      	mov	r3, r0
  401974:	2b00      	cmp	r3, #0
  401976:	d1f7      	bne.n	401968 <usart_serial_putchar+0x34>
		return 1;
  401978:	2301      	movs	r3, #1
  40197a:	e04b      	b.n	401a14 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40197c:	687b      	ldr	r3, [r7, #4]
  40197e:	4a2a      	ldr	r2, [pc, #168]	; (401a28 <usart_serial_putchar+0xf4>)
  401980:	4293      	cmp	r3, r2
  401982:	d10a      	bne.n	40199a <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401984:	bf00      	nop
  401986:	78fb      	ldrb	r3, [r7, #3]
  401988:	4619      	mov	r1, r3
  40198a:	6878      	ldr	r0, [r7, #4]
  40198c:	4b24      	ldr	r3, [pc, #144]	; (401a20 <usart_serial_putchar+0xec>)
  40198e:	4798      	blx	r3
  401990:	4603      	mov	r3, r0
  401992:	2b00      	cmp	r3, #0
  401994:	d1f7      	bne.n	401986 <usart_serial_putchar+0x52>
		return 1;
  401996:	2301      	movs	r3, #1
  401998:	e03c      	b.n	401a14 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40199a:	687b      	ldr	r3, [r7, #4]
  40199c:	4a23      	ldr	r2, [pc, #140]	; (401a2c <usart_serial_putchar+0xf8>)
  40199e:	4293      	cmp	r3, r2
  4019a0:	d10a      	bne.n	4019b8 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4019a2:	bf00      	nop
  4019a4:	78fb      	ldrb	r3, [r7, #3]
  4019a6:	4619      	mov	r1, r3
  4019a8:	6878      	ldr	r0, [r7, #4]
  4019aa:	4b1d      	ldr	r3, [pc, #116]	; (401a20 <usart_serial_putchar+0xec>)
  4019ac:	4798      	blx	r3
  4019ae:	4603      	mov	r3, r0
  4019b0:	2b00      	cmp	r3, #0
  4019b2:	d1f7      	bne.n	4019a4 <usart_serial_putchar+0x70>
		return 1;
  4019b4:	2301      	movs	r3, #1
  4019b6:	e02d      	b.n	401a14 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4019b8:	687b      	ldr	r3, [r7, #4]
  4019ba:	4a1d      	ldr	r2, [pc, #116]	; (401a30 <usart_serial_putchar+0xfc>)
  4019bc:	4293      	cmp	r3, r2
  4019be:	d10a      	bne.n	4019d6 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4019c0:	bf00      	nop
  4019c2:	78fb      	ldrb	r3, [r7, #3]
  4019c4:	4619      	mov	r1, r3
  4019c6:	6878      	ldr	r0, [r7, #4]
  4019c8:	4b1a      	ldr	r3, [pc, #104]	; (401a34 <usart_serial_putchar+0x100>)
  4019ca:	4798      	blx	r3
  4019cc:	4603      	mov	r3, r0
  4019ce:	2b00      	cmp	r3, #0
  4019d0:	d1f7      	bne.n	4019c2 <usart_serial_putchar+0x8e>
		return 1;
  4019d2:	2301      	movs	r3, #1
  4019d4:	e01e      	b.n	401a14 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4019d6:	687b      	ldr	r3, [r7, #4]
  4019d8:	4a17      	ldr	r2, [pc, #92]	; (401a38 <usart_serial_putchar+0x104>)
  4019da:	4293      	cmp	r3, r2
  4019dc:	d10a      	bne.n	4019f4 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4019de:	bf00      	nop
  4019e0:	78fb      	ldrb	r3, [r7, #3]
  4019e2:	4619      	mov	r1, r3
  4019e4:	6878      	ldr	r0, [r7, #4]
  4019e6:	4b13      	ldr	r3, [pc, #76]	; (401a34 <usart_serial_putchar+0x100>)
  4019e8:	4798      	blx	r3
  4019ea:	4603      	mov	r3, r0
  4019ec:	2b00      	cmp	r3, #0
  4019ee:	d1f7      	bne.n	4019e0 <usart_serial_putchar+0xac>
		return 1;
  4019f0:	2301      	movs	r3, #1
  4019f2:	e00f      	b.n	401a14 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4019f4:	687b      	ldr	r3, [r7, #4]
  4019f6:	4a11      	ldr	r2, [pc, #68]	; (401a3c <usart_serial_putchar+0x108>)
  4019f8:	4293      	cmp	r3, r2
  4019fa:	d10a      	bne.n	401a12 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4019fc:	bf00      	nop
  4019fe:	78fb      	ldrb	r3, [r7, #3]
  401a00:	4619      	mov	r1, r3
  401a02:	6878      	ldr	r0, [r7, #4]
  401a04:	4b0b      	ldr	r3, [pc, #44]	; (401a34 <usart_serial_putchar+0x100>)
  401a06:	4798      	blx	r3
  401a08:	4603      	mov	r3, r0
  401a0a:	2b00      	cmp	r3, #0
  401a0c:	d1f7      	bne.n	4019fe <usart_serial_putchar+0xca>
		return 1;
  401a0e:	2301      	movs	r3, #1
  401a10:	e000      	b.n	401a14 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401a12:	2300      	movs	r3, #0
}
  401a14:	4618      	mov	r0, r3
  401a16:	3708      	adds	r7, #8
  401a18:	46bd      	mov	sp, r7
  401a1a:	bd80      	pop	{r7, pc}
  401a1c:	400e0800 	.word	0x400e0800
  401a20:	004010d9 	.word	0x004010d9
  401a24:	400e0a00 	.word	0x400e0a00
  401a28:	400e1a00 	.word	0x400e1a00
  401a2c:	400e1c00 	.word	0x400e1c00
  401a30:	40024000 	.word	0x40024000
  401a34:	00401349 	.word	0x00401349
  401a38:	40028000 	.word	0x40028000
  401a3c:	4002c000 	.word	0x4002c000

00401a40 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401a40:	b580      	push	{r7, lr}
  401a42:	b084      	sub	sp, #16
  401a44:	af00      	add	r7, sp, #0
  401a46:	6078      	str	r0, [r7, #4]
  401a48:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401a4a:	2300      	movs	r3, #0
  401a4c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	4a34      	ldr	r2, [pc, #208]	; (401b24 <usart_serial_getchar+0xe4>)
  401a52:	4293      	cmp	r3, r2
  401a54:	d107      	bne.n	401a66 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401a56:	bf00      	nop
  401a58:	6839      	ldr	r1, [r7, #0]
  401a5a:	6878      	ldr	r0, [r7, #4]
  401a5c:	4b32      	ldr	r3, [pc, #200]	; (401b28 <usart_serial_getchar+0xe8>)
  401a5e:	4798      	blx	r3
  401a60:	4603      	mov	r3, r0
  401a62:	2b00      	cmp	r3, #0
  401a64:	d1f8      	bne.n	401a58 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401a66:	687b      	ldr	r3, [r7, #4]
  401a68:	4a30      	ldr	r2, [pc, #192]	; (401b2c <usart_serial_getchar+0xec>)
  401a6a:	4293      	cmp	r3, r2
  401a6c:	d107      	bne.n	401a7e <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401a6e:	bf00      	nop
  401a70:	6839      	ldr	r1, [r7, #0]
  401a72:	6878      	ldr	r0, [r7, #4]
  401a74:	4b2c      	ldr	r3, [pc, #176]	; (401b28 <usart_serial_getchar+0xe8>)
  401a76:	4798      	blx	r3
  401a78:	4603      	mov	r3, r0
  401a7a:	2b00      	cmp	r3, #0
  401a7c:	d1f8      	bne.n	401a70 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401a7e:	687b      	ldr	r3, [r7, #4]
  401a80:	4a2b      	ldr	r2, [pc, #172]	; (401b30 <usart_serial_getchar+0xf0>)
  401a82:	4293      	cmp	r3, r2
  401a84:	d107      	bne.n	401a96 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401a86:	bf00      	nop
  401a88:	6839      	ldr	r1, [r7, #0]
  401a8a:	6878      	ldr	r0, [r7, #4]
  401a8c:	4b26      	ldr	r3, [pc, #152]	; (401b28 <usart_serial_getchar+0xe8>)
  401a8e:	4798      	blx	r3
  401a90:	4603      	mov	r3, r0
  401a92:	2b00      	cmp	r3, #0
  401a94:	d1f8      	bne.n	401a88 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401a96:	687b      	ldr	r3, [r7, #4]
  401a98:	4a26      	ldr	r2, [pc, #152]	; (401b34 <usart_serial_getchar+0xf4>)
  401a9a:	4293      	cmp	r3, r2
  401a9c:	d107      	bne.n	401aae <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401a9e:	bf00      	nop
  401aa0:	6839      	ldr	r1, [r7, #0]
  401aa2:	6878      	ldr	r0, [r7, #4]
  401aa4:	4b20      	ldr	r3, [pc, #128]	; (401b28 <usart_serial_getchar+0xe8>)
  401aa6:	4798      	blx	r3
  401aa8:	4603      	mov	r3, r0
  401aaa:	2b00      	cmp	r3, #0
  401aac:	d1f8      	bne.n	401aa0 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401aae:	687b      	ldr	r3, [r7, #4]
  401ab0:	4a21      	ldr	r2, [pc, #132]	; (401b38 <usart_serial_getchar+0xf8>)
  401ab2:	4293      	cmp	r3, r2
  401ab4:	d10d      	bne.n	401ad2 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401ab6:	bf00      	nop
  401ab8:	f107 030c 	add.w	r3, r7, #12
  401abc:	4619      	mov	r1, r3
  401abe:	6878      	ldr	r0, [r7, #4]
  401ac0:	4b1e      	ldr	r3, [pc, #120]	; (401b3c <usart_serial_getchar+0xfc>)
  401ac2:	4798      	blx	r3
  401ac4:	4603      	mov	r3, r0
  401ac6:	2b00      	cmp	r3, #0
  401ac8:	d1f6      	bne.n	401ab8 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401aca:	68fb      	ldr	r3, [r7, #12]
  401acc:	b2da      	uxtb	r2, r3
  401ace:	683b      	ldr	r3, [r7, #0]
  401ad0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401ad2:	687b      	ldr	r3, [r7, #4]
  401ad4:	4a1a      	ldr	r2, [pc, #104]	; (401b40 <usart_serial_getchar+0x100>)
  401ad6:	4293      	cmp	r3, r2
  401ad8:	d10d      	bne.n	401af6 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401ada:	bf00      	nop
  401adc:	f107 030c 	add.w	r3, r7, #12
  401ae0:	4619      	mov	r1, r3
  401ae2:	6878      	ldr	r0, [r7, #4]
  401ae4:	4b15      	ldr	r3, [pc, #84]	; (401b3c <usart_serial_getchar+0xfc>)
  401ae6:	4798      	blx	r3
  401ae8:	4603      	mov	r3, r0
  401aea:	2b00      	cmp	r3, #0
  401aec:	d1f6      	bne.n	401adc <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401aee:	68fb      	ldr	r3, [r7, #12]
  401af0:	b2da      	uxtb	r2, r3
  401af2:	683b      	ldr	r3, [r7, #0]
  401af4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401af6:	687b      	ldr	r3, [r7, #4]
  401af8:	4a12      	ldr	r2, [pc, #72]	; (401b44 <usart_serial_getchar+0x104>)
  401afa:	4293      	cmp	r3, r2
  401afc:	d10d      	bne.n	401b1a <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401afe:	bf00      	nop
  401b00:	f107 030c 	add.w	r3, r7, #12
  401b04:	4619      	mov	r1, r3
  401b06:	6878      	ldr	r0, [r7, #4]
  401b08:	4b0c      	ldr	r3, [pc, #48]	; (401b3c <usart_serial_getchar+0xfc>)
  401b0a:	4798      	blx	r3
  401b0c:	4603      	mov	r3, r0
  401b0e:	2b00      	cmp	r3, #0
  401b10:	d1f6      	bne.n	401b00 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401b12:	68fb      	ldr	r3, [r7, #12]
  401b14:	b2da      	uxtb	r2, r3
  401b16:	683b      	ldr	r3, [r7, #0]
  401b18:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401b1a:	bf00      	nop
  401b1c:	3710      	adds	r7, #16
  401b1e:	46bd      	mov	sp, r7
  401b20:	bd80      	pop	{r7, pc}
  401b22:	bf00      	nop
  401b24:	400e0800 	.word	0x400e0800
  401b28:	00401109 	.word	0x00401109
  401b2c:	400e0a00 	.word	0x400e0a00
  401b30:	400e1a00 	.word	0x400e1a00
  401b34:	400e1c00 	.word	0x400e1c00
  401b38:	40024000 	.word	0x40024000
  401b3c:	0040137d 	.word	0x0040137d
  401b40:	40028000 	.word	0x40028000
  401b44:	4002c000 	.word	0x4002c000

00401b48 <TC1_Handler>:

/************************************************************************/
/* Handlers                                                             */
/************************************************************************/

void TC1_Handler(void){
  401b48:	b580      	push	{r7, lr}
  401b4a:	b082      	sub	sp, #8
  401b4c:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

    /****************************************************************
	* Devemos indicar ao TC que a interrupção foi satisfeita.
    ******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  401b4e:	2101      	movs	r1, #1
  401b50:	4809      	ldr	r0, [pc, #36]	; (401b78 <TC1_Handler+0x30>)
  401b52:	4b0a      	ldr	r3, [pc, #40]	; (401b7c <TC1_Handler+0x34>)
  401b54:	4798      	blx	r3
  401b56:	4603      	mov	r3, r0
  401b58:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  401b5a:	687b      	ldr	r3, [r7, #4]

	/** Muda o estado do LED */
    if(flag_led0)
  401b5c:	4b08      	ldr	r3, [pc, #32]	; (401b80 <TC1_Handler+0x38>)
  401b5e:	681b      	ldr	r3, [r3, #0]
  401b60:	2b00      	cmp	r3, #0
  401b62:	d004      	beq.n	401b6e <TC1_Handler+0x26>
        pin_toggle(LED_PIO, LED_PIN_MASK);
  401b64:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b68:	4806      	ldr	r0, [pc, #24]	; (401b84 <TC1_Handler+0x3c>)
  401b6a:	4b07      	ldr	r3, [pc, #28]	; (401b88 <TC1_Handler+0x40>)
  401b6c:	4798      	blx	r3
}
  401b6e:	bf00      	nop
  401b70:	3708      	adds	r7, #8
  401b72:	46bd      	mov	sp, r7
  401b74:	bd80      	pop	{r7, pc}
  401b76:	bf00      	nop
  401b78:	4000c000 	.word	0x4000c000
  401b7c:	00400fe5 	.word	0x00400fe5
  401b80:	20400920 	.word	0x20400920
  401b84:	400e1200 	.word	0x400e1200
  401b88:	00401bc1 	.word	0x00401bc1

00401b8c <led_init>:

/************************************************************************/
/* Funcoes                                                              */
/************************************************************************/

void led_init(int estado){
  401b8c:	b590      	push	{r4, r7, lr}
  401b8e:	b085      	sub	sp, #20
  401b90:	af02      	add	r7, sp, #8
  401b92:	6078      	str	r0, [r7, #4]
    pmc_enable_periph_clk(LED_PIO_ID);
  401b94:	200c      	movs	r0, #12
  401b96:	4b07      	ldr	r3, [pc, #28]	; (401bb4 <led_init+0x28>)
  401b98:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, 1, 0, 0 );
  401b9a:	2300      	movs	r3, #0
  401b9c:	9300      	str	r3, [sp, #0]
  401b9e:	2300      	movs	r3, #0
  401ba0:	2201      	movs	r2, #1
  401ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
  401ba6:	4804      	ldr	r0, [pc, #16]	; (401bb8 <led_init+0x2c>)
  401ba8:	4c04      	ldr	r4, [pc, #16]	; (401bbc <led_init+0x30>)
  401baa:	47a0      	blx	r4
};
  401bac:	bf00      	nop
  401bae:	370c      	adds	r7, #12
  401bb0:	46bd      	mov	sp, r7
  401bb2:	bd90      	pop	{r4, r7, pc}
  401bb4:	00400b55 	.word	0x00400b55
  401bb8:	400e1200 	.word	0x400e1200
  401bbc:	0040068d 	.word	0x0040068d

00401bc0 <pin_toggle>:

void pin_toggle(Pio *pio, uint32_t mask){
  401bc0:	b580      	push	{r7, lr}
  401bc2:	b082      	sub	sp, #8
  401bc4:	af00      	add	r7, sp, #0
  401bc6:	6078      	str	r0, [r7, #4]
  401bc8:	6039      	str	r1, [r7, #0]
   if(pio_get_output_data_status(pio, mask))
  401bca:	6839      	ldr	r1, [r7, #0]
  401bcc:	6878      	ldr	r0, [r7, #4]
  401bce:	4b09      	ldr	r3, [pc, #36]	; (401bf4 <pin_toggle+0x34>)
  401bd0:	4798      	blx	r3
  401bd2:	4603      	mov	r3, r0
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d004      	beq.n	401be2 <pin_toggle+0x22>
    pio_clear(pio, mask);
  401bd8:	6839      	ldr	r1, [r7, #0]
  401bda:	6878      	ldr	r0, [r7, #4]
  401bdc:	4b06      	ldr	r3, [pc, #24]	; (401bf8 <pin_toggle+0x38>)
  401bde:	4798      	blx	r3
   else
    pio_set(pio,mask);
}
  401be0:	e003      	b.n	401bea <pin_toggle+0x2a>

void pin_toggle(Pio *pio, uint32_t mask){
   if(pio_get_output_data_status(pio, mask))
    pio_clear(pio, mask);
   else
    pio_set(pio,mask);
  401be2:	6839      	ldr	r1, [r7, #0]
  401be4:	6878      	ldr	r0, [r7, #4]
  401be6:	4b05      	ldr	r3, [pc, #20]	; (401bfc <pin_toggle+0x3c>)
  401be8:	4798      	blx	r3
}
  401bea:	bf00      	nop
  401bec:	3708      	adds	r7, #8
  401bee:	46bd      	mov	sp, r7
  401bf0:	bd80      	pop	{r7, pc}
  401bf2:	bf00      	nop
  401bf4:	004006f1 	.word	0x004006f1
  401bf8:	00400561 	.word	0x00400561
  401bfc:	00400545 	.word	0x00400545

00401c00 <TC1_init>:

void TC1_init(int frequencia){
  401c00:	b590      	push	{r4, r7, lr}
  401c02:	b089      	sub	sp, #36	; 0x24
  401c04:	af02      	add	r7, sp, #8
  401c06:	6078      	str	r0, [r7, #4]
    uint32_t ul_div;
    uint32_t ul_tcclks;
    uint32_t ul_sysclk = sysclk_get_cpu_hz();
  401c08:	4b1b      	ldr	r3, [pc, #108]	; (401c78 <TC1_init+0x78>)
  401c0a:	4798      	blx	r3
  401c0c:	6178      	str	r0, [r7, #20]

    uint32_t channel = 1;
  401c0e:	2301      	movs	r3, #1
  401c10:	613b      	str	r3, [r7, #16]

    /* Configura o PMC */
    pmc_enable_periph_clk(ID_TC1);
  401c12:	2018      	movs	r0, #24
  401c14:	4b19      	ldr	r3, [pc, #100]	; (401c7c <TC1_init+0x7c>)
  401c16:	4798      	blx	r3

    /** Configura o TC para operar em  4Mhz e interrupçcão no RC compare */
    tc_find_mck_divisor(frequencia, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401c18:	6878      	ldr	r0, [r7, #4]
  401c1a:	f107 0108 	add.w	r1, r7, #8
  401c1e:	f107 020c 	add.w	r2, r7, #12
  401c22:	697b      	ldr	r3, [r7, #20]
  401c24:	9300      	str	r3, [sp, #0]
  401c26:	460b      	mov	r3, r1
  401c28:	6979      	ldr	r1, [r7, #20]
  401c2a:	4c15      	ldr	r4, [pc, #84]	; (401c80 <TC1_init+0x80>)
  401c2c:	47a0      	blx	r4
    tc_init(TC0, channel, ul_tcclks | TC_CMR_CPCTRG);
  401c2e:	68bb      	ldr	r3, [r7, #8]
  401c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401c34:	461a      	mov	r2, r3
  401c36:	6939      	ldr	r1, [r7, #16]
  401c38:	4812      	ldr	r0, [pc, #72]	; (401c84 <TC1_init+0x84>)
  401c3a:	4b13      	ldr	r3, [pc, #76]	; (401c88 <TC1_init+0x88>)
  401c3c:	4798      	blx	r3
    tc_write_rc(TC0, channel, (ul_sysclk / ul_div) / frequencia);
  401c3e:	68fb      	ldr	r3, [r7, #12]
  401c40:	697a      	ldr	r2, [r7, #20]
  401c42:	fbb2 f2f3 	udiv	r2, r2, r3
  401c46:	687b      	ldr	r3, [r7, #4]
  401c48:	fbb2 f3f3 	udiv	r3, r2, r3
  401c4c:	461a      	mov	r2, r3
  401c4e:	6939      	ldr	r1, [r7, #16]
  401c50:	480c      	ldr	r0, [pc, #48]	; (401c84 <TC1_init+0x84>)
  401c52:	4b0e      	ldr	r3, [pc, #56]	; (401c8c <TC1_init+0x8c>)
  401c54:	4798      	blx	r3

    /* Configura e ativa interrupçcão no TC canal 0 */
    NVIC_EnableIRQ((IRQn_Type) ID_TC1);
  401c56:	2018      	movs	r0, #24
  401c58:	4b0d      	ldr	r3, [pc, #52]	; (401c90 <TC1_init+0x90>)
  401c5a:	4798      	blx	r3
    tc_enable_interrupt(TC0, channel, TC_IER_CPCS);
  401c5c:	2210      	movs	r2, #16
  401c5e:	6939      	ldr	r1, [r7, #16]
  401c60:	4808      	ldr	r0, [pc, #32]	; (401c84 <TC1_init+0x84>)
  401c62:	4b0c      	ldr	r3, [pc, #48]	; (401c94 <TC1_init+0x94>)
  401c64:	4798      	blx	r3

    /* Inicializa o canal 0 do TC */
    tc_start(TC0, channel);
  401c66:	6939      	ldr	r1, [r7, #16]
  401c68:	4806      	ldr	r0, [pc, #24]	; (401c84 <TC1_init+0x84>)
  401c6a:	4b0b      	ldr	r3, [pc, #44]	; (401c98 <TC1_init+0x98>)
  401c6c:	4798      	blx	r3
}
  401c6e:	bf00      	nop
  401c70:	371c      	adds	r7, #28
  401c72:	46bd      	mov	sp, r7
  401c74:	bd90      	pop	{r4, r7, pc}
  401c76:	bf00      	nop
  401c78:	004018f1 	.word	0x004018f1
  401c7c:	00400b55 	.word	0x00400b55
  401c80:	00401009 	.word	0x00401009
  401c84:	4000c000 	.word	0x4000c000
  401c88:	00400f35 	.word	0x00400f35
  401c8c:	00400f95 	.word	0x00400f95
  401c90:	0040176d 	.word	0x0040176d
  401c94:	00400fbd 	.word	0x00400fbd
  401c98:	00400f71 	.word	0x00400f71

00401c9c <RTC_init>:

void RTC_init(){
  401c9c:	b590      	push	{r4, r7, lr}
  401c9e:	b083      	sub	sp, #12
  401ca0:	af02      	add	r7, sp, #8
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401ca2:	2002      	movs	r0, #2
  401ca4:	4b14      	ldr	r3, [pc, #80]	; (401cf8 <RTC_init+0x5c>)
  401ca6:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  401ca8:	2100      	movs	r1, #0
  401caa:	4814      	ldr	r0, [pc, #80]	; (401cfc <RTC_init+0x60>)
  401cac:	4b14      	ldr	r3, [pc, #80]	; (401d00 <RTC_init+0x64>)
  401cae:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MOUNTH, DAY, WEEK);
  401cb0:	230d      	movs	r3, #13
  401cb2:	9300      	str	r3, [sp, #0]
  401cb4:	231b      	movs	r3, #27
  401cb6:	2203      	movs	r2, #3
  401cb8:	f240 71e1 	movw	r1, #2017	; 0x7e1
  401cbc:	480f      	ldr	r0, [pc, #60]	; (401cfc <RTC_init+0x60>)
  401cbe:	4c11      	ldr	r4, [pc, #68]	; (401d04 <RTC_init+0x68>)
  401cc0:	47a0      	blx	r4
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  401cc2:	2300      	movs	r3, #0
  401cc4:	2205      	movs	r2, #5
  401cc6:	2109      	movs	r1, #9
  401cc8:	480c      	ldr	r0, [pc, #48]	; (401cfc <RTC_init+0x60>)
  401cca:	4c0f      	ldr	r4, [pc, #60]	; (401d08 <RTC_init+0x6c>)
  401ccc:	47a0      	blx	r4
	
	/* Configure RTC interrupts */
    NVIC_DisableIRQ(RTC_IRQn);
  401cce:	2002      	movs	r0, #2
  401cd0:	4b0e      	ldr	r3, [pc, #56]	; (401d0c <RTC_init+0x70>)
  401cd2:	4798      	blx	r3
    NVIC_ClearPendingIRQ(RTC_IRQn);
  401cd4:	2002      	movs	r0, #2
  401cd6:	4b0e      	ldr	r3, [pc, #56]	; (401d10 <RTC_init+0x74>)
  401cd8:	4798      	blx	r3
    NVIC_SetPriority(RTC_IRQn, 0);
  401cda:	2100      	movs	r1, #0
  401cdc:	2002      	movs	r0, #2
  401cde:	4b0d      	ldr	r3, [pc, #52]	; (401d14 <RTC_init+0x78>)
  401ce0:	4798      	blx	r3
    NVIC_EnableIRQ(RTC_IRQn);
  401ce2:	2002      	movs	r0, #2
  401ce4:	4b0c      	ldr	r3, [pc, #48]	; (401d18 <RTC_init+0x7c>)
  401ce6:	4798      	blx	r3

    /* Ativa interrupcao via alarme */
    rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  401ce8:	2102      	movs	r1, #2
  401cea:	4804      	ldr	r0, [pc, #16]	; (401cfc <RTC_init+0x60>)
  401cec:	4b0b      	ldr	r3, [pc, #44]	; (401d1c <RTC_init+0x80>)
  401cee:	4798      	blx	r3
}
  401cf0:	bf00      	nop
  401cf2:	3704      	adds	r7, #4
  401cf4:	46bd      	mov	sp, r7
  401cf6:	bd90      	pop	{r4, r7, pc}
  401cf8:	00400b55 	.word	0x00400b55
  401cfc:	400e1860 	.word	0x400e1860
  401d00:	00400bd9 	.word	0x00400bd9
  401d04:	00400df9 	.word	0x00400df9
  401d08:	00400cf1 	.word	0x00400cf1
  401d0c:	004017a1 	.word	0x004017a1
  401d10:	004017d5 	.word	0x004017d5
  401d14:	00401809 	.word	0x00401809
  401d18:	0040176d 	.word	0x0040176d
  401d1c:	00400c11 	.word	0x00400c11

00401d20 <USART1_init>:

/**
 * \brief Configure USART peripheral
 */
static void USART1_init(void){
  401d20:	b580      	push	{r7, lr}
  401d22:	b086      	sub	sp, #24
  401d24:	af00      	add	r7, sp, #0

  /* Configura USART1 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  401d26:	200b      	movs	r0, #11
  401d28:	4b1f      	ldr	r3, [pc, #124]	; (401da8 <USART1_init+0x88>)
  401d2a:	4798      	blx	r3
  sysclk_enable_peripheral_clock(ID_PIOA);
  401d2c:	200a      	movs	r0, #10
  401d2e:	4b1e      	ldr	r3, [pc, #120]	; (401da8 <USART1_init+0x88>)
  401d30:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  401d32:	2210      	movs	r2, #16
  401d34:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401d38:	481c      	ldr	r0, [pc, #112]	; (401dac <USART1_init+0x8c>)
  401d3a:	4b1d      	ldr	r3, [pc, #116]	; (401db0 <USART1_init+0x90>)
  401d3c:	4798      	blx	r3
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  401d3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401d42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d46:	481b      	ldr	r0, [pc, #108]	; (401db4 <USART1_init+0x94>)
  401d48:	4b19      	ldr	r3, [pc, #100]	; (401db0 <USART1_init+0x90>)
  401d4a:	4798      	blx	r3
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401d4c:	4a1a      	ldr	r2, [pc, #104]	; (401db8 <USART1_init+0x98>)
  401d4e:	4b1a      	ldr	r3, [pc, #104]	; (401db8 <USART1_init+0x98>)
  401d50:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  401d54:	f043 0310 	orr.w	r3, r3, #16
  401d58:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

  /* Configura opcoes USART */
  const sam_usart_opt_t usart_settings = {
  401d5c:	463b      	mov	r3, r7
  401d5e:	2200      	movs	r2, #0
  401d60:	601a      	str	r2, [r3, #0]
  401d62:	605a      	str	r2, [r3, #4]
  401d64:	609a      	str	r2, [r3, #8]
  401d66:	60da      	str	r2, [r3, #12]
  401d68:	611a      	str	r2, [r3, #16]
  401d6a:	615a      	str	r2, [r3, #20]
  401d6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401d70:	603b      	str	r3, [r7, #0]
  401d72:	23c0      	movs	r3, #192	; 0xc0
  401d74:	607b      	str	r3, [r7, #4]
  401d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401d7a:	60bb      	str	r3, [r7, #8]
    .stop_bits    = US_MR_NBSTOP_1_BIT    ,
    .channel_mode = US_MR_CHMODE_NORMAL
  };

  /* Ativa Clock periferico USART0 */
  sysclk_enable_peripheral_clock(USART_COM_ID);
  401d7c:	200e      	movs	r0, #14
  401d7e:	4b0a      	ldr	r3, [pc, #40]	; (401da8 <USART1_init+0x88>)
  401d80:	4798      	blx	r3

  /* Configura USART para operar em modo RS232 */
  usart_init_rs232(USART_COM, &usart_settings, sysclk_get_peripheral_hz());
  401d82:	4b0e      	ldr	r3, [pc, #56]	; (401dbc <USART1_init+0x9c>)
  401d84:	4798      	blx	r3
  401d86:	4602      	mov	r2, r0
  401d88:	463b      	mov	r3, r7
  401d8a:	4619      	mov	r1, r3
  401d8c:	480c      	ldr	r0, [pc, #48]	; (401dc0 <USART1_init+0xa0>)
  401d8e:	4b0d      	ldr	r3, [pc, #52]	; (401dc4 <USART1_init+0xa4>)
  401d90:	4798      	blx	r3

  /* Enable the receiver and transmitter. */
	usart_enable_tx(USART_COM);
  401d92:	480b      	ldr	r0, [pc, #44]	; (401dc0 <USART1_init+0xa0>)
  401d94:	4b0c      	ldr	r3, [pc, #48]	; (401dc8 <USART1_init+0xa8>)
  401d96:	4798      	blx	r3
	usart_enable_rx(USART_COM);
  401d98:	4809      	ldr	r0, [pc, #36]	; (401dc0 <USART1_init+0xa0>)
  401d9a:	4b0c      	ldr	r3, [pc, #48]	; (401dcc <USART1_init+0xac>)
  401d9c:	4798      	blx	r3
}
  401d9e:	bf00      	nop
  401da0:	3718      	adds	r7, #24
  401da2:	46bd      	mov	sp, r7
  401da4:	bd80      	pop	{r7, pc}
  401da6:	bf00      	nop
  401da8:	00401919 	.word	0x00401919
  401dac:	400e1000 	.word	0x400e1000
  401db0:	0040057d 	.word	0x0040057d
  401db4:	400e0e00 	.word	0x400e0e00
  401db8:	40088000 	.word	0x40088000
  401dbc:	00401905 	.word	0x00401905
  401dc0:	40028000 	.word	0x40028000
  401dc4:	0040121d 	.word	0x0040121d
  401dc8:	004012a1 	.word	0x004012a1
  401dcc:	004012d9 	.word	0x004012d9

00401dd0 <usart_puts>:


/**
 *  Envia para o UART uma string
 */
uint32_t usart_puts(uint8_t *pstring){
  401dd0:	b580      	push	{r7, lr}
  401dd2:	b084      	sub	sp, #16
  401dd4:	af00      	add	r7, sp, #0
  401dd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  401dd8:	2300      	movs	r3, #0
  401dda:	60fb      	str	r3, [r7, #12]

  while(*(pstring + i)){
  401ddc:	e010      	b.n	401e00 <usart_puts+0x30>
    usart_serial_putchar(USART_COM, *(pstring+i++));
  401dde:	68fb      	ldr	r3, [r7, #12]
  401de0:	1c5a      	adds	r2, r3, #1
  401de2:	60fa      	str	r2, [r7, #12]
  401de4:	687a      	ldr	r2, [r7, #4]
  401de6:	4413      	add	r3, r2
  401de8:	781b      	ldrb	r3, [r3, #0]
  401dea:	4619      	mov	r1, r3
  401dec:	480a      	ldr	r0, [pc, #40]	; (401e18 <usart_puts+0x48>)
  401dee:	4b0b      	ldr	r3, [pc, #44]	; (401e1c <usart_puts+0x4c>)
  401df0:	4798      	blx	r3
    while(!uart_is_tx_empty(USART_COM)){};
  401df2:	bf00      	nop
  401df4:	4808      	ldr	r0, [pc, #32]	; (401e18 <usart_puts+0x48>)
  401df6:	4b0a      	ldr	r3, [pc, #40]	; (401e20 <usart_puts+0x50>)
  401df8:	4798      	blx	r3
  401dfa:	4603      	mov	r3, r0
  401dfc:	2b00      	cmp	r3, #0
  401dfe:	d0f9      	beq.n	401df4 <usart_puts+0x24>
 *  Envia para o UART uma string
 */
uint32_t usart_puts(uint8_t *pstring){
  uint32_t i = 0 ;

  while(*(pstring + i)){
  401e00:	687a      	ldr	r2, [r7, #4]
  401e02:	68fb      	ldr	r3, [r7, #12]
  401e04:	4413      	add	r3, r2
  401e06:	781b      	ldrb	r3, [r3, #0]
  401e08:	2b00      	cmp	r3, #0
  401e0a:	d1e8      	bne.n	401dde <usart_puts+0xe>
    usart_serial_putchar(USART_COM, *(pstring+i++));
    while(!uart_is_tx_empty(USART_COM)){};
  }
  return(i);
  401e0c:	68fb      	ldr	r3, [r7, #12]
}
  401e0e:	4618      	mov	r0, r3
  401e10:	3710      	adds	r7, #16
  401e12:	46bd      	mov	sp, r7
  401e14:	bd80      	pop	{r7, pc}
  401e16:	bf00      	nop
  401e18:	40028000 	.word	0x40028000
  401e1c:	00401935 	.word	0x00401935
  401e20:	004010b1 	.word	0x004010b1

00401e24 <usart_gets>:

/**
 * Busca do UART uma mensagem enviada pelo computador terminada em \n
 */
uint32_t usart_gets(uint8_t *pstring){
  401e24:	b580      	push	{r7, lr}
  401e26:	b084      	sub	sp, #16
  401e28:	af00      	add	r7, sp, #0
  401e2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  401e2c:	2300      	movs	r3, #0
  401e2e:	60fb      	str	r3, [r7, #12]
  usart_serial_getchar(USART_COM, (pstring+i));
  401e30:	687a      	ldr	r2, [r7, #4]
  401e32:	68fb      	ldr	r3, [r7, #12]
  401e34:	4413      	add	r3, r2
  401e36:	4619      	mov	r1, r3
  401e38:	480f      	ldr	r0, [pc, #60]	; (401e78 <usart_gets+0x54>)
  401e3a:	4b10      	ldr	r3, [pc, #64]	; (401e7c <usart_gets+0x58>)
  401e3c:	4798      	blx	r3
  while(*(pstring+i) != '\n'){
  401e3e:	e009      	b.n	401e54 <usart_gets+0x30>
    usart_serial_getchar(USART_COM, (pstring+(++i)));
  401e40:	68fb      	ldr	r3, [r7, #12]
  401e42:	3301      	adds	r3, #1
  401e44:	60fb      	str	r3, [r7, #12]
  401e46:	687a      	ldr	r2, [r7, #4]
  401e48:	68fb      	ldr	r3, [r7, #12]
  401e4a:	4413      	add	r3, r2
  401e4c:	4619      	mov	r1, r3
  401e4e:	480a      	ldr	r0, [pc, #40]	; (401e78 <usart_gets+0x54>)
  401e50:	4b0a      	ldr	r3, [pc, #40]	; (401e7c <usart_gets+0x58>)
  401e52:	4798      	blx	r3
 * Busca do UART uma mensagem enviada pelo computador terminada em \n
 */
uint32_t usart_gets(uint8_t *pstring){
  uint32_t i = 0 ;
  usart_serial_getchar(USART_COM, (pstring+i));
  while(*(pstring+i) != '\n'){
  401e54:	687a      	ldr	r2, [r7, #4]
  401e56:	68fb      	ldr	r3, [r7, #12]
  401e58:	4413      	add	r3, r2
  401e5a:	781b      	ldrb	r3, [r3, #0]
  401e5c:	2b0a      	cmp	r3, #10
  401e5e:	d1ef      	bne.n	401e40 <usart_gets+0x1c>
    usart_serial_getchar(USART_COM, (pstring+(++i)));
  }
  *(pstring+i+1)= 0x00;
  401e60:	68fb      	ldr	r3, [r7, #12]
  401e62:	3301      	adds	r3, #1
  401e64:	687a      	ldr	r2, [r7, #4]
  401e66:	4413      	add	r3, r2
  401e68:	2200      	movs	r2, #0
  401e6a:	701a      	strb	r2, [r3, #0]
  return(i);
  401e6c:	68fb      	ldr	r3, [r7, #12]

}
  401e6e:	4618      	mov	r0, r3
  401e70:	3710      	adds	r7, #16
  401e72:	46bd      	mov	sp, r7
  401e74:	bd80      	pop	{r7, pc}
  401e76:	bf00      	nop
  401e78:	40028000 	.word	0x40028000
  401e7c:	00401a41 	.word	0x00401a41

00401e80 <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  401e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e84:	b083      	sub	sp, #12
  401e86:	af02      	add	r7, sp, #8
	/* Initialize the SAM system */
	sysclk_init();
  401e88:	4b59      	ldr	r3, [pc, #356]	; (401ff0 <main+0x170>)
  401e8a:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401e8c:	4b59      	ldr	r3, [pc, #356]	; (401ff4 <main+0x174>)
  401e8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401e92:	605a      	str	r2, [r3, #4]
	
	/* Inicializa led */
	led_init(0);
  401e94:	2000      	movs	r0, #0
  401e96:	4b58      	ldr	r3, [pc, #352]	; (401ff8 <main+0x178>)
  401e98:	4798      	blx	r3

	/** Inicializa USART */
	USART1_init();
  401e9a:	4b58      	ldr	r3, [pc, #352]	; (401ffc <main+0x17c>)
  401e9c:	4798      	blx	r3
	
	/** Inicializa RTC */
	RTC_init();
  401e9e:	4b58      	ldr	r3, [pc, #352]	; (402000 <main+0x180>)
  401ea0:	4798      	blx	r3
  
    /** Configura timer 0 */
	TC1_init(freq);
  401ea2:	4b58      	ldr	r3, [pc, #352]	; (402004 <main+0x184>)
  401ea4:	681b      	ldr	r3, [r3, #0]
  401ea6:	4618      	mov	r0, r3
  401ea8:	4b57      	ldr	r3, [pc, #348]	; (402008 <main+0x188>)
  401eaa:	4798      	blx	r3
	

  /** Super loop */
	while (1) {
		
		usart_puts("Menu:\n* Ligar pisca LED: l \n* Desligar pisca LED: d \n* Aumentar frequencia: + \n* Diminuir frequencia: - \n* Hora atual: h \n* Menu: m\n");
  401eac:	4857      	ldr	r0, [pc, #348]	; (40200c <main+0x18c>)
  401eae:	4b58      	ldr	r3, [pc, #352]	; (402010 <main+0x190>)
  401eb0:	4798      	blx	r3
		delay_s(1);
  401eb2:	4b58      	ldr	r3, [pc, #352]	; (402014 <main+0x194>)
  401eb4:	4798      	blx	r3
  401eb6:	4603      	mov	r3, r0
  401eb8:	4618      	mov	r0, r3
  401eba:	f04f 0100 	mov.w	r1, #0
  401ebe:	4602      	mov	r2, r0
  401ec0:	460b      	mov	r3, r1
  401ec2:	ea4f 0983 	mov.w	r9, r3, lsl #2
  401ec6:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  401eca:	ea4f 0882 	mov.w	r8, r2, lsl #2
  401ece:	4642      	mov	r2, r8
  401ed0:	464b      	mov	r3, r9
  401ed2:	015d      	lsls	r5, r3, #5
  401ed4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  401ed8:	0154      	lsls	r4, r2, #5
  401eda:	1aa4      	subs	r4, r4, r2
  401edc:	eb65 0503 	sbc.w	r5, r5, r3
  401ee0:	1824      	adds	r4, r4, r0
  401ee2:	eb45 0501 	adc.w	r5, r5, r1
  401ee6:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
  401eea:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
  401eee:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
  401ef2:	4654      	mov	r4, sl
  401ef4:	465d      	mov	r5, fp
  401ef6:	4620      	mov	r0, r4
  401ef8:	4629      	mov	r1, r5
  401efa:	f241 722b 	movw	r2, #5931	; 0x172b
  401efe:	f04f 0300 	mov.w	r3, #0
  401f02:	1880      	adds	r0, r0, r2
  401f04:	eb41 0103 	adc.w	r1, r1, r3
  401f08:	4e43      	ldr	r6, [pc, #268]	; (402018 <main+0x198>)
  401f0a:	f241 722c 	movw	r2, #5932	; 0x172c
  401f0e:	f04f 0300 	mov.w	r3, #0
  401f12:	47b0      	blx	r6
  401f14:	4602      	mov	r2, r0
  401f16:	460b      	mov	r3, r1
  401f18:	4613      	mov	r3, r2
  401f1a:	4618      	mov	r0, r3
  401f1c:	4b3f      	ldr	r3, [pc, #252]	; (40201c <main+0x19c>)
  401f1e:	4798      	blx	r3
		usart_puts(bufferTX);
  401f20:	483f      	ldr	r0, [pc, #252]	; (402020 <main+0x1a0>)
  401f22:	4b3b      	ldr	r3, [pc, #236]	; (402010 <main+0x190>)
  401f24:	4798      	blx	r3
		usart_gets(bufferRX);
  401f26:	483f      	ldr	r0, [pc, #252]	; (402024 <main+0x1a4>)
  401f28:	4b3f      	ldr	r3, [pc, #252]	; (402028 <main+0x1a8>)
  401f2a:	4798      	blx	r3
	
		if (bufferRX[0]=='l'){
  401f2c:	4b3d      	ldr	r3, [pc, #244]	; (402024 <main+0x1a4>)
  401f2e:	781b      	ldrb	r3, [r3, #0]
  401f30:	2b6c      	cmp	r3, #108	; 0x6c
  401f32:	d105      	bne.n	401f40 <main+0xc0>
			usart_puts("Pisca LED ON\n");
  401f34:	483d      	ldr	r0, [pc, #244]	; (40202c <main+0x1ac>)
  401f36:	4b36      	ldr	r3, [pc, #216]	; (402010 <main+0x190>)
  401f38:	4798      	blx	r3
			flag_led0 = 1;
  401f3a:	4b3d      	ldr	r3, [pc, #244]	; (402030 <main+0x1b0>)
  401f3c:	2201      	movs	r2, #1
  401f3e:	601a      	str	r2, [r3, #0]
			//pisca_led(1);
		}
		
		if (bufferRX[0]=='d'){
  401f40:	4b38      	ldr	r3, [pc, #224]	; (402024 <main+0x1a4>)
  401f42:	781b      	ldrb	r3, [r3, #0]
  401f44:	2b64      	cmp	r3, #100	; 0x64
  401f46:	d10e      	bne.n	401f66 <main+0xe6>
			usart_puts("Pisca LED OFF\n");
  401f48:	483a      	ldr	r0, [pc, #232]	; (402034 <main+0x1b4>)
  401f4a:	4b31      	ldr	r3, [pc, #196]	; (402010 <main+0x190>)
  401f4c:	4798      	blx	r3
			flag_led0 = 0;
  401f4e:	4b38      	ldr	r3, [pc, #224]	; (402030 <main+0x1b0>)
  401f50:	2200      	movs	r2, #0
  401f52:	601a      	str	r2, [r3, #0]
			pio_set_output(LED_PIO, LED_PIN_MASK, 1, 0, 0 );
  401f54:	2300      	movs	r3, #0
  401f56:	9300      	str	r3, [sp, #0]
  401f58:	2300      	movs	r3, #0
  401f5a:	2201      	movs	r2, #1
  401f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
  401f60:	4835      	ldr	r0, [pc, #212]	; (402038 <main+0x1b8>)
  401f62:	4e36      	ldr	r6, [pc, #216]	; (40203c <main+0x1bc>)
  401f64:	47b0      	blx	r6
			//pisca_led(0);
		}
		
		if (bufferRX[0]=='+'){
  401f66:	4b2f      	ldr	r3, [pc, #188]	; (402024 <main+0x1a4>)
  401f68:	781b      	ldrb	r3, [r3, #0]
  401f6a:	2b2b      	cmp	r3, #43	; 0x2b
  401f6c:	d10c      	bne.n	401f88 <main+0x108>
			freq += 2;
  401f6e:	4b25      	ldr	r3, [pc, #148]	; (402004 <main+0x184>)
  401f70:	681b      	ldr	r3, [r3, #0]
  401f72:	3302      	adds	r3, #2
  401f74:	4a23      	ldr	r2, [pc, #140]	; (402004 <main+0x184>)
  401f76:	6013      	str	r3, [r2, #0]
			TC1_init(freq);
  401f78:	4b22      	ldr	r3, [pc, #136]	; (402004 <main+0x184>)
  401f7a:	681b      	ldr	r3, [r3, #0]
  401f7c:	4618      	mov	r0, r3
  401f7e:	4b22      	ldr	r3, [pc, #136]	; (402008 <main+0x188>)
  401f80:	4798      	blx	r3
			usart_puts("Aumentando frequencia em 2Hz\n");
  401f82:	482f      	ldr	r0, [pc, #188]	; (402040 <main+0x1c0>)
  401f84:	4b22      	ldr	r3, [pc, #136]	; (402010 <main+0x190>)
  401f86:	4798      	blx	r3
		}
		
		if (bufferRX[0]=='-'){
  401f88:	4b26      	ldr	r3, [pc, #152]	; (402024 <main+0x1a4>)
  401f8a:	781b      	ldrb	r3, [r3, #0]
  401f8c:	2b2d      	cmp	r3, #45	; 0x2d
  401f8e:	d10c      	bne.n	401faa <main+0x12a>
			freq -= 2;
  401f90:	4b1c      	ldr	r3, [pc, #112]	; (402004 <main+0x184>)
  401f92:	681b      	ldr	r3, [r3, #0]
  401f94:	3b02      	subs	r3, #2
  401f96:	4a1b      	ldr	r2, [pc, #108]	; (402004 <main+0x184>)
  401f98:	6013      	str	r3, [r2, #0]
			TC1_init(freq);
  401f9a:	4b1a      	ldr	r3, [pc, #104]	; (402004 <main+0x184>)
  401f9c:	681b      	ldr	r3, [r3, #0]
  401f9e:	4618      	mov	r0, r3
  401fa0:	4b19      	ldr	r3, [pc, #100]	; (402008 <main+0x188>)
  401fa2:	4798      	blx	r3
			usart_puts("Diminuindo a frequencia em 2Hz\n");
  401fa4:	4827      	ldr	r0, [pc, #156]	; (402044 <main+0x1c4>)
  401fa6:	4b1a      	ldr	r3, [pc, #104]	; (402010 <main+0x190>)
  401fa8:	4798      	blx	r3
		}
		
		if (bufferRX[0]=='h'){
  401faa:	4b1e      	ldr	r3, [pc, #120]	; (402024 <main+0x1a4>)
  401fac:	781b      	ldrb	r3, [r3, #0]
  401fae:	2b68      	cmp	r3, #104	; 0x68
  401fb0:	d114      	bne.n	401fdc <main+0x15c>
			rtc_get_time(RTC, &hora, &minuto, &segundo);
  401fb2:	4b25      	ldr	r3, [pc, #148]	; (402048 <main+0x1c8>)
  401fb4:	4a25      	ldr	r2, [pc, #148]	; (40204c <main+0x1cc>)
  401fb6:	4926      	ldr	r1, [pc, #152]	; (402050 <main+0x1d0>)
  401fb8:	4826      	ldr	r0, [pc, #152]	; (402054 <main+0x1d4>)
  401fba:	4e27      	ldr	r6, [pc, #156]	; (402058 <main+0x1d8>)
  401fbc:	47b0      	blx	r6
			sprintf(bufferTX, "hora atual:\n %d:%d:%d \n", hora,minuto,segundo);
  401fbe:	4b24      	ldr	r3, [pc, #144]	; (402050 <main+0x1d0>)
  401fc0:	681a      	ldr	r2, [r3, #0]
  401fc2:	4b22      	ldr	r3, [pc, #136]	; (40204c <main+0x1cc>)
  401fc4:	6819      	ldr	r1, [r3, #0]
  401fc6:	4b20      	ldr	r3, [pc, #128]	; (402048 <main+0x1c8>)
  401fc8:	681b      	ldr	r3, [r3, #0]
  401fca:	9300      	str	r3, [sp, #0]
  401fcc:	460b      	mov	r3, r1
  401fce:	4923      	ldr	r1, [pc, #140]	; (40205c <main+0x1dc>)
  401fd0:	4813      	ldr	r0, [pc, #76]	; (402020 <main+0x1a0>)
  401fd2:	4e23      	ldr	r6, [pc, #140]	; (402060 <main+0x1e0>)
  401fd4:	47b0      	blx	r6
			usart_puts(bufferTX);
  401fd6:	4812      	ldr	r0, [pc, #72]	; (402020 <main+0x1a0>)
  401fd8:	4b0d      	ldr	r3, [pc, #52]	; (402010 <main+0x190>)
  401fda:	4798      	blx	r3
			
			
		}
		
		if (bufferRX[0]=='m'){
  401fdc:	4b11      	ldr	r3, [pc, #68]	; (402024 <main+0x1a4>)
  401fde:	781b      	ldrb	r3, [r3, #0]
  401fe0:	2b6d      	cmp	r3, #109	; 0x6d
  401fe2:	f47f af63 	bne.w	401eac <main+0x2c>
			usart_puts("Menu:\n* Ligar pisca LED: l \n* Desligar pisca LED: d \n* Aumentar frequencia: + \n* Diminuir frequencia: - \n* Hora atual: h \n* Menu: m\n");
  401fe6:	4809      	ldr	r0, [pc, #36]	; (40200c <main+0x18c>)
  401fe8:	4b09      	ldr	r3, [pc, #36]	; (402010 <main+0x190>)
  401fea:	4798      	blx	r3
		}	
	}
  401fec:	e75e      	b.n	401eac <main+0x2c>
  401fee:	bf00      	nop
  401ff0:	0040049d 	.word	0x0040049d
  401ff4:	400e1850 	.word	0x400e1850
  401ff8:	00401b8d 	.word	0x00401b8d
  401ffc:	00401d21 	.word	0x00401d21
  402000:	00401c9d 	.word	0x00401c9d
  402004:	20400014 	.word	0x20400014
  402008:	00401c01 	.word	0x00401c01
  40200c:	00406bd4 	.word	0x00406bd4
  402010:	00401dd1 	.word	0x00401dd1
  402014:	004018f1 	.word	0x004018f1
  402018:	00402065 	.word	0x00402065
  40201c:	20400001 	.word	0x20400001
  402020:	204009c4 	.word	0x204009c4
  402024:	20400960 	.word	0x20400960
  402028:	00401e25 	.word	0x00401e25
  40202c:	00406c5c 	.word	0x00406c5c
  402030:	20400920 	.word	0x20400920
  402034:	00406c6c 	.word	0x00406c6c
  402038:	400e1200 	.word	0x400e1200
  40203c:	0040068d 	.word	0x0040068d
  402040:	00406c7c 	.word	0x00406c7c
  402044:	00406c9c 	.word	0x00406c9c
  402048:	20400a28 	.word	0x20400a28
  40204c:	20400958 	.word	0x20400958
  402050:	2040095c 	.word	0x2040095c
  402054:	400e1860 	.word	0x400e1860
  402058:	00400c2d 	.word	0x00400c2d
  40205c:	00406cbc 	.word	0x00406cbc
  402060:	00402469 	.word	0x00402469

00402064 <__aeabi_uldivmod>:
  402064:	b953      	cbnz	r3, 40207c <__aeabi_uldivmod+0x18>
  402066:	b94a      	cbnz	r2, 40207c <__aeabi_uldivmod+0x18>
  402068:	2900      	cmp	r1, #0
  40206a:	bf08      	it	eq
  40206c:	2800      	cmpeq	r0, #0
  40206e:	bf1c      	itt	ne
  402070:	f04f 31ff 	movne.w	r1, #4294967295
  402074:	f04f 30ff 	movne.w	r0, #4294967295
  402078:	f000 b97e 	b.w	402378 <__aeabi_idiv0>
  40207c:	f1ad 0c08 	sub.w	ip, sp, #8
  402080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402084:	f000 f806 	bl	402094 <__udivmoddi4>
  402088:	f8dd e004 	ldr.w	lr, [sp, #4]
  40208c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402090:	b004      	add	sp, #16
  402092:	4770      	bx	lr

00402094 <__udivmoddi4>:
  402094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402098:	468c      	mov	ip, r1
  40209a:	460e      	mov	r6, r1
  40209c:	4604      	mov	r4, r0
  40209e:	9d08      	ldr	r5, [sp, #32]
  4020a0:	2b00      	cmp	r3, #0
  4020a2:	d150      	bne.n	402146 <__udivmoddi4+0xb2>
  4020a4:	428a      	cmp	r2, r1
  4020a6:	4617      	mov	r7, r2
  4020a8:	d96c      	bls.n	402184 <__udivmoddi4+0xf0>
  4020aa:	fab2 fe82 	clz	lr, r2
  4020ae:	f1be 0f00 	cmp.w	lr, #0
  4020b2:	d00b      	beq.n	4020cc <__udivmoddi4+0x38>
  4020b4:	f1ce 0420 	rsb	r4, lr, #32
  4020b8:	fa20 f404 	lsr.w	r4, r0, r4
  4020bc:	fa01 f60e 	lsl.w	r6, r1, lr
  4020c0:	ea44 0c06 	orr.w	ip, r4, r6
  4020c4:	fa02 f70e 	lsl.w	r7, r2, lr
  4020c8:	fa00 f40e 	lsl.w	r4, r0, lr
  4020cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4020d0:	0c22      	lsrs	r2, r4, #16
  4020d2:	fbbc f0f9 	udiv	r0, ip, r9
  4020d6:	fa1f f887 	uxth.w	r8, r7
  4020da:	fb09 c610 	mls	r6, r9, r0, ip
  4020de:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4020e2:	fb00 f308 	mul.w	r3, r0, r8
  4020e6:	42b3      	cmp	r3, r6
  4020e8:	d909      	bls.n	4020fe <__udivmoddi4+0x6a>
  4020ea:	19f6      	adds	r6, r6, r7
  4020ec:	f100 32ff 	add.w	r2, r0, #4294967295
  4020f0:	f080 8122 	bcs.w	402338 <__udivmoddi4+0x2a4>
  4020f4:	42b3      	cmp	r3, r6
  4020f6:	f240 811f 	bls.w	402338 <__udivmoddi4+0x2a4>
  4020fa:	3802      	subs	r0, #2
  4020fc:	443e      	add	r6, r7
  4020fe:	1af6      	subs	r6, r6, r3
  402100:	b2a2      	uxth	r2, r4
  402102:	fbb6 f3f9 	udiv	r3, r6, r9
  402106:	fb09 6613 	mls	r6, r9, r3, r6
  40210a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40210e:	fb03 f808 	mul.w	r8, r3, r8
  402112:	45a0      	cmp	r8, r4
  402114:	d909      	bls.n	40212a <__udivmoddi4+0x96>
  402116:	19e4      	adds	r4, r4, r7
  402118:	f103 32ff 	add.w	r2, r3, #4294967295
  40211c:	f080 810a 	bcs.w	402334 <__udivmoddi4+0x2a0>
  402120:	45a0      	cmp	r8, r4
  402122:	f240 8107 	bls.w	402334 <__udivmoddi4+0x2a0>
  402126:	3b02      	subs	r3, #2
  402128:	443c      	add	r4, r7
  40212a:	ebc8 0404 	rsb	r4, r8, r4
  40212e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402132:	2100      	movs	r1, #0
  402134:	2d00      	cmp	r5, #0
  402136:	d062      	beq.n	4021fe <__udivmoddi4+0x16a>
  402138:	fa24 f40e 	lsr.w	r4, r4, lr
  40213c:	2300      	movs	r3, #0
  40213e:	602c      	str	r4, [r5, #0]
  402140:	606b      	str	r3, [r5, #4]
  402142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402146:	428b      	cmp	r3, r1
  402148:	d907      	bls.n	40215a <__udivmoddi4+0xc6>
  40214a:	2d00      	cmp	r5, #0
  40214c:	d055      	beq.n	4021fa <__udivmoddi4+0x166>
  40214e:	2100      	movs	r1, #0
  402150:	e885 0041 	stmia.w	r5, {r0, r6}
  402154:	4608      	mov	r0, r1
  402156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40215a:	fab3 f183 	clz	r1, r3
  40215e:	2900      	cmp	r1, #0
  402160:	f040 8090 	bne.w	402284 <__udivmoddi4+0x1f0>
  402164:	42b3      	cmp	r3, r6
  402166:	d302      	bcc.n	40216e <__udivmoddi4+0xda>
  402168:	4282      	cmp	r2, r0
  40216a:	f200 80f8 	bhi.w	40235e <__udivmoddi4+0x2ca>
  40216e:	1a84      	subs	r4, r0, r2
  402170:	eb66 0603 	sbc.w	r6, r6, r3
  402174:	2001      	movs	r0, #1
  402176:	46b4      	mov	ip, r6
  402178:	2d00      	cmp	r5, #0
  40217a:	d040      	beq.n	4021fe <__udivmoddi4+0x16a>
  40217c:	e885 1010 	stmia.w	r5, {r4, ip}
  402180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402184:	b912      	cbnz	r2, 40218c <__udivmoddi4+0xf8>
  402186:	2701      	movs	r7, #1
  402188:	fbb7 f7f2 	udiv	r7, r7, r2
  40218c:	fab7 fe87 	clz	lr, r7
  402190:	f1be 0f00 	cmp.w	lr, #0
  402194:	d135      	bne.n	402202 <__udivmoddi4+0x16e>
  402196:	1bf3      	subs	r3, r6, r7
  402198:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40219c:	fa1f fc87 	uxth.w	ip, r7
  4021a0:	2101      	movs	r1, #1
  4021a2:	fbb3 f0f8 	udiv	r0, r3, r8
  4021a6:	0c22      	lsrs	r2, r4, #16
  4021a8:	fb08 3610 	mls	r6, r8, r0, r3
  4021ac:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4021b0:	fb0c f300 	mul.w	r3, ip, r0
  4021b4:	42b3      	cmp	r3, r6
  4021b6:	d907      	bls.n	4021c8 <__udivmoddi4+0x134>
  4021b8:	19f6      	adds	r6, r6, r7
  4021ba:	f100 32ff 	add.w	r2, r0, #4294967295
  4021be:	d202      	bcs.n	4021c6 <__udivmoddi4+0x132>
  4021c0:	42b3      	cmp	r3, r6
  4021c2:	f200 80ce 	bhi.w	402362 <__udivmoddi4+0x2ce>
  4021c6:	4610      	mov	r0, r2
  4021c8:	1af6      	subs	r6, r6, r3
  4021ca:	b2a2      	uxth	r2, r4
  4021cc:	fbb6 f3f8 	udiv	r3, r6, r8
  4021d0:	fb08 6613 	mls	r6, r8, r3, r6
  4021d4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4021d8:	fb0c fc03 	mul.w	ip, ip, r3
  4021dc:	45a4      	cmp	ip, r4
  4021de:	d907      	bls.n	4021f0 <__udivmoddi4+0x15c>
  4021e0:	19e4      	adds	r4, r4, r7
  4021e2:	f103 32ff 	add.w	r2, r3, #4294967295
  4021e6:	d202      	bcs.n	4021ee <__udivmoddi4+0x15a>
  4021e8:	45a4      	cmp	ip, r4
  4021ea:	f200 80b5 	bhi.w	402358 <__udivmoddi4+0x2c4>
  4021ee:	4613      	mov	r3, r2
  4021f0:	ebcc 0404 	rsb	r4, ip, r4
  4021f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4021f8:	e79c      	b.n	402134 <__udivmoddi4+0xa0>
  4021fa:	4629      	mov	r1, r5
  4021fc:	4628      	mov	r0, r5
  4021fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402202:	f1ce 0120 	rsb	r1, lr, #32
  402206:	fa06 f30e 	lsl.w	r3, r6, lr
  40220a:	fa07 f70e 	lsl.w	r7, r7, lr
  40220e:	fa20 f901 	lsr.w	r9, r0, r1
  402212:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402216:	40ce      	lsrs	r6, r1
  402218:	ea49 0903 	orr.w	r9, r9, r3
  40221c:	fbb6 faf8 	udiv	sl, r6, r8
  402220:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402224:	fb08 661a 	mls	r6, r8, sl, r6
  402228:	fa1f fc87 	uxth.w	ip, r7
  40222c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402230:	fb0a f20c 	mul.w	r2, sl, ip
  402234:	429a      	cmp	r2, r3
  402236:	fa00 f40e 	lsl.w	r4, r0, lr
  40223a:	d90a      	bls.n	402252 <__udivmoddi4+0x1be>
  40223c:	19db      	adds	r3, r3, r7
  40223e:	f10a 31ff 	add.w	r1, sl, #4294967295
  402242:	f080 8087 	bcs.w	402354 <__udivmoddi4+0x2c0>
  402246:	429a      	cmp	r2, r3
  402248:	f240 8084 	bls.w	402354 <__udivmoddi4+0x2c0>
  40224c:	f1aa 0a02 	sub.w	sl, sl, #2
  402250:	443b      	add	r3, r7
  402252:	1a9b      	subs	r3, r3, r2
  402254:	fa1f f989 	uxth.w	r9, r9
  402258:	fbb3 f1f8 	udiv	r1, r3, r8
  40225c:	fb08 3311 	mls	r3, r8, r1, r3
  402260:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  402264:	fb01 f60c 	mul.w	r6, r1, ip
  402268:	429e      	cmp	r6, r3
  40226a:	d907      	bls.n	40227c <__udivmoddi4+0x1e8>
  40226c:	19db      	adds	r3, r3, r7
  40226e:	f101 32ff 	add.w	r2, r1, #4294967295
  402272:	d26b      	bcs.n	40234c <__udivmoddi4+0x2b8>
  402274:	429e      	cmp	r6, r3
  402276:	d969      	bls.n	40234c <__udivmoddi4+0x2b8>
  402278:	3902      	subs	r1, #2
  40227a:	443b      	add	r3, r7
  40227c:	1b9b      	subs	r3, r3, r6
  40227e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  402282:	e78e      	b.n	4021a2 <__udivmoddi4+0x10e>
  402284:	f1c1 0e20 	rsb	lr, r1, #32
  402288:	fa22 f40e 	lsr.w	r4, r2, lr
  40228c:	408b      	lsls	r3, r1
  40228e:	4323      	orrs	r3, r4
  402290:	fa20 f70e 	lsr.w	r7, r0, lr
  402294:	fa06 f401 	lsl.w	r4, r6, r1
  402298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40229c:	fa26 f60e 	lsr.w	r6, r6, lr
  4022a0:	433c      	orrs	r4, r7
  4022a2:	fbb6 f9fc 	udiv	r9, r6, ip
  4022a6:	0c27      	lsrs	r7, r4, #16
  4022a8:	fb0c 6619 	mls	r6, ip, r9, r6
  4022ac:	fa1f f883 	uxth.w	r8, r3
  4022b0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4022b4:	fb09 f708 	mul.w	r7, r9, r8
  4022b8:	42b7      	cmp	r7, r6
  4022ba:	fa02 f201 	lsl.w	r2, r2, r1
  4022be:	fa00 fa01 	lsl.w	sl, r0, r1
  4022c2:	d908      	bls.n	4022d6 <__udivmoddi4+0x242>
  4022c4:	18f6      	adds	r6, r6, r3
  4022c6:	f109 30ff 	add.w	r0, r9, #4294967295
  4022ca:	d241      	bcs.n	402350 <__udivmoddi4+0x2bc>
  4022cc:	42b7      	cmp	r7, r6
  4022ce:	d93f      	bls.n	402350 <__udivmoddi4+0x2bc>
  4022d0:	f1a9 0902 	sub.w	r9, r9, #2
  4022d4:	441e      	add	r6, r3
  4022d6:	1bf6      	subs	r6, r6, r7
  4022d8:	b2a0      	uxth	r0, r4
  4022da:	fbb6 f4fc 	udiv	r4, r6, ip
  4022de:	fb0c 6614 	mls	r6, ip, r4, r6
  4022e2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4022e6:	fb04 f808 	mul.w	r8, r4, r8
  4022ea:	45b8      	cmp	r8, r7
  4022ec:	d907      	bls.n	4022fe <__udivmoddi4+0x26a>
  4022ee:	18ff      	adds	r7, r7, r3
  4022f0:	f104 30ff 	add.w	r0, r4, #4294967295
  4022f4:	d228      	bcs.n	402348 <__udivmoddi4+0x2b4>
  4022f6:	45b8      	cmp	r8, r7
  4022f8:	d926      	bls.n	402348 <__udivmoddi4+0x2b4>
  4022fa:	3c02      	subs	r4, #2
  4022fc:	441f      	add	r7, r3
  4022fe:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  402302:	ebc8 0707 	rsb	r7, r8, r7
  402306:	fba0 8902 	umull	r8, r9, r0, r2
  40230a:	454f      	cmp	r7, r9
  40230c:	4644      	mov	r4, r8
  40230e:	464e      	mov	r6, r9
  402310:	d314      	bcc.n	40233c <__udivmoddi4+0x2a8>
  402312:	d029      	beq.n	402368 <__udivmoddi4+0x2d4>
  402314:	b365      	cbz	r5, 402370 <__udivmoddi4+0x2dc>
  402316:	ebba 0304 	subs.w	r3, sl, r4
  40231a:	eb67 0706 	sbc.w	r7, r7, r6
  40231e:	fa07 fe0e 	lsl.w	lr, r7, lr
  402322:	40cb      	lsrs	r3, r1
  402324:	40cf      	lsrs	r7, r1
  402326:	ea4e 0303 	orr.w	r3, lr, r3
  40232a:	e885 0088 	stmia.w	r5, {r3, r7}
  40232e:	2100      	movs	r1, #0
  402330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402334:	4613      	mov	r3, r2
  402336:	e6f8      	b.n	40212a <__udivmoddi4+0x96>
  402338:	4610      	mov	r0, r2
  40233a:	e6e0      	b.n	4020fe <__udivmoddi4+0x6a>
  40233c:	ebb8 0402 	subs.w	r4, r8, r2
  402340:	eb69 0603 	sbc.w	r6, r9, r3
  402344:	3801      	subs	r0, #1
  402346:	e7e5      	b.n	402314 <__udivmoddi4+0x280>
  402348:	4604      	mov	r4, r0
  40234a:	e7d8      	b.n	4022fe <__udivmoddi4+0x26a>
  40234c:	4611      	mov	r1, r2
  40234e:	e795      	b.n	40227c <__udivmoddi4+0x1e8>
  402350:	4681      	mov	r9, r0
  402352:	e7c0      	b.n	4022d6 <__udivmoddi4+0x242>
  402354:	468a      	mov	sl, r1
  402356:	e77c      	b.n	402252 <__udivmoddi4+0x1be>
  402358:	3b02      	subs	r3, #2
  40235a:	443c      	add	r4, r7
  40235c:	e748      	b.n	4021f0 <__udivmoddi4+0x15c>
  40235e:	4608      	mov	r0, r1
  402360:	e70a      	b.n	402178 <__udivmoddi4+0xe4>
  402362:	3802      	subs	r0, #2
  402364:	443e      	add	r6, r7
  402366:	e72f      	b.n	4021c8 <__udivmoddi4+0x134>
  402368:	45c2      	cmp	sl, r8
  40236a:	d3e7      	bcc.n	40233c <__udivmoddi4+0x2a8>
  40236c:	463e      	mov	r6, r7
  40236e:	e7d1      	b.n	402314 <__udivmoddi4+0x280>
  402370:	4629      	mov	r1, r5
  402372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402376:	bf00      	nop

00402378 <__aeabi_idiv0>:
  402378:	4770      	bx	lr
  40237a:	bf00      	nop

0040237c <__libc_init_array>:
  40237c:	b570      	push	{r4, r5, r6, lr}
  40237e:	4e0f      	ldr	r6, [pc, #60]	; (4023bc <__libc_init_array+0x40>)
  402380:	4d0f      	ldr	r5, [pc, #60]	; (4023c0 <__libc_init_array+0x44>)
  402382:	1b76      	subs	r6, r6, r5
  402384:	10b6      	asrs	r6, r6, #2
  402386:	bf18      	it	ne
  402388:	2400      	movne	r4, #0
  40238a:	d005      	beq.n	402398 <__libc_init_array+0x1c>
  40238c:	3401      	adds	r4, #1
  40238e:	f855 3b04 	ldr.w	r3, [r5], #4
  402392:	4798      	blx	r3
  402394:	42a6      	cmp	r6, r4
  402396:	d1f9      	bne.n	40238c <__libc_init_array+0x10>
  402398:	4e0a      	ldr	r6, [pc, #40]	; (4023c4 <__libc_init_array+0x48>)
  40239a:	4d0b      	ldr	r5, [pc, #44]	; (4023c8 <__libc_init_array+0x4c>)
  40239c:	1b76      	subs	r6, r6, r5
  40239e:	f004 fd5d 	bl	406e5c <_init>
  4023a2:	10b6      	asrs	r6, r6, #2
  4023a4:	bf18      	it	ne
  4023a6:	2400      	movne	r4, #0
  4023a8:	d006      	beq.n	4023b8 <__libc_init_array+0x3c>
  4023aa:	3401      	adds	r4, #1
  4023ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4023b0:	4798      	blx	r3
  4023b2:	42a6      	cmp	r6, r4
  4023b4:	d1f9      	bne.n	4023aa <__libc_init_array+0x2e>
  4023b6:	bd70      	pop	{r4, r5, r6, pc}
  4023b8:	bd70      	pop	{r4, r5, r6, pc}
  4023ba:	bf00      	nop
  4023bc:	00406e68 	.word	0x00406e68
  4023c0:	00406e68 	.word	0x00406e68
  4023c4:	00406e70 	.word	0x00406e70
  4023c8:	00406e68 	.word	0x00406e68

004023cc <memset>:
  4023cc:	b470      	push	{r4, r5, r6}
  4023ce:	0784      	lsls	r4, r0, #30
  4023d0:	d046      	beq.n	402460 <memset+0x94>
  4023d2:	1e54      	subs	r4, r2, #1
  4023d4:	2a00      	cmp	r2, #0
  4023d6:	d041      	beq.n	40245c <memset+0x90>
  4023d8:	b2cd      	uxtb	r5, r1
  4023da:	4603      	mov	r3, r0
  4023dc:	e002      	b.n	4023e4 <memset+0x18>
  4023de:	1e62      	subs	r2, r4, #1
  4023e0:	b3e4      	cbz	r4, 40245c <memset+0x90>
  4023e2:	4614      	mov	r4, r2
  4023e4:	f803 5b01 	strb.w	r5, [r3], #1
  4023e8:	079a      	lsls	r2, r3, #30
  4023ea:	d1f8      	bne.n	4023de <memset+0x12>
  4023ec:	2c03      	cmp	r4, #3
  4023ee:	d92e      	bls.n	40244e <memset+0x82>
  4023f0:	b2cd      	uxtb	r5, r1
  4023f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4023f6:	2c0f      	cmp	r4, #15
  4023f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4023fc:	d919      	bls.n	402432 <memset+0x66>
  4023fe:	f103 0210 	add.w	r2, r3, #16
  402402:	4626      	mov	r6, r4
  402404:	3e10      	subs	r6, #16
  402406:	2e0f      	cmp	r6, #15
  402408:	f842 5c10 	str.w	r5, [r2, #-16]
  40240c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402410:	f842 5c08 	str.w	r5, [r2, #-8]
  402414:	f842 5c04 	str.w	r5, [r2, #-4]
  402418:	f102 0210 	add.w	r2, r2, #16
  40241c:	d8f2      	bhi.n	402404 <memset+0x38>
  40241e:	f1a4 0210 	sub.w	r2, r4, #16
  402422:	f022 020f 	bic.w	r2, r2, #15
  402426:	f004 040f 	and.w	r4, r4, #15
  40242a:	3210      	adds	r2, #16
  40242c:	2c03      	cmp	r4, #3
  40242e:	4413      	add	r3, r2
  402430:	d90d      	bls.n	40244e <memset+0x82>
  402432:	461e      	mov	r6, r3
  402434:	4622      	mov	r2, r4
  402436:	3a04      	subs	r2, #4
  402438:	2a03      	cmp	r2, #3
  40243a:	f846 5b04 	str.w	r5, [r6], #4
  40243e:	d8fa      	bhi.n	402436 <memset+0x6a>
  402440:	1f22      	subs	r2, r4, #4
  402442:	f022 0203 	bic.w	r2, r2, #3
  402446:	3204      	adds	r2, #4
  402448:	4413      	add	r3, r2
  40244a:	f004 0403 	and.w	r4, r4, #3
  40244e:	b12c      	cbz	r4, 40245c <memset+0x90>
  402450:	b2c9      	uxtb	r1, r1
  402452:	441c      	add	r4, r3
  402454:	f803 1b01 	strb.w	r1, [r3], #1
  402458:	42a3      	cmp	r3, r4
  40245a:	d1fb      	bne.n	402454 <memset+0x88>
  40245c:	bc70      	pop	{r4, r5, r6}
  40245e:	4770      	bx	lr
  402460:	4614      	mov	r4, r2
  402462:	4603      	mov	r3, r0
  402464:	e7c2      	b.n	4023ec <memset+0x20>
  402466:	bf00      	nop

00402468 <sprintf>:
  402468:	b40e      	push	{r1, r2, r3}
  40246a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40246c:	b09c      	sub	sp, #112	; 0x70
  40246e:	ab21      	add	r3, sp, #132	; 0x84
  402470:	490f      	ldr	r1, [pc, #60]	; (4024b0 <sprintf+0x48>)
  402472:	f853 2b04 	ldr.w	r2, [r3], #4
  402476:	9301      	str	r3, [sp, #4]
  402478:	4605      	mov	r5, r0
  40247a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40247e:	6808      	ldr	r0, [r1, #0]
  402480:	9502      	str	r5, [sp, #8]
  402482:	f44f 7702 	mov.w	r7, #520	; 0x208
  402486:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40248a:	a902      	add	r1, sp, #8
  40248c:	9506      	str	r5, [sp, #24]
  40248e:	f8ad 7014 	strh.w	r7, [sp, #20]
  402492:	9404      	str	r4, [sp, #16]
  402494:	9407      	str	r4, [sp, #28]
  402496:	f8ad 6016 	strh.w	r6, [sp, #22]
  40249a:	f000 f80b 	bl	4024b4 <_svfprintf_r>
  40249e:	9b02      	ldr	r3, [sp, #8]
  4024a0:	2200      	movs	r2, #0
  4024a2:	701a      	strb	r2, [r3, #0]
  4024a4:	b01c      	add	sp, #112	; 0x70
  4024a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4024aa:	b003      	add	sp, #12
  4024ac:	4770      	bx	lr
  4024ae:	bf00      	nop
  4024b0:	20400440 	.word	0x20400440

004024b4 <_svfprintf_r>:
  4024b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024b8:	b0c1      	sub	sp, #260	; 0x104
  4024ba:	460c      	mov	r4, r1
  4024bc:	9109      	str	r1, [sp, #36]	; 0x24
  4024be:	4615      	mov	r5, r2
  4024c0:	930e      	str	r3, [sp, #56]	; 0x38
  4024c2:	900a      	str	r0, [sp, #40]	; 0x28
  4024c4:	f002 fb28 	bl	404b18 <_localeconv_r>
  4024c8:	6803      	ldr	r3, [r0, #0]
  4024ca:	9317      	str	r3, [sp, #92]	; 0x5c
  4024cc:	4618      	mov	r0, r3
  4024ce:	f003 f9f7 	bl	4058c0 <strlen>
  4024d2:	89a3      	ldrh	r3, [r4, #12]
  4024d4:	9016      	str	r0, [sp, #88]	; 0x58
  4024d6:	061e      	lsls	r6, r3, #24
  4024d8:	d503      	bpl.n	4024e2 <_svfprintf_r+0x2e>
  4024da:	6923      	ldr	r3, [r4, #16]
  4024dc:	2b00      	cmp	r3, #0
  4024de:	f001 8119 	beq.w	403714 <_svfprintf_r+0x1260>
  4024e2:	2300      	movs	r3, #0
  4024e4:	461a      	mov	r2, r3
  4024e6:	9312      	str	r3, [sp, #72]	; 0x48
  4024e8:	9325      	str	r3, [sp, #148]	; 0x94
  4024ea:	9324      	str	r3, [sp, #144]	; 0x90
  4024ec:	9319      	str	r3, [sp, #100]	; 0x64
  4024ee:	930b      	str	r3, [sp, #44]	; 0x2c
  4024f0:	f8df a464 	ldr.w	sl, [pc, #1124]	; 402958 <_svfprintf_r+0x4a4>
  4024f4:	9214      	str	r2, [sp, #80]	; 0x50
  4024f6:	ab30      	add	r3, sp, #192	; 0xc0
  4024f8:	9323      	str	r3, [sp, #140]	; 0x8c
  4024fa:	4699      	mov	r9, r3
  4024fc:	9215      	str	r2, [sp, #84]	; 0x54
  4024fe:	46a8      	mov	r8, r5
  402500:	f898 3000 	ldrb.w	r3, [r8]
  402504:	4644      	mov	r4, r8
  402506:	b1eb      	cbz	r3, 402544 <_svfprintf_r+0x90>
  402508:	2b25      	cmp	r3, #37	; 0x25
  40250a:	d102      	bne.n	402512 <_svfprintf_r+0x5e>
  40250c:	e01a      	b.n	402544 <_svfprintf_r+0x90>
  40250e:	2b25      	cmp	r3, #37	; 0x25
  402510:	d003      	beq.n	40251a <_svfprintf_r+0x66>
  402512:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402516:	2b00      	cmp	r3, #0
  402518:	d1f9      	bne.n	40250e <_svfprintf_r+0x5a>
  40251a:	ebc8 0504 	rsb	r5, r8, r4
  40251e:	b18d      	cbz	r5, 402544 <_svfprintf_r+0x90>
  402520:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402522:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402524:	f8c9 8000 	str.w	r8, [r9]
  402528:	3301      	adds	r3, #1
  40252a:	442a      	add	r2, r5
  40252c:	2b07      	cmp	r3, #7
  40252e:	f8c9 5004 	str.w	r5, [r9, #4]
  402532:	9225      	str	r2, [sp, #148]	; 0x94
  402534:	9324      	str	r3, [sp, #144]	; 0x90
  402536:	f300 80a6 	bgt.w	402686 <_svfprintf_r+0x1d2>
  40253a:	f109 0908 	add.w	r9, r9, #8
  40253e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402540:	442b      	add	r3, r5
  402542:	930b      	str	r3, [sp, #44]	; 0x2c
  402544:	7823      	ldrb	r3, [r4, #0]
  402546:	2b00      	cmp	r3, #0
  402548:	f000 80a6 	beq.w	402698 <_svfprintf_r+0x1e4>
  40254c:	2300      	movs	r3, #0
  40254e:	461a      	mov	r2, r3
  402550:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402554:	4619      	mov	r1, r3
  402556:	930c      	str	r3, [sp, #48]	; 0x30
  402558:	9307      	str	r3, [sp, #28]
  40255a:	f04f 3bff 	mov.w	fp, #4294967295
  40255e:	7863      	ldrb	r3, [r4, #1]
  402560:	f104 0801 	add.w	r8, r4, #1
  402564:	465d      	mov	r5, fp
  402566:	f108 0801 	add.w	r8, r8, #1
  40256a:	f1a3 0020 	sub.w	r0, r3, #32
  40256e:	2858      	cmp	r0, #88	; 0x58
  402570:	f200 8425 	bhi.w	402dbe <_svfprintf_r+0x90a>
  402574:	e8df f010 	tbh	[pc, r0, lsl #1]
  402578:	04230388 	.word	0x04230388
  40257c:	03900423 	.word	0x03900423
  402580:	04230423 	.word	0x04230423
  402584:	04230423 	.word	0x04230423
  402588:	04230423 	.word	0x04230423
  40258c:	03a50397 	.word	0x03a50397
  402590:	005d0423 	.word	0x005d0423
  402594:	042300e2 	.word	0x042300e2
  402598:	010500fe 	.word	0x010500fe
  40259c:	01050105 	.word	0x01050105
  4025a0:	01050105 	.word	0x01050105
  4025a4:	01050105 	.word	0x01050105
  4025a8:	01050105 	.word	0x01050105
  4025ac:	04230423 	.word	0x04230423
  4025b0:	04230423 	.word	0x04230423
  4025b4:	04230423 	.word	0x04230423
  4025b8:	04230423 	.word	0x04230423
  4025bc:	04230423 	.word	0x04230423
  4025c0:	02810115 	.word	0x02810115
  4025c4:	02810423 	.word	0x02810423
  4025c8:	04230423 	.word	0x04230423
  4025cc:	04230423 	.word	0x04230423
  4025d0:	042302c6 	.word	0x042302c6
  4025d4:	02cd0423 	.word	0x02cd0423
  4025d8:	04230423 	.word	0x04230423
  4025dc:	04230423 	.word	0x04230423
  4025e0:	02f70423 	.word	0x02f70423
  4025e4:	04230423 	.word	0x04230423
  4025e8:	04230325 	.word	0x04230325
  4025ec:	04230423 	.word	0x04230423
  4025f0:	04230423 	.word	0x04230423
  4025f4:	04230423 	.word	0x04230423
  4025f8:	04230423 	.word	0x04230423
  4025fc:	03660423 	.word	0x03660423
  402600:	02810379 	.word	0x02810379
  402604:	02810281 	.word	0x02810281
  402608:	03790381 	.word	0x03790381
  40260c:	04230423 	.word	0x04230423
  402610:	042303d1 	.word	0x042303d1
  402614:	00a303db 	.word	0x00a303db
  402618:	03ee0064 	.word	0x03ee0064
  40261c:	03f50423 	.word	0x03f50423
  402620:	03aa0423 	.word	0x03aa0423
  402624:	04230423 	.word	0x04230423
  402628:	03bc      	.short	0x03bc
  40262a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40262c:	930e      	str	r3, [sp, #56]	; 0x38
  40262e:	4240      	negs	r0, r0
  402630:	900c      	str	r0, [sp, #48]	; 0x30
  402632:	9b07      	ldr	r3, [sp, #28]
  402634:	f043 0304 	orr.w	r3, r3, #4
  402638:	9307      	str	r3, [sp, #28]
  40263a:	f898 3000 	ldrb.w	r3, [r8]
  40263e:	e792      	b.n	402566 <_svfprintf_r+0xb2>
  402640:	980e      	ldr	r0, [sp, #56]	; 0x38
  402642:	46ab      	mov	fp, r5
  402644:	2100      	movs	r1, #0
  402646:	6804      	ldr	r4, [r0, #0]
  402648:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40264c:	1d07      	adds	r7, r0, #4
  40264e:	9807      	ldr	r0, [sp, #28]
  402650:	2330      	movs	r3, #48	; 0x30
  402652:	2278      	movs	r2, #120	; 0x78
  402654:	458b      	cmp	fp, r1
  402656:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40265a:	f04f 0500 	mov.w	r5, #0
  40265e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  402662:	f040 0302 	orr.w	r3, r0, #2
  402666:	f2c0 83c7 	blt.w	402df8 <_svfprintf_r+0x944>
  40266a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40266e:	f043 0302 	orr.w	r3, r3, #2
  402672:	9307      	str	r3, [sp, #28]
  402674:	ea54 0305 	orrs.w	r3, r4, r5
  402678:	970e      	str	r7, [sp, #56]	; 0x38
  40267a:	f000 8393 	beq.w	402da4 <_svfprintf_r+0x8f0>
  40267e:	460f      	mov	r7, r1
  402680:	9211      	str	r2, [sp, #68]	; 0x44
  402682:	48b3      	ldr	r0, [pc, #716]	; (402950 <_svfprintf_r+0x49c>)
  402684:	e2ce      	b.n	402c24 <_svfprintf_r+0x770>
  402686:	aa23      	add	r2, sp, #140	; 0x8c
  402688:	9909      	ldr	r1, [sp, #36]	; 0x24
  40268a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40268c:	f003 f986 	bl	40599c <__ssprint_r>
  402690:	b948      	cbnz	r0, 4026a6 <_svfprintf_r+0x1f2>
  402692:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402696:	e752      	b.n	40253e <_svfprintf_r+0x8a>
  402698:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40269a:	b123      	cbz	r3, 4026a6 <_svfprintf_r+0x1f2>
  40269c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40269e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4026a0:	aa23      	add	r2, sp, #140	; 0x8c
  4026a2:	f003 f97b 	bl	40599c <__ssprint_r>
  4026a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4026a8:	899b      	ldrh	r3, [r3, #12]
  4026aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4026ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4026b0:	bf18      	it	ne
  4026b2:	f04f 33ff 	movne.w	r3, #4294967295
  4026b6:	4618      	mov	r0, r3
  4026b8:	b041      	add	sp, #260	; 0x104
  4026ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026be:	9311      	str	r3, [sp, #68]	; 0x44
  4026c0:	46ab      	mov	fp, r5
  4026c2:	2a00      	cmp	r2, #0
  4026c4:	f041 8223 	bne.w	403b0e <_svfprintf_r+0x165a>
  4026c8:	9a07      	ldr	r2, [sp, #28]
  4026ca:	f012 0320 	ands.w	r3, r2, #32
  4026ce:	f000 822e 	beq.w	402b2e <_svfprintf_r+0x67a>
  4026d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4026d4:	3707      	adds	r7, #7
  4026d6:	f027 0307 	bic.w	r3, r7, #7
  4026da:	2700      	movs	r7, #0
  4026dc:	f103 0108 	add.w	r1, r3, #8
  4026e0:	45bb      	cmp	fp, r7
  4026e2:	910e      	str	r1, [sp, #56]	; 0x38
  4026e4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4026e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4026ec:	f2c0 8752 	blt.w	403594 <_svfprintf_r+0x10e0>
  4026f0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4026f4:	9307      	str	r3, [sp, #28]
  4026f6:	ea54 0305 	orrs.w	r3, r4, r5
  4026fa:	f000 8375 	beq.w	402de8 <_svfprintf_r+0x934>
  4026fe:	ae30      	add	r6, sp, #192	; 0xc0
  402700:	08e2      	lsrs	r2, r4, #3
  402702:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402706:	08e9      	lsrs	r1, r5, #3
  402708:	f004 0307 	and.w	r3, r4, #7
  40270c:	460d      	mov	r5, r1
  40270e:	4614      	mov	r4, r2
  402710:	3330      	adds	r3, #48	; 0x30
  402712:	ea54 0205 	orrs.w	r2, r4, r5
  402716:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40271a:	d1f1      	bne.n	402700 <_svfprintf_r+0x24c>
  40271c:	9a07      	ldr	r2, [sp, #28]
  40271e:	07d1      	lsls	r1, r2, #31
  402720:	f140 8084 	bpl.w	40282c <_svfprintf_r+0x378>
  402724:	2b30      	cmp	r3, #48	; 0x30
  402726:	f000 8081 	beq.w	40282c <_svfprintf_r+0x378>
  40272a:	2230      	movs	r2, #48	; 0x30
  40272c:	1e73      	subs	r3, r6, #1
  40272e:	f806 2c01 	strb.w	r2, [r6, #-1]
  402732:	aa30      	add	r2, sp, #192	; 0xc0
  402734:	1ad2      	subs	r2, r2, r3
  402736:	920d      	str	r2, [sp, #52]	; 0x34
  402738:	461e      	mov	r6, r3
  40273a:	e07a      	b.n	402832 <_svfprintf_r+0x37e>
  40273c:	f898 3000 	ldrb.w	r3, [r8]
  402740:	2b2a      	cmp	r3, #42	; 0x2a
  402742:	f108 0401 	add.w	r4, r8, #1
  402746:	f001 81b1 	beq.w	403aac <_svfprintf_r+0x15f8>
  40274a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40274e:	2809      	cmp	r0, #9
  402750:	bf98      	it	ls
  402752:	2500      	movls	r5, #0
  402754:	f201 8164 	bhi.w	403a20 <_svfprintf_r+0x156c>
  402758:	f814 3b01 	ldrb.w	r3, [r4], #1
  40275c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402760:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  402764:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402768:	2809      	cmp	r0, #9
  40276a:	d9f5      	bls.n	402758 <_svfprintf_r+0x2a4>
  40276c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  402770:	46a0      	mov	r8, r4
  402772:	e6fa      	b.n	40256a <_svfprintf_r+0xb6>
  402774:	9b07      	ldr	r3, [sp, #28]
  402776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40277a:	9307      	str	r3, [sp, #28]
  40277c:	f898 3000 	ldrb.w	r3, [r8]
  402780:	e6f1      	b.n	402566 <_svfprintf_r+0xb2>
  402782:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402786:	2300      	movs	r3, #0
  402788:	461c      	mov	r4, r3
  40278a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40278e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402792:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402796:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40279a:	2809      	cmp	r0, #9
  40279c:	d9f5      	bls.n	40278a <_svfprintf_r+0x2d6>
  40279e:	940c      	str	r4, [sp, #48]	; 0x30
  4027a0:	e6e3      	b.n	40256a <_svfprintf_r+0xb6>
  4027a2:	9311      	str	r3, [sp, #68]	; 0x44
  4027a4:	46ab      	mov	fp, r5
  4027a6:	2a00      	cmp	r2, #0
  4027a8:	f041 81c9 	bne.w	403b3e <_svfprintf_r+0x168a>
  4027ac:	9b07      	ldr	r3, [sp, #28]
  4027ae:	f043 0310 	orr.w	r3, r3, #16
  4027b2:	9307      	str	r3, [sp, #28]
  4027b4:	9b07      	ldr	r3, [sp, #28]
  4027b6:	0698      	lsls	r0, r3, #26
  4027b8:	f140 8530 	bpl.w	40321c <_svfprintf_r+0xd68>
  4027bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4027be:	3707      	adds	r7, #7
  4027c0:	f027 0707 	bic.w	r7, r7, #7
  4027c4:	e9d7 2300 	ldrd	r2, r3, [r7]
  4027c8:	f107 0108 	add.w	r1, r7, #8
  4027cc:	910e      	str	r1, [sp, #56]	; 0x38
  4027ce:	4614      	mov	r4, r2
  4027d0:	461d      	mov	r5, r3
  4027d2:	2a00      	cmp	r2, #0
  4027d4:	f173 0300 	sbcs.w	r3, r3, #0
  4027d8:	f2c0 855b 	blt.w	403292 <_svfprintf_r+0xdde>
  4027dc:	f1bb 0f00 	cmp.w	fp, #0
  4027e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4027e4:	f2c0 8538 	blt.w	403258 <_svfprintf_r+0xda4>
  4027e8:	9b07      	ldr	r3, [sp, #28]
  4027ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4027ee:	9307      	str	r3, [sp, #28]
  4027f0:	ea54 0305 	orrs.w	r3, r4, r5
  4027f4:	f000 81db 	beq.w	402bae <_svfprintf_r+0x6fa>
  4027f8:	2d00      	cmp	r5, #0
  4027fa:	bf08      	it	eq
  4027fc:	2c0a      	cmpeq	r4, #10
  4027fe:	f0c0 81db 	bcc.w	402bb8 <_svfprintf_r+0x704>
  402802:	ae30      	add	r6, sp, #192	; 0xc0
  402804:	4620      	mov	r0, r4
  402806:	4629      	mov	r1, r5
  402808:	220a      	movs	r2, #10
  40280a:	2300      	movs	r3, #0
  40280c:	f7ff fc2a 	bl	402064 <__aeabi_uldivmod>
  402810:	3230      	adds	r2, #48	; 0x30
  402812:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402816:	4620      	mov	r0, r4
  402818:	4629      	mov	r1, r5
  40281a:	2300      	movs	r3, #0
  40281c:	220a      	movs	r2, #10
  40281e:	f7ff fc21 	bl	402064 <__aeabi_uldivmod>
  402822:	4604      	mov	r4, r0
  402824:	460d      	mov	r5, r1
  402826:	ea54 0305 	orrs.w	r3, r4, r5
  40282a:	d1eb      	bne.n	402804 <_svfprintf_r+0x350>
  40282c:	ab30      	add	r3, sp, #192	; 0xc0
  40282e:	1b9b      	subs	r3, r3, r6
  402830:	930d      	str	r3, [sp, #52]	; 0x34
  402832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402834:	455b      	cmp	r3, fp
  402836:	bfb8      	it	lt
  402838:	465b      	movlt	r3, fp
  40283a:	9308      	str	r3, [sp, #32]
  40283c:	2300      	movs	r3, #0
  40283e:	9313      	str	r3, [sp, #76]	; 0x4c
  402840:	b117      	cbz	r7, 402848 <_svfprintf_r+0x394>
  402842:	9b08      	ldr	r3, [sp, #32]
  402844:	3301      	adds	r3, #1
  402846:	9308      	str	r3, [sp, #32]
  402848:	9b07      	ldr	r3, [sp, #28]
  40284a:	f013 0302 	ands.w	r3, r3, #2
  40284e:	930f      	str	r3, [sp, #60]	; 0x3c
  402850:	d002      	beq.n	402858 <_svfprintf_r+0x3a4>
  402852:	9b08      	ldr	r3, [sp, #32]
  402854:	3302      	adds	r3, #2
  402856:	9308      	str	r3, [sp, #32]
  402858:	9b07      	ldr	r3, [sp, #28]
  40285a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40285e:	9310      	str	r3, [sp, #64]	; 0x40
  402860:	f040 82d7 	bne.w	402e12 <_svfprintf_r+0x95e>
  402864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402866:	9a08      	ldr	r2, [sp, #32]
  402868:	1a9d      	subs	r5, r3, r2
  40286a:	2d00      	cmp	r5, #0
  40286c:	f340 82d1 	ble.w	402e12 <_svfprintf_r+0x95e>
  402870:	2d10      	cmp	r5, #16
  402872:	9925      	ldr	r1, [sp, #148]	; 0x94
  402874:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402876:	4f37      	ldr	r7, [pc, #220]	; (402954 <_svfprintf_r+0x4a0>)
  402878:	dd27      	ble.n	4028ca <_svfprintf_r+0x416>
  40287a:	9618      	str	r6, [sp, #96]	; 0x60
  40287c:	4648      	mov	r0, r9
  40287e:	2410      	movs	r4, #16
  402880:	46b9      	mov	r9, r7
  402882:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402884:	462f      	mov	r7, r5
  402886:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402888:	e004      	b.n	402894 <_svfprintf_r+0x3e0>
  40288a:	3f10      	subs	r7, #16
  40288c:	2f10      	cmp	r7, #16
  40288e:	f100 0008 	add.w	r0, r0, #8
  402892:	dd16      	ble.n	4028c2 <_svfprintf_r+0x40e>
  402894:	3201      	adds	r2, #1
  402896:	4b2f      	ldr	r3, [pc, #188]	; (402954 <_svfprintf_r+0x4a0>)
  402898:	9224      	str	r2, [sp, #144]	; 0x90
  40289a:	3110      	adds	r1, #16
  40289c:	2a07      	cmp	r2, #7
  40289e:	9125      	str	r1, [sp, #148]	; 0x94
  4028a0:	e880 0018 	stmia.w	r0, {r3, r4}
  4028a4:	ddf1      	ble.n	40288a <_svfprintf_r+0x3d6>
  4028a6:	aa23      	add	r2, sp, #140	; 0x8c
  4028a8:	4631      	mov	r1, r6
  4028aa:	4628      	mov	r0, r5
  4028ac:	f003 f876 	bl	40599c <__ssprint_r>
  4028b0:	2800      	cmp	r0, #0
  4028b2:	f47f aef8 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4028b6:	3f10      	subs	r7, #16
  4028b8:	2f10      	cmp	r7, #16
  4028ba:	9925      	ldr	r1, [sp, #148]	; 0x94
  4028bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4028be:	a830      	add	r0, sp, #192	; 0xc0
  4028c0:	dce8      	bgt.n	402894 <_svfprintf_r+0x3e0>
  4028c2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4028c4:	463d      	mov	r5, r7
  4028c6:	464f      	mov	r7, r9
  4028c8:	4681      	mov	r9, r0
  4028ca:	3201      	adds	r2, #1
  4028cc:	186c      	adds	r4, r5, r1
  4028ce:	2a07      	cmp	r2, #7
  4028d0:	9425      	str	r4, [sp, #148]	; 0x94
  4028d2:	9224      	str	r2, [sp, #144]	; 0x90
  4028d4:	f8c9 7000 	str.w	r7, [r9]
  4028d8:	f8c9 5004 	str.w	r5, [r9, #4]
  4028dc:	f300 8428 	bgt.w	403130 <_svfprintf_r+0xc7c>
  4028e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4028e4:	f109 0908 	add.w	r9, r9, #8
  4028e8:	b177      	cbz	r7, 402908 <_svfprintf_r+0x454>
  4028ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4028ec:	3301      	adds	r3, #1
  4028ee:	3401      	adds	r4, #1
  4028f0:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4028f4:	2201      	movs	r2, #1
  4028f6:	2b07      	cmp	r3, #7
  4028f8:	9425      	str	r4, [sp, #148]	; 0x94
  4028fa:	9324      	str	r3, [sp, #144]	; 0x90
  4028fc:	e889 0006 	stmia.w	r9, {r1, r2}
  402900:	f300 83a0 	bgt.w	403044 <_svfprintf_r+0xb90>
  402904:	f109 0908 	add.w	r9, r9, #8
  402908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40290a:	b16b      	cbz	r3, 402928 <_svfprintf_r+0x474>
  40290c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40290e:	3301      	adds	r3, #1
  402910:	3402      	adds	r4, #2
  402912:	a91c      	add	r1, sp, #112	; 0x70
  402914:	2202      	movs	r2, #2
  402916:	2b07      	cmp	r3, #7
  402918:	9425      	str	r4, [sp, #148]	; 0x94
  40291a:	9324      	str	r3, [sp, #144]	; 0x90
  40291c:	e889 0006 	stmia.w	r9, {r1, r2}
  402920:	f300 839c 	bgt.w	40305c <_svfprintf_r+0xba8>
  402924:	f109 0908 	add.w	r9, r9, #8
  402928:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40292a:	2b80      	cmp	r3, #128	; 0x80
  40292c:	f000 82d5 	beq.w	402eda <_svfprintf_r+0xa26>
  402930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402932:	ebc3 070b 	rsb	r7, r3, fp
  402936:	2f00      	cmp	r7, #0
  402938:	dd39      	ble.n	4029ae <_svfprintf_r+0x4fa>
  40293a:	4a07      	ldr	r2, [pc, #28]	; (402958 <_svfprintf_r+0x4a4>)
  40293c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40293e:	920f      	str	r2, [sp, #60]	; 0x3c
  402940:	2f10      	cmp	r7, #16
  402942:	dd28      	ble.n	402996 <_svfprintf_r+0x4e2>
  402944:	4622      	mov	r2, r4
  402946:	f04f 0b10 	mov.w	fp, #16
  40294a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40294c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40294e:	e00a      	b.n	402966 <_svfprintf_r+0x4b2>
  402950:	00406d10 	.word	0x00406d10
  402954:	00406d30 	.word	0x00406d30
  402958:	00406cdc 	.word	0x00406cdc
  40295c:	3f10      	subs	r7, #16
  40295e:	2f10      	cmp	r7, #16
  402960:	f109 0908 	add.w	r9, r9, #8
  402964:	dd16      	ble.n	402994 <_svfprintf_r+0x4e0>
  402966:	3301      	adds	r3, #1
  402968:	3210      	adds	r2, #16
  40296a:	2b07      	cmp	r3, #7
  40296c:	9225      	str	r2, [sp, #148]	; 0x94
  40296e:	9324      	str	r3, [sp, #144]	; 0x90
  402970:	e889 0c00 	stmia.w	r9, {sl, fp}
  402974:	ddf2      	ble.n	40295c <_svfprintf_r+0x4a8>
  402976:	aa23      	add	r2, sp, #140	; 0x8c
  402978:	4621      	mov	r1, r4
  40297a:	4628      	mov	r0, r5
  40297c:	f003 f80e 	bl	40599c <__ssprint_r>
  402980:	2800      	cmp	r0, #0
  402982:	f47f ae90 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  402986:	3f10      	subs	r7, #16
  402988:	2f10      	cmp	r7, #16
  40298a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40298c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40298e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402992:	dce8      	bgt.n	402966 <_svfprintf_r+0x4b2>
  402994:	4614      	mov	r4, r2
  402996:	3301      	adds	r3, #1
  402998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40299a:	9324      	str	r3, [sp, #144]	; 0x90
  40299c:	443c      	add	r4, r7
  40299e:	2b07      	cmp	r3, #7
  4029a0:	9425      	str	r4, [sp, #148]	; 0x94
  4029a2:	e889 0084 	stmia.w	r9, {r2, r7}
  4029a6:	f300 8341 	bgt.w	40302c <_svfprintf_r+0xb78>
  4029aa:	f109 0908 	add.w	r9, r9, #8
  4029ae:	9b07      	ldr	r3, [sp, #28]
  4029b0:	05da      	lsls	r2, r3, #23
  4029b2:	f100 8230 	bmi.w	402e16 <_svfprintf_r+0x962>
  4029b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4029b8:	990d      	ldr	r1, [sp, #52]	; 0x34
  4029ba:	f8c9 6000 	str.w	r6, [r9]
  4029be:	3301      	adds	r3, #1
  4029c0:	440c      	add	r4, r1
  4029c2:	2b07      	cmp	r3, #7
  4029c4:	9425      	str	r4, [sp, #148]	; 0x94
  4029c6:	f8c9 1004 	str.w	r1, [r9, #4]
  4029ca:	9324      	str	r3, [sp, #144]	; 0x90
  4029cc:	f300 8318 	bgt.w	403000 <_svfprintf_r+0xb4c>
  4029d0:	f109 0908 	add.w	r9, r9, #8
  4029d4:	9b07      	ldr	r3, [sp, #28]
  4029d6:	0759      	lsls	r1, r3, #29
  4029d8:	d53f      	bpl.n	402a5a <_svfprintf_r+0x5a6>
  4029da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4029dc:	9a08      	ldr	r2, [sp, #32]
  4029de:	1a9d      	subs	r5, r3, r2
  4029e0:	2d00      	cmp	r5, #0
  4029e2:	dd3a      	ble.n	402a5a <_svfprintf_r+0x5a6>
  4029e4:	2d10      	cmp	r5, #16
  4029e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4029e8:	4fbc      	ldr	r7, [pc, #752]	; (402cdc <_svfprintf_r+0x828>)
  4029ea:	dd23      	ble.n	402a34 <_svfprintf_r+0x580>
  4029ec:	4622      	mov	r2, r4
  4029ee:	2610      	movs	r6, #16
  4029f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4029f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4029f6:	e004      	b.n	402a02 <_svfprintf_r+0x54e>
  4029f8:	3d10      	subs	r5, #16
  4029fa:	2d10      	cmp	r5, #16
  4029fc:	f109 0908 	add.w	r9, r9, #8
  402a00:	dd17      	ble.n	402a32 <_svfprintf_r+0x57e>
  402a02:	3301      	adds	r3, #1
  402a04:	49b5      	ldr	r1, [pc, #724]	; (402cdc <_svfprintf_r+0x828>)
  402a06:	9324      	str	r3, [sp, #144]	; 0x90
  402a08:	3210      	adds	r2, #16
  402a0a:	2b07      	cmp	r3, #7
  402a0c:	9225      	str	r2, [sp, #148]	; 0x94
  402a0e:	e889 0042 	stmia.w	r9, {r1, r6}
  402a12:	ddf1      	ble.n	4029f8 <_svfprintf_r+0x544>
  402a14:	aa23      	add	r2, sp, #140	; 0x8c
  402a16:	4621      	mov	r1, r4
  402a18:	4658      	mov	r0, fp
  402a1a:	f002 ffbf 	bl	40599c <__ssprint_r>
  402a1e:	2800      	cmp	r0, #0
  402a20:	f47f ae41 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  402a24:	3d10      	subs	r5, #16
  402a26:	2d10      	cmp	r5, #16
  402a28:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402a2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402a2c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402a30:	dce7      	bgt.n	402a02 <_svfprintf_r+0x54e>
  402a32:	4614      	mov	r4, r2
  402a34:	3301      	adds	r3, #1
  402a36:	442c      	add	r4, r5
  402a38:	2b07      	cmp	r3, #7
  402a3a:	9425      	str	r4, [sp, #148]	; 0x94
  402a3c:	9324      	str	r3, [sp, #144]	; 0x90
  402a3e:	f8c9 7000 	str.w	r7, [r9]
  402a42:	f8c9 5004 	str.w	r5, [r9, #4]
  402a46:	dd08      	ble.n	402a5a <_svfprintf_r+0x5a6>
  402a48:	aa23      	add	r2, sp, #140	; 0x8c
  402a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
  402a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
  402a4e:	f002 ffa5 	bl	40599c <__ssprint_r>
  402a52:	2800      	cmp	r0, #0
  402a54:	f47f ae27 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  402a58:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402a5e:	9908      	ldr	r1, [sp, #32]
  402a60:	428a      	cmp	r2, r1
  402a62:	bfac      	ite	ge
  402a64:	189b      	addge	r3, r3, r2
  402a66:	185b      	addlt	r3, r3, r1
  402a68:	930b      	str	r3, [sp, #44]	; 0x2c
  402a6a:	2c00      	cmp	r4, #0
  402a6c:	f040 82d4 	bne.w	403018 <_svfprintf_r+0xb64>
  402a70:	2300      	movs	r3, #0
  402a72:	9324      	str	r3, [sp, #144]	; 0x90
  402a74:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402a78:	e542      	b.n	402500 <_svfprintf_r+0x4c>
  402a7a:	9311      	str	r3, [sp, #68]	; 0x44
  402a7c:	46ab      	mov	fp, r5
  402a7e:	2a00      	cmp	r2, #0
  402a80:	f041 8059 	bne.w	403b36 <_svfprintf_r+0x1682>
  402a84:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402a86:	3707      	adds	r7, #7
  402a88:	f027 0307 	bic.w	r3, r7, #7
  402a8c:	f103 0208 	add.w	r2, r3, #8
  402a90:	920e      	str	r2, [sp, #56]	; 0x38
  402a92:	681a      	ldr	r2, [r3, #0]
  402a94:	9214      	str	r2, [sp, #80]	; 0x50
  402a96:	685b      	ldr	r3, [r3, #4]
  402a98:	9315      	str	r3, [sp, #84]	; 0x54
  402a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402a9c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402a9e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402aa2:	4628      	mov	r0, r5
  402aa4:	4621      	mov	r1, r4
  402aa6:	f04f 32ff 	mov.w	r2, #4294967295
  402aaa:	4b8d      	ldr	r3, [pc, #564]	; (402ce0 <_svfprintf_r+0x82c>)
  402aac:	f004 f854 	bl	406b58 <__aeabi_dcmpun>
  402ab0:	2800      	cmp	r0, #0
  402ab2:	f040 84c1 	bne.w	403438 <_svfprintf_r+0xf84>
  402ab6:	4628      	mov	r0, r5
  402ab8:	4621      	mov	r1, r4
  402aba:	f04f 32ff 	mov.w	r2, #4294967295
  402abe:	4b88      	ldr	r3, [pc, #544]	; (402ce0 <_svfprintf_r+0x82c>)
  402ac0:	f004 f82c 	bl	406b1c <__aeabi_dcmple>
  402ac4:	2800      	cmp	r0, #0
  402ac6:	f040 84b7 	bne.w	403438 <_svfprintf_r+0xf84>
  402aca:	9814      	ldr	r0, [sp, #80]	; 0x50
  402acc:	9915      	ldr	r1, [sp, #84]	; 0x54
  402ace:	2200      	movs	r2, #0
  402ad0:	2300      	movs	r3, #0
  402ad2:	f004 f819 	bl	406b08 <__aeabi_dcmplt>
  402ad6:	2800      	cmp	r0, #0
  402ad8:	f040 874b 	bne.w	403972 <_svfprintf_r+0x14be>
  402adc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402ae0:	4e80      	ldr	r6, [pc, #512]	; (402ce4 <_svfprintf_r+0x830>)
  402ae2:	4b81      	ldr	r3, [pc, #516]	; (402ce8 <_svfprintf_r+0x834>)
  402ae4:	9907      	ldr	r1, [sp, #28]
  402ae6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  402aea:	9107      	str	r1, [sp, #28]
  402aec:	9911      	ldr	r1, [sp, #68]	; 0x44
  402aee:	2203      	movs	r2, #3
  402af0:	f04f 0b00 	mov.w	fp, #0
  402af4:	9208      	str	r2, [sp, #32]
  402af6:	2947      	cmp	r1, #71	; 0x47
  402af8:	bfd8      	it	le
  402afa:	461e      	movle	r6, r3
  402afc:	920d      	str	r2, [sp, #52]	; 0x34
  402afe:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  402b02:	e69d      	b.n	402840 <_svfprintf_r+0x38c>
  402b04:	9b07      	ldr	r3, [sp, #28]
  402b06:	f043 0308 	orr.w	r3, r3, #8
  402b0a:	9307      	str	r3, [sp, #28]
  402b0c:	f898 3000 	ldrb.w	r3, [r8]
  402b10:	e529      	b.n	402566 <_svfprintf_r+0xb2>
  402b12:	9311      	str	r3, [sp, #68]	; 0x44
  402b14:	46ab      	mov	fp, r5
  402b16:	2a00      	cmp	r2, #0
  402b18:	f041 8009 	bne.w	403b2e <_svfprintf_r+0x167a>
  402b1c:	9b07      	ldr	r3, [sp, #28]
  402b1e:	f043 0310 	orr.w	r3, r3, #16
  402b22:	9307      	str	r3, [sp, #28]
  402b24:	9a07      	ldr	r2, [sp, #28]
  402b26:	f012 0320 	ands.w	r3, r2, #32
  402b2a:	f47f add2 	bne.w	4026d2 <_svfprintf_r+0x21e>
  402b2e:	9907      	ldr	r1, [sp, #28]
  402b30:	f011 0210 	ands.w	r2, r1, #16
  402b34:	f000 8507 	beq.w	403546 <_svfprintf_r+0x1092>
  402b38:	980e      	ldr	r0, [sp, #56]	; 0x38
  402b3a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402b3e:	f1bb 0f00 	cmp.w	fp, #0
  402b42:	6804      	ldr	r4, [r0, #0]
  402b44:	f100 0704 	add.w	r7, r0, #4
  402b48:	f04f 0500 	mov.w	r5, #0
  402b4c:	f2c0 8521 	blt.w	403592 <_svfprintf_r+0x10de>
  402b50:	460a      	mov	r2, r1
  402b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402b56:	9207      	str	r2, [sp, #28]
  402b58:	ea54 0205 	orrs.w	r2, r4, r5
  402b5c:	970e      	str	r7, [sp, #56]	; 0x38
  402b5e:	f000 8143 	beq.w	402de8 <_svfprintf_r+0x934>
  402b62:	461f      	mov	r7, r3
  402b64:	e5cb      	b.n	4026fe <_svfprintf_r+0x24a>
  402b66:	9311      	str	r3, [sp, #68]	; 0x44
  402b68:	46ab      	mov	fp, r5
  402b6a:	2a00      	cmp	r2, #0
  402b6c:	f040 87d7 	bne.w	403b1e <_svfprintf_r+0x166a>
  402b70:	9b07      	ldr	r3, [sp, #28]
  402b72:	f043 0310 	orr.w	r3, r3, #16
  402b76:	9307      	str	r3, [sp, #28]
  402b78:	9a07      	ldr	r2, [sp, #28]
  402b7a:	f012 0320 	ands.w	r3, r2, #32
  402b7e:	f000 8332 	beq.w	4031e6 <_svfprintf_r+0xd32>
  402b82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402b84:	3707      	adds	r7, #7
  402b86:	f027 0307 	bic.w	r3, r7, #7
  402b8a:	2700      	movs	r7, #0
  402b8c:	f103 0108 	add.w	r1, r3, #8
  402b90:	45bb      	cmp	fp, r7
  402b92:	910e      	str	r1, [sp, #56]	; 0x38
  402b94:	e9d3 4500 	ldrd	r4, r5, [r3]
  402b98:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402b9c:	f2c0 835c 	blt.w	403258 <_svfprintf_r+0xda4>
  402ba0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402ba4:	9307      	str	r3, [sp, #28]
  402ba6:	ea54 0305 	orrs.w	r3, r4, r5
  402baa:	f47f ae25 	bne.w	4027f8 <_svfprintf_r+0x344>
  402bae:	f1bb 0f00 	cmp.w	fp, #0
  402bb2:	f000 80fe 	beq.w	402db2 <_svfprintf_r+0x8fe>
  402bb6:	2400      	movs	r4, #0
  402bb8:	ae40      	add	r6, sp, #256	; 0x100
  402bba:	3430      	adds	r4, #48	; 0x30
  402bbc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402bc0:	e634      	b.n	40282c <_svfprintf_r+0x378>
  402bc2:	9311      	str	r3, [sp, #68]	; 0x44
  402bc4:	46ab      	mov	fp, r5
  402bc6:	2a00      	cmp	r2, #0
  402bc8:	f040 87a5 	bne.w	403b16 <_svfprintf_r+0x1662>
  402bcc:	9b07      	ldr	r3, [sp, #28]
  402bce:	4847      	ldr	r0, [pc, #284]	; (402cec <_svfprintf_r+0x838>)
  402bd0:	069d      	lsls	r5, r3, #26
  402bd2:	f140 8097 	bpl.w	402d04 <_svfprintf_r+0x850>
  402bd6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402bd8:	3707      	adds	r7, #7
  402bda:	f027 0307 	bic.w	r3, r7, #7
  402bde:	e9d3 4500 	ldrd	r4, r5, [r3]
  402be2:	f103 0208 	add.w	r2, r3, #8
  402be6:	920e      	str	r2, [sp, #56]	; 0x38
  402be8:	9a07      	ldr	r2, [sp, #28]
  402bea:	f012 0701 	ands.w	r7, r2, #1
  402bee:	f000 8241 	beq.w	403074 <_svfprintf_r+0xbc0>
  402bf2:	ea54 0305 	orrs.w	r3, r4, r5
  402bf6:	f000 84f5 	beq.w	4035e4 <_svfprintf_r+0x1130>
  402bfa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402bfe:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  402c02:	2700      	movs	r7, #0
  402c04:	9a07      	ldr	r2, [sp, #28]
  402c06:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402c0a:	2330      	movs	r3, #48	; 0x30
  402c0c:	45bb      	cmp	fp, r7
  402c0e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  402c12:	f042 0302 	orr.w	r3, r2, #2
  402c16:	f2c0 86a9 	blt.w	40396c <_svfprintf_r+0x14b8>
  402c1a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402c1e:	f043 0302 	orr.w	r3, r3, #2
  402c22:	9307      	str	r3, [sp, #28]
  402c24:	ae30      	add	r6, sp, #192	; 0xc0
  402c26:	0923      	lsrs	r3, r4, #4
  402c28:	f004 010f 	and.w	r1, r4, #15
  402c2c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402c30:	092a      	lsrs	r2, r5, #4
  402c32:	461c      	mov	r4, r3
  402c34:	4615      	mov	r5, r2
  402c36:	5c43      	ldrb	r3, [r0, r1]
  402c38:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402c3c:	ea54 0305 	orrs.w	r3, r4, r5
  402c40:	d1f1      	bne.n	402c26 <_svfprintf_r+0x772>
  402c42:	e5f3      	b.n	40282c <_svfprintf_r+0x378>
  402c44:	990e      	ldr	r1, [sp, #56]	; 0x38
  402c46:	9311      	str	r3, [sp, #68]	; 0x44
  402c48:	680a      	ldr	r2, [r1, #0]
  402c4a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  402c4e:	2300      	movs	r3, #0
  402c50:	460a      	mov	r2, r1
  402c52:	461f      	mov	r7, r3
  402c54:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402c58:	3204      	adds	r2, #4
  402c5a:	2301      	movs	r3, #1
  402c5c:	9308      	str	r3, [sp, #32]
  402c5e:	46bb      	mov	fp, r7
  402c60:	9713      	str	r7, [sp, #76]	; 0x4c
  402c62:	920e      	str	r2, [sp, #56]	; 0x38
  402c64:	930d      	str	r3, [sp, #52]	; 0x34
  402c66:	ae26      	add	r6, sp, #152	; 0x98
  402c68:	e5ee      	b.n	402848 <_svfprintf_r+0x394>
  402c6a:	9311      	str	r3, [sp, #68]	; 0x44
  402c6c:	46ab      	mov	fp, r5
  402c6e:	2a00      	cmp	r2, #0
  402c70:	f43f ada0 	beq.w	4027b4 <_svfprintf_r+0x300>
  402c74:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  402c78:	e59c      	b.n	4027b4 <_svfprintf_r+0x300>
  402c7a:	9b07      	ldr	r3, [sp, #28]
  402c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c80:	9307      	str	r3, [sp, #28]
  402c82:	f898 3000 	ldrb.w	r3, [r8]
  402c86:	e46e      	b.n	402566 <_svfprintf_r+0xb2>
  402c88:	f898 3000 	ldrb.w	r3, [r8]
  402c8c:	2900      	cmp	r1, #0
  402c8e:	f47f ac6a 	bne.w	402566 <_svfprintf_r+0xb2>
  402c92:	2201      	movs	r2, #1
  402c94:	2120      	movs	r1, #32
  402c96:	e466      	b.n	402566 <_svfprintf_r+0xb2>
  402c98:	9b07      	ldr	r3, [sp, #28]
  402c9a:	f043 0301 	orr.w	r3, r3, #1
  402c9e:	9307      	str	r3, [sp, #28]
  402ca0:	f898 3000 	ldrb.w	r3, [r8]
  402ca4:	e45f      	b.n	402566 <_svfprintf_r+0xb2>
  402ca6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402ca8:	6823      	ldr	r3, [r4, #0]
  402caa:	930c      	str	r3, [sp, #48]	; 0x30
  402cac:	4618      	mov	r0, r3
  402cae:	2800      	cmp	r0, #0
  402cb0:	4623      	mov	r3, r4
  402cb2:	f103 0304 	add.w	r3, r3, #4
  402cb6:	f6ff acb8 	blt.w	40262a <_svfprintf_r+0x176>
  402cba:	930e      	str	r3, [sp, #56]	; 0x38
  402cbc:	f898 3000 	ldrb.w	r3, [r8]
  402cc0:	e451      	b.n	402566 <_svfprintf_r+0xb2>
  402cc2:	f898 3000 	ldrb.w	r3, [r8]
  402cc6:	2201      	movs	r2, #1
  402cc8:	212b      	movs	r1, #43	; 0x2b
  402cca:	e44c      	b.n	402566 <_svfprintf_r+0xb2>
  402ccc:	9311      	str	r3, [sp, #68]	; 0x44
  402cce:	46ab      	mov	fp, r5
  402cd0:	2a00      	cmp	r2, #0
  402cd2:	f43f af51 	beq.w	402b78 <_svfprintf_r+0x6c4>
  402cd6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  402cda:	e74d      	b.n	402b78 <_svfprintf_r+0x6c4>
  402cdc:	00406d30 	.word	0x00406d30
  402ce0:	7fefffff 	.word	0x7fefffff
  402ce4:	00406cf0 	.word	0x00406cf0
  402ce8:	00406cec 	.word	0x00406cec
  402cec:	00406cfc 	.word	0x00406cfc
  402cf0:	9311      	str	r3, [sp, #68]	; 0x44
  402cf2:	46ab      	mov	fp, r5
  402cf4:	2a00      	cmp	r2, #0
  402cf6:	f040 8703 	bne.w	403b00 <_svfprintf_r+0x164c>
  402cfa:	9b07      	ldr	r3, [sp, #28]
  402cfc:	4899      	ldr	r0, [pc, #612]	; (402f64 <_svfprintf_r+0xab0>)
  402cfe:	069d      	lsls	r5, r3, #26
  402d00:	f53f af69 	bmi.w	402bd6 <_svfprintf_r+0x722>
  402d04:	9b07      	ldr	r3, [sp, #28]
  402d06:	06dc      	lsls	r4, r3, #27
  402d08:	f140 845e 	bpl.w	4035c8 <_svfprintf_r+0x1114>
  402d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d0e:	4613      	mov	r3, r2
  402d10:	3304      	adds	r3, #4
  402d12:	6814      	ldr	r4, [r2, #0]
  402d14:	930e      	str	r3, [sp, #56]	; 0x38
  402d16:	2500      	movs	r5, #0
  402d18:	e766      	b.n	402be8 <_svfprintf_r+0x734>
  402d1a:	f898 3000 	ldrb.w	r3, [r8]
  402d1e:	2b6c      	cmp	r3, #108	; 0x6c
  402d20:	f000 84e1 	beq.w	4036e6 <_svfprintf_r+0x1232>
  402d24:	9807      	ldr	r0, [sp, #28]
  402d26:	f040 0010 	orr.w	r0, r0, #16
  402d2a:	9007      	str	r0, [sp, #28]
  402d2c:	e41b      	b.n	402566 <_svfprintf_r+0xb2>
  402d2e:	2a00      	cmp	r2, #0
  402d30:	f040 86db 	bne.w	403aea <_svfprintf_r+0x1636>
  402d34:	9b07      	ldr	r3, [sp, #28]
  402d36:	069b      	lsls	r3, r3, #26
  402d38:	f140 842f 	bpl.w	40359a <_svfprintf_r+0x10e6>
  402d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d40:	6813      	ldr	r3, [r2, #0]
  402d42:	17cd      	asrs	r5, r1, #31
  402d44:	4608      	mov	r0, r1
  402d46:	3204      	adds	r2, #4
  402d48:	4629      	mov	r1, r5
  402d4a:	920e      	str	r2, [sp, #56]	; 0x38
  402d4c:	e9c3 0100 	strd	r0, r1, [r3]
  402d50:	f7ff bbd6 	b.w	402500 <_svfprintf_r+0x4c>
  402d54:	9b07      	ldr	r3, [sp, #28]
  402d56:	f043 0320 	orr.w	r3, r3, #32
  402d5a:	9307      	str	r3, [sp, #28]
  402d5c:	f898 3000 	ldrb.w	r3, [r8]
  402d60:	e401      	b.n	402566 <_svfprintf_r+0xb2>
  402d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d64:	9311      	str	r3, [sp, #68]	; 0x44
  402d66:	6816      	ldr	r6, [r2, #0]
  402d68:	2400      	movs	r4, #0
  402d6a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  402d6e:	1d17      	adds	r7, r2, #4
  402d70:	2e00      	cmp	r6, #0
  402d72:	f000 85bd 	beq.w	4038f0 <_svfprintf_r+0x143c>
  402d76:	2d00      	cmp	r5, #0
  402d78:	f2c0 850f 	blt.w	40379a <_svfprintf_r+0x12e6>
  402d7c:	462a      	mov	r2, r5
  402d7e:	4621      	mov	r1, r4
  402d80:	4630      	mov	r0, r6
  402d82:	f002 f985 	bl	405090 <memchr>
  402d86:	2800      	cmp	r0, #0
  402d88:	f000 8604 	beq.w	403994 <_svfprintf_r+0x14e0>
  402d8c:	1b83      	subs	r3, r0, r6
  402d8e:	930d      	str	r3, [sp, #52]	; 0x34
  402d90:	46a3      	mov	fp, r4
  402d92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402d96:	970e      	str	r7, [sp, #56]	; 0x38
  402d98:	9308      	str	r3, [sp, #32]
  402d9a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  402d9e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402da2:	e54d      	b.n	402840 <_svfprintf_r+0x38c>
  402da4:	486f      	ldr	r0, [pc, #444]	; (402f64 <_svfprintf_r+0xab0>)
  402da6:	9211      	str	r2, [sp, #68]	; 0x44
  402da8:	f1bb 0f00 	cmp.w	fp, #0
  402dac:	f040 8173 	bne.w	403096 <_svfprintf_r+0xbe2>
  402db0:	465f      	mov	r7, fp
  402db2:	f04f 0b00 	mov.w	fp, #0
  402db6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402dba:	ae30      	add	r6, sp, #192	; 0xc0
  402dbc:	e539      	b.n	402832 <_svfprintf_r+0x37e>
  402dbe:	9311      	str	r3, [sp, #68]	; 0x44
  402dc0:	2a00      	cmp	r2, #0
  402dc2:	f040 86b0 	bne.w	403b26 <_svfprintf_r+0x1672>
  402dc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dc8:	2a00      	cmp	r2, #0
  402dca:	f43f ac65 	beq.w	402698 <_svfprintf_r+0x1e4>
  402dce:	2300      	movs	r3, #0
  402dd0:	2101      	movs	r1, #1
  402dd2:	461f      	mov	r7, r3
  402dd4:	9108      	str	r1, [sp, #32]
  402dd6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  402dda:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402dde:	469b      	mov	fp, r3
  402de0:	9313      	str	r3, [sp, #76]	; 0x4c
  402de2:	910d      	str	r1, [sp, #52]	; 0x34
  402de4:	ae26      	add	r6, sp, #152	; 0x98
  402de6:	e52f      	b.n	402848 <_svfprintf_r+0x394>
  402de8:	f1bb 0f00 	cmp.w	fp, #0
  402dec:	f000 85dd 	beq.w	4039aa <_svfprintf_r+0x14f6>
  402df0:	2700      	movs	r7, #0
  402df2:	2400      	movs	r4, #0
  402df4:	2500      	movs	r5, #0
  402df6:	e482      	b.n	4026fe <_svfprintf_r+0x24a>
  402df8:	485a      	ldr	r0, [pc, #360]	; (402f64 <_svfprintf_r+0xab0>)
  402dfa:	9307      	str	r3, [sp, #28]
  402dfc:	9211      	str	r2, [sp, #68]	; 0x44
  402dfe:	ea54 0305 	orrs.w	r3, r4, r5
  402e02:	970e      	str	r7, [sp, #56]	; 0x38
  402e04:	f04f 0700 	mov.w	r7, #0
  402e08:	f47f af0c 	bne.w	402c24 <_svfprintf_r+0x770>
  402e0c:	2400      	movs	r4, #0
  402e0e:	2500      	movs	r5, #0
  402e10:	e708      	b.n	402c24 <_svfprintf_r+0x770>
  402e12:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402e14:	e568      	b.n	4028e8 <_svfprintf_r+0x434>
  402e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e18:	2b65      	cmp	r3, #101	; 0x65
  402e1a:	f340 80a9 	ble.w	402f70 <_svfprintf_r+0xabc>
  402e1e:	9814      	ldr	r0, [sp, #80]	; 0x50
  402e20:	9915      	ldr	r1, [sp, #84]	; 0x54
  402e22:	2200      	movs	r2, #0
  402e24:	2300      	movs	r3, #0
  402e26:	f003 fe65 	bl	406af4 <__aeabi_dcmpeq>
  402e2a:	2800      	cmp	r0, #0
  402e2c:	f000 8135 	beq.w	40309a <_svfprintf_r+0xbe6>
  402e30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402e32:	4a4d      	ldr	r2, [pc, #308]	; (402f68 <_svfprintf_r+0xab4>)
  402e34:	f8c9 2000 	str.w	r2, [r9]
  402e38:	3301      	adds	r3, #1
  402e3a:	3401      	adds	r4, #1
  402e3c:	2201      	movs	r2, #1
  402e3e:	2b07      	cmp	r3, #7
  402e40:	9425      	str	r4, [sp, #148]	; 0x94
  402e42:	9324      	str	r3, [sp, #144]	; 0x90
  402e44:	f8c9 2004 	str.w	r2, [r9, #4]
  402e48:	f300 83e6 	bgt.w	403618 <_svfprintf_r+0x1164>
  402e4c:	f109 0908 	add.w	r9, r9, #8
  402e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402e52:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402e54:	4293      	cmp	r3, r2
  402e56:	db03      	blt.n	402e60 <_svfprintf_r+0x9ac>
  402e58:	9b07      	ldr	r3, [sp, #28]
  402e5a:	07db      	lsls	r3, r3, #31
  402e5c:	f57f adba 	bpl.w	4029d4 <_svfprintf_r+0x520>
  402e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402e62:	9916      	ldr	r1, [sp, #88]	; 0x58
  402e64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  402e66:	f8c9 2000 	str.w	r2, [r9]
  402e6a:	3301      	adds	r3, #1
  402e6c:	440c      	add	r4, r1
  402e6e:	2b07      	cmp	r3, #7
  402e70:	9425      	str	r4, [sp, #148]	; 0x94
  402e72:	f8c9 1004 	str.w	r1, [r9, #4]
  402e76:	9324      	str	r3, [sp, #144]	; 0x90
  402e78:	f300 843f 	bgt.w	4036fa <_svfprintf_r+0x1246>
  402e7c:	f109 0908 	add.w	r9, r9, #8
  402e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402e82:	1e5d      	subs	r5, r3, #1
  402e84:	2d00      	cmp	r5, #0
  402e86:	f77f ada5 	ble.w	4029d4 <_svfprintf_r+0x520>
  402e8a:	4a38      	ldr	r2, [pc, #224]	; (402f6c <_svfprintf_r+0xab8>)
  402e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402e8e:	920f      	str	r2, [sp, #60]	; 0x3c
  402e90:	2d10      	cmp	r5, #16
  402e92:	f340 81e6 	ble.w	403262 <_svfprintf_r+0xdae>
  402e96:	2610      	movs	r6, #16
  402e98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402e9a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  402e9e:	e005      	b.n	402eac <_svfprintf_r+0x9f8>
  402ea0:	f109 0908 	add.w	r9, r9, #8
  402ea4:	3d10      	subs	r5, #16
  402ea6:	2d10      	cmp	r5, #16
  402ea8:	f340 81db 	ble.w	403262 <_svfprintf_r+0xdae>
  402eac:	3301      	adds	r3, #1
  402eae:	3410      	adds	r4, #16
  402eb0:	2b07      	cmp	r3, #7
  402eb2:	9425      	str	r4, [sp, #148]	; 0x94
  402eb4:	9324      	str	r3, [sp, #144]	; 0x90
  402eb6:	f8c9 a000 	str.w	sl, [r9]
  402eba:	f8c9 6004 	str.w	r6, [r9, #4]
  402ebe:	ddef      	ble.n	402ea0 <_svfprintf_r+0x9ec>
  402ec0:	aa23      	add	r2, sp, #140	; 0x8c
  402ec2:	4659      	mov	r1, fp
  402ec4:	4638      	mov	r0, r7
  402ec6:	f002 fd69 	bl	40599c <__ssprint_r>
  402eca:	2800      	cmp	r0, #0
  402ecc:	f47f abeb 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  402ed0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ed4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402ed8:	e7e4      	b.n	402ea4 <_svfprintf_r+0x9f0>
  402eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402edc:	9a08      	ldr	r2, [sp, #32]
  402ede:	1a9f      	subs	r7, r3, r2
  402ee0:	2f00      	cmp	r7, #0
  402ee2:	f77f ad25 	ble.w	402930 <_svfprintf_r+0x47c>
  402ee6:	4a21      	ldr	r2, [pc, #132]	; (402f6c <_svfprintf_r+0xab8>)
  402ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402eea:	920f      	str	r2, [sp, #60]	; 0x3c
  402eec:	2f10      	cmp	r7, #16
  402eee:	dd2b      	ble.n	402f48 <_svfprintf_r+0xa94>
  402ef0:	464a      	mov	r2, r9
  402ef2:	4621      	mov	r1, r4
  402ef4:	46b9      	mov	r9, r7
  402ef6:	2510      	movs	r5, #16
  402ef8:	4637      	mov	r7, r6
  402efa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402efc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402efe:	e006      	b.n	402f0e <_svfprintf_r+0xa5a>
  402f00:	f1a9 0910 	sub.w	r9, r9, #16
  402f04:	f1b9 0f10 	cmp.w	r9, #16
  402f08:	f102 0208 	add.w	r2, r2, #8
  402f0c:	dd18      	ble.n	402f40 <_svfprintf_r+0xa8c>
  402f0e:	3301      	adds	r3, #1
  402f10:	3110      	adds	r1, #16
  402f12:	2b07      	cmp	r3, #7
  402f14:	9125      	str	r1, [sp, #148]	; 0x94
  402f16:	9324      	str	r3, [sp, #144]	; 0x90
  402f18:	f8c2 a000 	str.w	sl, [r2]
  402f1c:	6055      	str	r5, [r2, #4]
  402f1e:	ddef      	ble.n	402f00 <_svfprintf_r+0xa4c>
  402f20:	aa23      	add	r2, sp, #140	; 0x8c
  402f22:	4631      	mov	r1, r6
  402f24:	4620      	mov	r0, r4
  402f26:	f002 fd39 	bl	40599c <__ssprint_r>
  402f2a:	2800      	cmp	r0, #0
  402f2c:	f47f abbb 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  402f30:	f1a9 0910 	sub.w	r9, r9, #16
  402f34:	f1b9 0f10 	cmp.w	r9, #16
  402f38:	9925      	ldr	r1, [sp, #148]	; 0x94
  402f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402f3c:	aa30      	add	r2, sp, #192	; 0xc0
  402f3e:	dce6      	bgt.n	402f0e <_svfprintf_r+0xa5a>
  402f40:	463e      	mov	r6, r7
  402f42:	460c      	mov	r4, r1
  402f44:	464f      	mov	r7, r9
  402f46:	4691      	mov	r9, r2
  402f48:	3301      	adds	r3, #1
  402f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f4c:	9324      	str	r3, [sp, #144]	; 0x90
  402f4e:	443c      	add	r4, r7
  402f50:	2b07      	cmp	r3, #7
  402f52:	9425      	str	r4, [sp, #148]	; 0x94
  402f54:	e889 0084 	stmia.w	r9, {r2, r7}
  402f58:	f300 8245 	bgt.w	4033e6 <_svfprintf_r+0xf32>
  402f5c:	f109 0908 	add.w	r9, r9, #8
  402f60:	e4e6      	b.n	402930 <_svfprintf_r+0x47c>
  402f62:	bf00      	nop
  402f64:	00406d10 	.word	0x00406d10
  402f68:	00406d2c 	.word	0x00406d2c
  402f6c:	00406cdc 	.word	0x00406cdc
  402f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402f72:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402f74:	2b01      	cmp	r3, #1
  402f76:	f340 8208 	ble.w	40338a <_svfprintf_r+0xed6>
  402f7a:	3501      	adds	r5, #1
  402f7c:	3401      	adds	r4, #1
  402f7e:	2301      	movs	r3, #1
  402f80:	2d07      	cmp	r5, #7
  402f82:	9425      	str	r4, [sp, #148]	; 0x94
  402f84:	9524      	str	r5, [sp, #144]	; 0x90
  402f86:	f8c9 6000 	str.w	r6, [r9]
  402f8a:	f8c9 3004 	str.w	r3, [r9, #4]
  402f8e:	f300 820d 	bgt.w	4033ac <_svfprintf_r+0xef8>
  402f92:	f109 0908 	add.w	r9, r9, #8
  402f96:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402f98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402f9a:	f8c9 3000 	str.w	r3, [r9]
  402f9e:	3501      	adds	r5, #1
  402fa0:	4414      	add	r4, r2
  402fa2:	2d07      	cmp	r5, #7
  402fa4:	9425      	str	r4, [sp, #148]	; 0x94
  402fa6:	9524      	str	r5, [sp, #144]	; 0x90
  402fa8:	f8c9 2004 	str.w	r2, [r9, #4]
  402fac:	f300 820e 	bgt.w	4033cc <_svfprintf_r+0xf18>
  402fb0:	f109 0908 	add.w	r9, r9, #8
  402fb4:	2300      	movs	r3, #0
  402fb6:	9814      	ldr	r0, [sp, #80]	; 0x50
  402fb8:	9915      	ldr	r1, [sp, #84]	; 0x54
  402fba:	2200      	movs	r2, #0
  402fbc:	f003 fd9a 	bl	406af4 <__aeabi_dcmpeq>
  402fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402fc2:	2800      	cmp	r0, #0
  402fc4:	f040 80c3 	bne.w	40314e <_svfprintf_r+0xc9a>
  402fc8:	3b01      	subs	r3, #1
  402fca:	3501      	adds	r5, #1
  402fcc:	3601      	adds	r6, #1
  402fce:	441c      	add	r4, r3
  402fd0:	2d07      	cmp	r5, #7
  402fd2:	9524      	str	r5, [sp, #144]	; 0x90
  402fd4:	9425      	str	r4, [sp, #148]	; 0x94
  402fd6:	f8c9 6000 	str.w	r6, [r9]
  402fda:	f8c9 3004 	str.w	r3, [r9, #4]
  402fde:	f300 80f5 	bgt.w	4031cc <_svfprintf_r+0xd18>
  402fe2:	f109 0908 	add.w	r9, r9, #8
  402fe6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402fe8:	f8c9 2004 	str.w	r2, [r9, #4]
  402fec:	3501      	adds	r5, #1
  402fee:	4414      	add	r4, r2
  402ff0:	ab1f      	add	r3, sp, #124	; 0x7c
  402ff2:	2d07      	cmp	r5, #7
  402ff4:	9425      	str	r4, [sp, #148]	; 0x94
  402ff6:	9524      	str	r5, [sp, #144]	; 0x90
  402ff8:	f8c9 3000 	str.w	r3, [r9]
  402ffc:	f77f ace8 	ble.w	4029d0 <_svfprintf_r+0x51c>
  403000:	aa23      	add	r2, sp, #140	; 0x8c
  403002:	9909      	ldr	r1, [sp, #36]	; 0x24
  403004:	980a      	ldr	r0, [sp, #40]	; 0x28
  403006:	f002 fcc9 	bl	40599c <__ssprint_r>
  40300a:	2800      	cmp	r0, #0
  40300c:	f47f ab4b 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403010:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403012:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403016:	e4dd      	b.n	4029d4 <_svfprintf_r+0x520>
  403018:	aa23      	add	r2, sp, #140	; 0x8c
  40301a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40301c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40301e:	f002 fcbd 	bl	40599c <__ssprint_r>
  403022:	2800      	cmp	r0, #0
  403024:	f43f ad24 	beq.w	402a70 <_svfprintf_r+0x5bc>
  403028:	f7ff bb3d 	b.w	4026a6 <_svfprintf_r+0x1f2>
  40302c:	aa23      	add	r2, sp, #140	; 0x8c
  40302e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403030:	980a      	ldr	r0, [sp, #40]	; 0x28
  403032:	f002 fcb3 	bl	40599c <__ssprint_r>
  403036:	2800      	cmp	r0, #0
  403038:	f47f ab35 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  40303c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40303e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403042:	e4b4      	b.n	4029ae <_svfprintf_r+0x4fa>
  403044:	aa23      	add	r2, sp, #140	; 0x8c
  403046:	9909      	ldr	r1, [sp, #36]	; 0x24
  403048:	980a      	ldr	r0, [sp, #40]	; 0x28
  40304a:	f002 fca7 	bl	40599c <__ssprint_r>
  40304e:	2800      	cmp	r0, #0
  403050:	f47f ab29 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403054:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403056:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40305a:	e455      	b.n	402908 <_svfprintf_r+0x454>
  40305c:	aa23      	add	r2, sp, #140	; 0x8c
  40305e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403060:	980a      	ldr	r0, [sp, #40]	; 0x28
  403062:	f002 fc9b 	bl	40599c <__ssprint_r>
  403066:	2800      	cmp	r0, #0
  403068:	f47f ab1d 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  40306c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40306e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403072:	e459      	b.n	402928 <_svfprintf_r+0x474>
  403074:	f1bb 0f00 	cmp.w	fp, #0
  403078:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40307c:	f2c0 82d8 	blt.w	403630 <_svfprintf_r+0x117c>
  403080:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403084:	9307      	str	r3, [sp, #28]
  403086:	ea54 0305 	orrs.w	r3, r4, r5
  40308a:	f47f adcb 	bne.w	402c24 <_svfprintf_r+0x770>
  40308e:	f1bb 0f00 	cmp.w	fp, #0
  403092:	f43f ae8d 	beq.w	402db0 <_svfprintf_r+0x8fc>
  403096:	2700      	movs	r7, #0
  403098:	e6b8      	b.n	402e0c <_svfprintf_r+0x958>
  40309a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40309c:	2d00      	cmp	r5, #0
  40309e:	f340 82ca 	ble.w	403636 <_svfprintf_r+0x1182>
  4030a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4030a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4030a6:	4293      	cmp	r3, r2
  4030a8:	bfa8      	it	ge
  4030aa:	4613      	movge	r3, r2
  4030ac:	2b00      	cmp	r3, #0
  4030ae:	461d      	mov	r5, r3
  4030b0:	dd0d      	ble.n	4030ce <_svfprintf_r+0xc1a>
  4030b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4030b4:	f8c9 6000 	str.w	r6, [r9]
  4030b8:	3301      	adds	r3, #1
  4030ba:	442c      	add	r4, r5
  4030bc:	2b07      	cmp	r3, #7
  4030be:	9425      	str	r4, [sp, #148]	; 0x94
  4030c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4030c4:	9324      	str	r3, [sp, #144]	; 0x90
  4030c6:	f300 839c 	bgt.w	403802 <_svfprintf_r+0x134e>
  4030ca:	f109 0908 	add.w	r9, r9, #8
  4030ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4030d0:	2d00      	cmp	r5, #0
  4030d2:	bfa8      	it	ge
  4030d4:	1b5b      	subge	r3, r3, r5
  4030d6:	2b00      	cmp	r3, #0
  4030d8:	461d      	mov	r5, r3
  4030da:	f340 80f6 	ble.w	4032ca <_svfprintf_r+0xe16>
  4030de:	4aba      	ldr	r2, [pc, #744]	; (4033c8 <_svfprintf_r+0xf14>)
  4030e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4030e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4030e4:	2d10      	cmp	r5, #16
  4030e6:	f340 828a 	ble.w	4035fe <_svfprintf_r+0x114a>
  4030ea:	4622      	mov	r2, r4
  4030ec:	2710      	movs	r7, #16
  4030ee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4030f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4030f4:	e005      	b.n	403102 <_svfprintf_r+0xc4e>
  4030f6:	f109 0908 	add.w	r9, r9, #8
  4030fa:	3d10      	subs	r5, #16
  4030fc:	2d10      	cmp	r5, #16
  4030fe:	f340 827d 	ble.w	4035fc <_svfprintf_r+0x1148>
  403102:	3301      	adds	r3, #1
  403104:	3210      	adds	r2, #16
  403106:	2b07      	cmp	r3, #7
  403108:	9225      	str	r2, [sp, #148]	; 0x94
  40310a:	9324      	str	r3, [sp, #144]	; 0x90
  40310c:	f8c9 a000 	str.w	sl, [r9]
  403110:	f8c9 7004 	str.w	r7, [r9, #4]
  403114:	ddef      	ble.n	4030f6 <_svfprintf_r+0xc42>
  403116:	aa23      	add	r2, sp, #140	; 0x8c
  403118:	4621      	mov	r1, r4
  40311a:	4658      	mov	r0, fp
  40311c:	f002 fc3e 	bl	40599c <__ssprint_r>
  403120:	2800      	cmp	r0, #0
  403122:	f47f aac0 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403126:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403128:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40312a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40312e:	e7e4      	b.n	4030fa <_svfprintf_r+0xc46>
  403130:	aa23      	add	r2, sp, #140	; 0x8c
  403132:	9909      	ldr	r1, [sp, #36]	; 0x24
  403134:	980a      	ldr	r0, [sp, #40]	; 0x28
  403136:	f002 fc31 	bl	40599c <__ssprint_r>
  40313a:	2800      	cmp	r0, #0
  40313c:	f47f aab3 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403140:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403144:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403146:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40314a:	f7ff bbcd 	b.w	4028e8 <_svfprintf_r+0x434>
  40314e:	1e5e      	subs	r6, r3, #1
  403150:	2e00      	cmp	r6, #0
  403152:	f77f af48 	ble.w	402fe6 <_svfprintf_r+0xb32>
  403156:	4b9c      	ldr	r3, [pc, #624]	; (4033c8 <_svfprintf_r+0xf14>)
  403158:	930f      	str	r3, [sp, #60]	; 0x3c
  40315a:	2e10      	cmp	r6, #16
  40315c:	dd2c      	ble.n	4031b8 <_svfprintf_r+0xd04>
  40315e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  403162:	2710      	movs	r7, #16
  403164:	46b0      	mov	r8, r6
  403166:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40316a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40316c:	e006      	b.n	40317c <_svfprintf_r+0xcc8>
  40316e:	f1a8 0810 	sub.w	r8, r8, #16
  403172:	f1b8 0f10 	cmp.w	r8, #16
  403176:	f109 0908 	add.w	r9, r9, #8
  40317a:	dd1a      	ble.n	4031b2 <_svfprintf_r+0xcfe>
  40317c:	3501      	adds	r5, #1
  40317e:	3410      	adds	r4, #16
  403180:	2d07      	cmp	r5, #7
  403182:	9425      	str	r4, [sp, #148]	; 0x94
  403184:	9524      	str	r5, [sp, #144]	; 0x90
  403186:	f8c9 a000 	str.w	sl, [r9]
  40318a:	f8c9 7004 	str.w	r7, [r9, #4]
  40318e:	ddee      	ble.n	40316e <_svfprintf_r+0xcba>
  403190:	aa23      	add	r2, sp, #140	; 0x8c
  403192:	4631      	mov	r1, r6
  403194:	4658      	mov	r0, fp
  403196:	f002 fc01 	bl	40599c <__ssprint_r>
  40319a:	2800      	cmp	r0, #0
  40319c:	f47f aa83 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4031a0:	f1a8 0810 	sub.w	r8, r8, #16
  4031a4:	f1b8 0f10 	cmp.w	r8, #16
  4031a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4031aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4031ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4031b0:	dce4      	bgt.n	40317c <_svfprintf_r+0xcc8>
  4031b2:	4646      	mov	r6, r8
  4031b4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4031b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4031ba:	3501      	adds	r5, #1
  4031bc:	4434      	add	r4, r6
  4031be:	2d07      	cmp	r5, #7
  4031c0:	9425      	str	r4, [sp, #148]	; 0x94
  4031c2:	9524      	str	r5, [sp, #144]	; 0x90
  4031c4:	e889 0048 	stmia.w	r9, {r3, r6}
  4031c8:	f77f af0b 	ble.w	402fe2 <_svfprintf_r+0xb2e>
  4031cc:	aa23      	add	r2, sp, #140	; 0x8c
  4031ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4031d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4031d2:	f002 fbe3 	bl	40599c <__ssprint_r>
  4031d6:	2800      	cmp	r0, #0
  4031d8:	f47f aa65 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4031dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4031de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4031e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4031e4:	e6ff      	b.n	402fe6 <_svfprintf_r+0xb32>
  4031e6:	9907      	ldr	r1, [sp, #28]
  4031e8:	f011 0210 	ands.w	r2, r1, #16
  4031ec:	f000 8108 	beq.w	403400 <_svfprintf_r+0xf4c>
  4031f0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4031f2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4031f6:	f1bb 0f00 	cmp.w	fp, #0
  4031fa:	6804      	ldr	r4, [r0, #0]
  4031fc:	f100 0704 	add.w	r7, r0, #4
  403200:	f04f 0500 	mov.w	r5, #0
  403204:	db26      	blt.n	403254 <_svfprintf_r+0xda0>
  403206:	460a      	mov	r2, r1
  403208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40320c:	9207      	str	r2, [sp, #28]
  40320e:	ea54 0205 	orrs.w	r2, r4, r5
  403212:	970e      	str	r7, [sp, #56]	; 0x38
  403214:	461f      	mov	r7, r3
  403216:	f47f aaef 	bne.w	4027f8 <_svfprintf_r+0x344>
  40321a:	e4c8      	b.n	402bae <_svfprintf_r+0x6fa>
  40321c:	9b07      	ldr	r3, [sp, #28]
  40321e:	06d9      	lsls	r1, r3, #27
  403220:	d42a      	bmi.n	403278 <_svfprintf_r+0xdc4>
  403222:	9b07      	ldr	r3, [sp, #28]
  403224:	065a      	lsls	r2, r3, #25
  403226:	d527      	bpl.n	403278 <_svfprintf_r+0xdc4>
  403228:	990e      	ldr	r1, [sp, #56]	; 0x38
  40322a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40322e:	3104      	adds	r1, #4
  403230:	17e5      	asrs	r5, r4, #31
  403232:	4622      	mov	r2, r4
  403234:	462b      	mov	r3, r5
  403236:	910e      	str	r1, [sp, #56]	; 0x38
  403238:	f7ff bacb 	b.w	4027d2 <_svfprintf_r+0x31e>
  40323c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40323e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403242:	f1bb 0f00 	cmp.w	fp, #0
  403246:	680c      	ldr	r4, [r1, #0]
  403248:	f101 0704 	add.w	r7, r1, #4
  40324c:	f04f 0500 	mov.w	r5, #0
  403250:	f280 8247 	bge.w	4036e2 <_svfprintf_r+0x122e>
  403254:	970e      	str	r7, [sp, #56]	; 0x38
  403256:	461f      	mov	r7, r3
  403258:	ea54 0305 	orrs.w	r3, r4, r5
  40325c:	f47f aacc 	bne.w	4027f8 <_svfprintf_r+0x344>
  403260:	e4aa      	b.n	402bb8 <_svfprintf_r+0x704>
  403262:	3301      	adds	r3, #1
  403264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403266:	9324      	str	r3, [sp, #144]	; 0x90
  403268:	442c      	add	r4, r5
  40326a:	2b07      	cmp	r3, #7
  40326c:	9425      	str	r4, [sp, #148]	; 0x94
  40326e:	e889 0024 	stmia.w	r9, {r2, r5}
  403272:	f77f abad 	ble.w	4029d0 <_svfprintf_r+0x51c>
  403276:	e6c3      	b.n	403000 <_svfprintf_r+0xb4c>
  403278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40327a:	6814      	ldr	r4, [r2, #0]
  40327c:	4613      	mov	r3, r2
  40327e:	3304      	adds	r3, #4
  403280:	17e5      	asrs	r5, r4, #31
  403282:	4622      	mov	r2, r4
  403284:	930e      	str	r3, [sp, #56]	; 0x38
  403286:	2a00      	cmp	r2, #0
  403288:	462b      	mov	r3, r5
  40328a:	f173 0300 	sbcs.w	r3, r3, #0
  40328e:	f6bf aaa5 	bge.w	4027dc <_svfprintf_r+0x328>
  403292:	4264      	negs	r4, r4
  403294:	f04f 072d 	mov.w	r7, #45	; 0x2d
  403298:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40329c:	f1bb 0f00 	cmp.w	fp, #0
  4032a0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4032a4:	f6ff aaa8 	blt.w	4027f8 <_svfprintf_r+0x344>
  4032a8:	9b07      	ldr	r3, [sp, #28]
  4032aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4032ae:	9307      	str	r3, [sp, #28]
  4032b0:	f7ff baa2 	b.w	4027f8 <_svfprintf_r+0x344>
  4032b4:	aa23      	add	r2, sp, #140	; 0x8c
  4032b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4032b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4032ba:	f002 fb6f 	bl	40599c <__ssprint_r>
  4032be:	2800      	cmp	r0, #0
  4032c0:	f47f a9f1 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4032c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4032c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4032ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4032cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4032ce:	4432      	add	r2, r6
  4032d0:	4617      	mov	r7, r2
  4032d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4032d4:	4293      	cmp	r3, r2
  4032d6:	db47      	blt.n	403368 <_svfprintf_r+0xeb4>
  4032d8:	9a07      	ldr	r2, [sp, #28]
  4032da:	07d5      	lsls	r5, r2, #31
  4032dc:	d444      	bmi.n	403368 <_svfprintf_r+0xeb4>
  4032de:	9912      	ldr	r1, [sp, #72]	; 0x48
  4032e0:	440e      	add	r6, r1
  4032e2:	1bf5      	subs	r5, r6, r7
  4032e4:	1acb      	subs	r3, r1, r3
  4032e6:	429d      	cmp	r5, r3
  4032e8:	bfa8      	it	ge
  4032ea:	461d      	movge	r5, r3
  4032ec:	2d00      	cmp	r5, #0
  4032ee:	462e      	mov	r6, r5
  4032f0:	dd0d      	ble.n	40330e <_svfprintf_r+0xe5a>
  4032f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4032f4:	f8c9 7000 	str.w	r7, [r9]
  4032f8:	3201      	adds	r2, #1
  4032fa:	442c      	add	r4, r5
  4032fc:	2a07      	cmp	r2, #7
  4032fe:	9425      	str	r4, [sp, #148]	; 0x94
  403300:	f8c9 5004 	str.w	r5, [r9, #4]
  403304:	9224      	str	r2, [sp, #144]	; 0x90
  403306:	f300 830b 	bgt.w	403920 <_svfprintf_r+0x146c>
  40330a:	f109 0908 	add.w	r9, r9, #8
  40330e:	2e00      	cmp	r6, #0
  403310:	bfac      	ite	ge
  403312:	1b9d      	subge	r5, r3, r6
  403314:	461d      	movlt	r5, r3
  403316:	2d00      	cmp	r5, #0
  403318:	f77f ab5c 	ble.w	4029d4 <_svfprintf_r+0x520>
  40331c:	4a2a      	ldr	r2, [pc, #168]	; (4033c8 <_svfprintf_r+0xf14>)
  40331e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403320:	920f      	str	r2, [sp, #60]	; 0x3c
  403322:	2d10      	cmp	r5, #16
  403324:	dd9d      	ble.n	403262 <_svfprintf_r+0xdae>
  403326:	2610      	movs	r6, #16
  403328:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40332a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40332e:	e004      	b.n	40333a <_svfprintf_r+0xe86>
  403330:	f109 0908 	add.w	r9, r9, #8
  403334:	3d10      	subs	r5, #16
  403336:	2d10      	cmp	r5, #16
  403338:	dd93      	ble.n	403262 <_svfprintf_r+0xdae>
  40333a:	3301      	adds	r3, #1
  40333c:	3410      	adds	r4, #16
  40333e:	2b07      	cmp	r3, #7
  403340:	9425      	str	r4, [sp, #148]	; 0x94
  403342:	9324      	str	r3, [sp, #144]	; 0x90
  403344:	f8c9 a000 	str.w	sl, [r9]
  403348:	f8c9 6004 	str.w	r6, [r9, #4]
  40334c:	ddf0      	ble.n	403330 <_svfprintf_r+0xe7c>
  40334e:	aa23      	add	r2, sp, #140	; 0x8c
  403350:	4659      	mov	r1, fp
  403352:	4638      	mov	r0, r7
  403354:	f002 fb22 	bl	40599c <__ssprint_r>
  403358:	2800      	cmp	r0, #0
  40335a:	f47f a9a4 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  40335e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403360:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403362:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403366:	e7e5      	b.n	403334 <_svfprintf_r+0xe80>
  403368:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40336a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40336c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40336e:	f8c9 1000 	str.w	r1, [r9]
  403372:	3201      	adds	r2, #1
  403374:	4404      	add	r4, r0
  403376:	2a07      	cmp	r2, #7
  403378:	9425      	str	r4, [sp, #148]	; 0x94
  40337a:	f8c9 0004 	str.w	r0, [r9, #4]
  40337e:	9224      	str	r2, [sp, #144]	; 0x90
  403380:	f300 82a9 	bgt.w	4038d6 <_svfprintf_r+0x1422>
  403384:	f109 0908 	add.w	r9, r9, #8
  403388:	e7a9      	b.n	4032de <_svfprintf_r+0xe2a>
  40338a:	9b07      	ldr	r3, [sp, #28]
  40338c:	07d8      	lsls	r0, r3, #31
  40338e:	f53f adf4 	bmi.w	402f7a <_svfprintf_r+0xac6>
  403392:	3501      	adds	r5, #1
  403394:	3401      	adds	r4, #1
  403396:	2301      	movs	r3, #1
  403398:	2d07      	cmp	r5, #7
  40339a:	9425      	str	r4, [sp, #148]	; 0x94
  40339c:	9524      	str	r5, [sp, #144]	; 0x90
  40339e:	f8c9 6000 	str.w	r6, [r9]
  4033a2:	f8c9 3004 	str.w	r3, [r9, #4]
  4033a6:	f77f ae1c 	ble.w	402fe2 <_svfprintf_r+0xb2e>
  4033aa:	e70f      	b.n	4031cc <_svfprintf_r+0xd18>
  4033ac:	aa23      	add	r2, sp, #140	; 0x8c
  4033ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4033b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033b2:	f002 faf3 	bl	40599c <__ssprint_r>
  4033b6:	2800      	cmp	r0, #0
  4033b8:	f47f a975 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4033bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033be:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4033c0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4033c4:	e5e7      	b.n	402f96 <_svfprintf_r+0xae2>
  4033c6:	bf00      	nop
  4033c8:	00406cdc 	.word	0x00406cdc
  4033cc:	aa23      	add	r2, sp, #140	; 0x8c
  4033ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4033d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033d2:	f002 fae3 	bl	40599c <__ssprint_r>
  4033d6:	2800      	cmp	r0, #0
  4033d8:	f47f a965 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4033dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4033e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4033e4:	e5e6      	b.n	402fb4 <_svfprintf_r+0xb00>
  4033e6:	aa23      	add	r2, sp, #140	; 0x8c
  4033e8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4033ea:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033ec:	f002 fad6 	bl	40599c <__ssprint_r>
  4033f0:	2800      	cmp	r0, #0
  4033f2:	f47f a958 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4033f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033f8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4033fc:	f7ff ba98 	b.w	402930 <_svfprintf_r+0x47c>
  403400:	9907      	ldr	r1, [sp, #28]
  403402:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  403406:	f43f af19 	beq.w	40323c <_svfprintf_r+0xd88>
  40340a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40340c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403410:	f1bb 0f00 	cmp.w	fp, #0
  403414:	8804      	ldrh	r4, [r0, #0]
  403416:	f100 0704 	add.w	r7, r0, #4
  40341a:	f04f 0500 	mov.w	r5, #0
  40341e:	f2c0 81b9 	blt.w	403794 <_svfprintf_r+0x12e0>
  403422:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  403426:	9307      	str	r3, [sp, #28]
  403428:	ea54 0305 	orrs.w	r3, r4, r5
  40342c:	970e      	str	r7, [sp, #56]	; 0x38
  40342e:	4617      	mov	r7, r2
  403430:	f47f a9e2 	bne.w	4027f8 <_svfprintf_r+0x344>
  403434:	f7ff bbbb 	b.w	402bae <_svfprintf_r+0x6fa>
  403438:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40343a:	4622      	mov	r2, r4
  40343c:	4620      	mov	r0, r4
  40343e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403440:	4623      	mov	r3, r4
  403442:	4621      	mov	r1, r4
  403444:	f003 fb88 	bl	406b58 <__aeabi_dcmpun>
  403448:	2800      	cmp	r0, #0
  40344a:	f040 8317 	bne.w	403a7c <_svfprintf_r+0x15c8>
  40344e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403450:	f1bb 3fff 	cmp.w	fp, #4294967295
  403454:	f023 0320 	bic.w	r3, r3, #32
  403458:	930d      	str	r3, [sp, #52]	; 0x34
  40345a:	f000 8270 	beq.w	40393e <_svfprintf_r+0x148a>
  40345e:	2b47      	cmp	r3, #71	; 0x47
  403460:	f000 8192 	beq.w	403788 <_svfprintf_r+0x12d4>
  403464:	9b07      	ldr	r3, [sp, #28]
  403466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40346a:	9310      	str	r3, [sp, #64]	; 0x40
  40346c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40346e:	1e1f      	subs	r7, r3, #0
  403470:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403472:	9308      	str	r3, [sp, #32]
  403474:	bfbb      	ittet	lt
  403476:	463b      	movlt	r3, r7
  403478:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40347c:	2300      	movge	r3, #0
  40347e:	232d      	movlt	r3, #45	; 0x2d
  403480:	930f      	str	r3, [sp, #60]	; 0x3c
  403482:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403484:	2b66      	cmp	r3, #102	; 0x66
  403486:	f000 825d 	beq.w	403944 <_svfprintf_r+0x1490>
  40348a:	2b46      	cmp	r3, #70	; 0x46
  40348c:	f000 8151 	beq.w	403732 <_svfprintf_r+0x127e>
  403490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403492:	9a08      	ldr	r2, [sp, #32]
  403494:	2b45      	cmp	r3, #69	; 0x45
  403496:	a821      	add	r0, sp, #132	; 0x84
  403498:	a91e      	add	r1, sp, #120	; 0x78
  40349a:	bf0c      	ite	eq
  40349c:	f10b 0501 	addeq.w	r5, fp, #1
  4034a0:	465d      	movne	r5, fp
  4034a2:	9004      	str	r0, [sp, #16]
  4034a4:	9103      	str	r1, [sp, #12]
  4034a6:	a81d      	add	r0, sp, #116	; 0x74
  4034a8:	2102      	movs	r1, #2
  4034aa:	463b      	mov	r3, r7
  4034ac:	9002      	str	r0, [sp, #8]
  4034ae:	9501      	str	r5, [sp, #4]
  4034b0:	9100      	str	r1, [sp, #0]
  4034b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4034b4:	f000 fbf0 	bl	403c98 <_dtoa_r>
  4034b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4034ba:	2b67      	cmp	r3, #103	; 0x67
  4034bc:	4606      	mov	r6, r0
  4034be:	f040 8290 	bne.w	4039e2 <_svfprintf_r+0x152e>
  4034c2:	9b07      	ldr	r3, [sp, #28]
  4034c4:	07da      	lsls	r2, r3, #31
  4034c6:	f140 82af 	bpl.w	403a28 <_svfprintf_r+0x1574>
  4034ca:	1974      	adds	r4, r6, r5
  4034cc:	9808      	ldr	r0, [sp, #32]
  4034ce:	4639      	mov	r1, r7
  4034d0:	2200      	movs	r2, #0
  4034d2:	2300      	movs	r3, #0
  4034d4:	f003 fb0e 	bl	406af4 <__aeabi_dcmpeq>
  4034d8:	2800      	cmp	r0, #0
  4034da:	f040 8190 	bne.w	4037fe <_svfprintf_r+0x134a>
  4034de:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4034e0:	429c      	cmp	r4, r3
  4034e2:	d906      	bls.n	4034f2 <_svfprintf_r+0x103e>
  4034e4:	2130      	movs	r1, #48	; 0x30
  4034e6:	1c5a      	adds	r2, r3, #1
  4034e8:	9221      	str	r2, [sp, #132]	; 0x84
  4034ea:	7019      	strb	r1, [r3, #0]
  4034ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4034ee:	429c      	cmp	r4, r3
  4034f0:	d8f9      	bhi.n	4034e6 <_svfprintf_r+0x1032>
  4034f2:	1b9b      	subs	r3, r3, r6
  4034f4:	9312      	str	r3, [sp, #72]	; 0x48
  4034f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4034f8:	2b47      	cmp	r3, #71	; 0x47
  4034fa:	f000 8179 	beq.w	4037f0 <_svfprintf_r+0x133c>
  4034fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403500:	2b65      	cmp	r3, #101	; 0x65
  403502:	f340 827d 	ble.w	403a00 <_svfprintf_r+0x154c>
  403506:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403508:	2b66      	cmp	r3, #102	; 0x66
  40350a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40350c:	9313      	str	r3, [sp, #76]	; 0x4c
  40350e:	f000 825b 	beq.w	4039c8 <_svfprintf_r+0x1514>
  403512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403514:	9912      	ldr	r1, [sp, #72]	; 0x48
  403516:	428a      	cmp	r2, r1
  403518:	f2c0 8230 	blt.w	40397c <_svfprintf_r+0x14c8>
  40351c:	9b07      	ldr	r3, [sp, #28]
  40351e:	07d9      	lsls	r1, r3, #31
  403520:	f100 8284 	bmi.w	403a2c <_svfprintf_r+0x1578>
  403524:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403528:	920d      	str	r2, [sp, #52]	; 0x34
  40352a:	2267      	movs	r2, #103	; 0x67
  40352c:	9211      	str	r2, [sp, #68]	; 0x44
  40352e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403530:	2a00      	cmp	r2, #0
  403532:	f040 8153 	bne.w	4037dc <_svfprintf_r+0x1328>
  403536:	9308      	str	r3, [sp, #32]
  403538:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40353a:	9307      	str	r3, [sp, #28]
  40353c:	4693      	mov	fp, r2
  40353e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403542:	f7ff b97d 	b.w	402840 <_svfprintf_r+0x38c>
  403546:	9907      	ldr	r1, [sp, #28]
  403548:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40354c:	d015      	beq.n	40357a <_svfprintf_r+0x10c6>
  40354e:	980e      	ldr	r0, [sp, #56]	; 0x38
  403550:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403554:	f1bb 0f00 	cmp.w	fp, #0
  403558:	8804      	ldrh	r4, [r0, #0]
  40355a:	f100 0704 	add.w	r7, r0, #4
  40355e:	f04f 0500 	mov.w	r5, #0
  403562:	db16      	blt.n	403592 <_svfprintf_r+0x10de>
  403564:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  403568:	9307      	str	r3, [sp, #28]
  40356a:	ea54 0305 	orrs.w	r3, r4, r5
  40356e:	970e      	str	r7, [sp, #56]	; 0x38
  403570:	f43f ac3a 	beq.w	402de8 <_svfprintf_r+0x934>
  403574:	4617      	mov	r7, r2
  403576:	f7ff b8c2 	b.w	4026fe <_svfprintf_r+0x24a>
  40357a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40357c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403580:	f1bb 0f00 	cmp.w	fp, #0
  403584:	680c      	ldr	r4, [r1, #0]
  403586:	f101 0704 	add.w	r7, r1, #4
  40358a:	f04f 0500 	mov.w	r5, #0
  40358e:	f280 80a5 	bge.w	4036dc <_svfprintf_r+0x1228>
  403592:	970e      	str	r7, [sp, #56]	; 0x38
  403594:	2700      	movs	r7, #0
  403596:	f7ff b8b2 	b.w	4026fe <_svfprintf_r+0x24a>
  40359a:	9b07      	ldr	r3, [sp, #28]
  40359c:	06df      	lsls	r7, r3, #27
  40359e:	d40b      	bmi.n	4035b8 <_svfprintf_r+0x1104>
  4035a0:	9b07      	ldr	r3, [sp, #28]
  4035a2:	065e      	lsls	r6, r3, #25
  4035a4:	d508      	bpl.n	4035b8 <_svfprintf_r+0x1104>
  4035a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4035a8:	6813      	ldr	r3, [r2, #0]
  4035aa:	3204      	adds	r2, #4
  4035ac:	920e      	str	r2, [sp, #56]	; 0x38
  4035ae:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4035b2:	801a      	strh	r2, [r3, #0]
  4035b4:	f7fe bfa4 	b.w	402500 <_svfprintf_r+0x4c>
  4035b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4035ba:	6813      	ldr	r3, [r2, #0]
  4035bc:	3204      	adds	r2, #4
  4035be:	920e      	str	r2, [sp, #56]	; 0x38
  4035c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4035c2:	601a      	str	r2, [r3, #0]
  4035c4:	f7fe bf9c 	b.w	402500 <_svfprintf_r+0x4c>
  4035c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4035ca:	9b07      	ldr	r3, [sp, #28]
  4035cc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4035d0:	4613      	mov	r3, r2
  4035d2:	f103 0304 	add.w	r3, r3, #4
  4035d6:	bf0c      	ite	eq
  4035d8:	6814      	ldreq	r4, [r2, #0]
  4035da:	8814      	ldrhne	r4, [r2, #0]
  4035dc:	930e      	str	r3, [sp, #56]	; 0x38
  4035de:	2500      	movs	r5, #0
  4035e0:	f7ff bb02 	b.w	402be8 <_svfprintf_r+0x734>
  4035e4:	2700      	movs	r7, #0
  4035e6:	45bb      	cmp	fp, r7
  4035e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4035ec:	f6ff ac0e 	blt.w	402e0c <_svfprintf_r+0x958>
  4035f0:	9b07      	ldr	r3, [sp, #28]
  4035f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4035f6:	9307      	str	r3, [sp, #28]
  4035f8:	f7ff bbd6 	b.w	402da8 <_svfprintf_r+0x8f4>
  4035fc:	4614      	mov	r4, r2
  4035fe:	3301      	adds	r3, #1
  403600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403602:	9324      	str	r3, [sp, #144]	; 0x90
  403604:	442c      	add	r4, r5
  403606:	2b07      	cmp	r3, #7
  403608:	9425      	str	r4, [sp, #148]	; 0x94
  40360a:	e889 0024 	stmia.w	r9, {r2, r5}
  40360e:	f73f ae51 	bgt.w	4032b4 <_svfprintf_r+0xe00>
  403612:	f109 0908 	add.w	r9, r9, #8
  403616:	e658      	b.n	4032ca <_svfprintf_r+0xe16>
  403618:	aa23      	add	r2, sp, #140	; 0x8c
  40361a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40361c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40361e:	f002 f9bd 	bl	40599c <__ssprint_r>
  403622:	2800      	cmp	r0, #0
  403624:	f47f a83f 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403628:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40362a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40362e:	e40f      	b.n	402e50 <_svfprintf_r+0x99c>
  403630:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403632:	f7ff bbe4 	b.w	402dfe <_svfprintf_r+0x94a>
  403636:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403638:	4ab5      	ldr	r2, [pc, #724]	; (403910 <_svfprintf_r+0x145c>)
  40363a:	f8c9 2000 	str.w	r2, [r9]
  40363e:	3301      	adds	r3, #1
  403640:	3401      	adds	r4, #1
  403642:	2201      	movs	r2, #1
  403644:	2b07      	cmp	r3, #7
  403646:	9425      	str	r4, [sp, #148]	; 0x94
  403648:	9324      	str	r3, [sp, #144]	; 0x90
  40364a:	f8c9 2004 	str.w	r2, [r9, #4]
  40364e:	f300 808e 	bgt.w	40376e <_svfprintf_r+0x12ba>
  403652:	f109 0908 	add.w	r9, r9, #8
  403656:	b92d      	cbnz	r5, 403664 <_svfprintf_r+0x11b0>
  403658:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40365a:	b91b      	cbnz	r3, 403664 <_svfprintf_r+0x11b0>
  40365c:	9b07      	ldr	r3, [sp, #28]
  40365e:	07df      	lsls	r7, r3, #31
  403660:	f57f a9b8 	bpl.w	4029d4 <_svfprintf_r+0x520>
  403664:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403666:	9916      	ldr	r1, [sp, #88]	; 0x58
  403668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40366a:	f8c9 2000 	str.w	r2, [r9]
  40366e:	3301      	adds	r3, #1
  403670:	440c      	add	r4, r1
  403672:	2b07      	cmp	r3, #7
  403674:	9425      	str	r4, [sp, #148]	; 0x94
  403676:	f8c9 1004 	str.w	r1, [r9, #4]
  40367a:	9324      	str	r3, [sp, #144]	; 0x90
  40367c:	f300 81c2 	bgt.w	403a04 <_svfprintf_r+0x1550>
  403680:	f109 0908 	add.w	r9, r9, #8
  403684:	426d      	negs	r5, r5
  403686:	2d00      	cmp	r5, #0
  403688:	f340 809b 	ble.w	4037c2 <_svfprintf_r+0x130e>
  40368c:	4aa1      	ldr	r2, [pc, #644]	; (403914 <_svfprintf_r+0x1460>)
  40368e:	920f      	str	r2, [sp, #60]	; 0x3c
  403690:	2d10      	cmp	r5, #16
  403692:	f340 80c3 	ble.w	40381c <_svfprintf_r+0x1368>
  403696:	4622      	mov	r2, r4
  403698:	2710      	movs	r7, #16
  40369a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40369e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4036a0:	e005      	b.n	4036ae <_svfprintf_r+0x11fa>
  4036a2:	f109 0908 	add.w	r9, r9, #8
  4036a6:	3d10      	subs	r5, #16
  4036a8:	2d10      	cmp	r5, #16
  4036aa:	f340 80b6 	ble.w	40381a <_svfprintf_r+0x1366>
  4036ae:	3301      	adds	r3, #1
  4036b0:	3210      	adds	r2, #16
  4036b2:	2b07      	cmp	r3, #7
  4036b4:	9225      	str	r2, [sp, #148]	; 0x94
  4036b6:	9324      	str	r3, [sp, #144]	; 0x90
  4036b8:	f8c9 a000 	str.w	sl, [r9]
  4036bc:	f8c9 7004 	str.w	r7, [r9, #4]
  4036c0:	ddef      	ble.n	4036a2 <_svfprintf_r+0x11ee>
  4036c2:	aa23      	add	r2, sp, #140	; 0x8c
  4036c4:	4621      	mov	r1, r4
  4036c6:	4658      	mov	r0, fp
  4036c8:	f002 f968 	bl	40599c <__ssprint_r>
  4036cc:	2800      	cmp	r0, #0
  4036ce:	f47e afea 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4036d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4036d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4036d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4036da:	e7e4      	b.n	4036a6 <_svfprintf_r+0x11f2>
  4036dc:	9a07      	ldr	r2, [sp, #28]
  4036de:	f7ff ba38 	b.w	402b52 <_svfprintf_r+0x69e>
  4036e2:	9a07      	ldr	r2, [sp, #28]
  4036e4:	e590      	b.n	403208 <_svfprintf_r+0xd54>
  4036e6:	9b07      	ldr	r3, [sp, #28]
  4036e8:	f043 0320 	orr.w	r3, r3, #32
  4036ec:	9307      	str	r3, [sp, #28]
  4036ee:	f108 0801 	add.w	r8, r8, #1
  4036f2:	f898 3000 	ldrb.w	r3, [r8]
  4036f6:	f7fe bf36 	b.w	402566 <_svfprintf_r+0xb2>
  4036fa:	aa23      	add	r2, sp, #140	; 0x8c
  4036fc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4036fe:	980a      	ldr	r0, [sp, #40]	; 0x28
  403700:	f002 f94c 	bl	40599c <__ssprint_r>
  403704:	2800      	cmp	r0, #0
  403706:	f47e afce 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  40370a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40370c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403710:	f7ff bbb6 	b.w	402e80 <_svfprintf_r+0x9cc>
  403714:	2140      	movs	r1, #64	; 0x40
  403716:	980a      	ldr	r0, [sp, #40]	; 0x28
  403718:	f001 fa02 	bl	404b20 <_malloc_r>
  40371c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40371e:	6010      	str	r0, [r2, #0]
  403720:	6110      	str	r0, [r2, #16]
  403722:	2800      	cmp	r0, #0
  403724:	f000 81e5 	beq.w	403af2 <_svfprintf_r+0x163e>
  403728:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40372a:	2340      	movs	r3, #64	; 0x40
  40372c:	6153      	str	r3, [r2, #20]
  40372e:	f7fe bed8 	b.w	4024e2 <_svfprintf_r+0x2e>
  403732:	a821      	add	r0, sp, #132	; 0x84
  403734:	a91e      	add	r1, sp, #120	; 0x78
  403736:	9004      	str	r0, [sp, #16]
  403738:	9103      	str	r1, [sp, #12]
  40373a:	a81d      	add	r0, sp, #116	; 0x74
  40373c:	2103      	movs	r1, #3
  40373e:	9002      	str	r0, [sp, #8]
  403740:	9a08      	ldr	r2, [sp, #32]
  403742:	f8cd b004 	str.w	fp, [sp, #4]
  403746:	463b      	mov	r3, r7
  403748:	9100      	str	r1, [sp, #0]
  40374a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40374c:	f000 faa4 	bl	403c98 <_dtoa_r>
  403750:	465d      	mov	r5, fp
  403752:	4606      	mov	r6, r0
  403754:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403756:	2b46      	cmp	r3, #70	; 0x46
  403758:	eb06 0405 	add.w	r4, r6, r5
  40375c:	f47f aeb6 	bne.w	4034cc <_svfprintf_r+0x1018>
  403760:	7833      	ldrb	r3, [r6, #0]
  403762:	2b30      	cmp	r3, #48	; 0x30
  403764:	f000 817c 	beq.w	403a60 <_svfprintf_r+0x15ac>
  403768:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40376a:	442c      	add	r4, r5
  40376c:	e6ae      	b.n	4034cc <_svfprintf_r+0x1018>
  40376e:	aa23      	add	r2, sp, #140	; 0x8c
  403770:	9909      	ldr	r1, [sp, #36]	; 0x24
  403772:	980a      	ldr	r0, [sp, #40]	; 0x28
  403774:	f002 f912 	bl	40599c <__ssprint_r>
  403778:	2800      	cmp	r0, #0
  40377a:	f47e af94 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  40377e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403780:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403782:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403786:	e766      	b.n	403656 <_svfprintf_r+0x11a2>
  403788:	f1bb 0f00 	cmp.w	fp, #0
  40378c:	bf08      	it	eq
  40378e:	f04f 0b01 	moveq.w	fp, #1
  403792:	e667      	b.n	403464 <_svfprintf_r+0xfb0>
  403794:	970e      	str	r7, [sp, #56]	; 0x38
  403796:	4617      	mov	r7, r2
  403798:	e55e      	b.n	403258 <_svfprintf_r+0xda4>
  40379a:	4630      	mov	r0, r6
  40379c:	f002 f890 	bl	4058c0 <strlen>
  4037a0:	46a3      	mov	fp, r4
  4037a2:	4603      	mov	r3, r0
  4037a4:	900d      	str	r0, [sp, #52]	; 0x34
  4037a6:	f7ff baf4 	b.w	402d92 <_svfprintf_r+0x8de>
  4037aa:	aa23      	add	r2, sp, #140	; 0x8c
  4037ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4037ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4037b0:	f002 f8f4 	bl	40599c <__ssprint_r>
  4037b4:	2800      	cmp	r0, #0
  4037b6:	f47e af76 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4037ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4037bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4037be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4037c2:	9912      	ldr	r1, [sp, #72]	; 0x48
  4037c4:	f8c9 6000 	str.w	r6, [r9]
  4037c8:	3301      	adds	r3, #1
  4037ca:	440c      	add	r4, r1
  4037cc:	2b07      	cmp	r3, #7
  4037ce:	9425      	str	r4, [sp, #148]	; 0x94
  4037d0:	9324      	str	r3, [sp, #144]	; 0x90
  4037d2:	f8c9 1004 	str.w	r1, [r9, #4]
  4037d6:	f77f a8fb 	ble.w	4029d0 <_svfprintf_r+0x51c>
  4037da:	e411      	b.n	403000 <_svfprintf_r+0xb4c>
  4037dc:	272d      	movs	r7, #45	; 0x2d
  4037de:	9308      	str	r3, [sp, #32]
  4037e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4037e2:	9307      	str	r3, [sp, #28]
  4037e4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4037e8:	f04f 0b00 	mov.w	fp, #0
  4037ec:	f7ff b829 	b.w	402842 <_svfprintf_r+0x38e>
  4037f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4037f2:	1cdd      	adds	r5, r3, #3
  4037f4:	db1e      	blt.n	403834 <_svfprintf_r+0x1380>
  4037f6:	459b      	cmp	fp, r3
  4037f8:	db1c      	blt.n	403834 <_svfprintf_r+0x1380>
  4037fa:	9313      	str	r3, [sp, #76]	; 0x4c
  4037fc:	e689      	b.n	403512 <_svfprintf_r+0x105e>
  4037fe:	4623      	mov	r3, r4
  403800:	e677      	b.n	4034f2 <_svfprintf_r+0x103e>
  403802:	aa23      	add	r2, sp, #140	; 0x8c
  403804:	9909      	ldr	r1, [sp, #36]	; 0x24
  403806:	980a      	ldr	r0, [sp, #40]	; 0x28
  403808:	f002 f8c8 	bl	40599c <__ssprint_r>
  40380c:	2800      	cmp	r0, #0
  40380e:	f47e af4a 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403812:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403814:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403818:	e459      	b.n	4030ce <_svfprintf_r+0xc1a>
  40381a:	4614      	mov	r4, r2
  40381c:	3301      	adds	r3, #1
  40381e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403820:	9324      	str	r3, [sp, #144]	; 0x90
  403822:	442c      	add	r4, r5
  403824:	2b07      	cmp	r3, #7
  403826:	9425      	str	r4, [sp, #148]	; 0x94
  403828:	e889 0024 	stmia.w	r9, {r2, r5}
  40382c:	dcbd      	bgt.n	4037aa <_svfprintf_r+0x12f6>
  40382e:	f109 0908 	add.w	r9, r9, #8
  403832:	e7c6      	b.n	4037c2 <_svfprintf_r+0x130e>
  403834:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403836:	3a02      	subs	r2, #2
  403838:	9211      	str	r2, [sp, #68]	; 0x44
  40383a:	3b01      	subs	r3, #1
  40383c:	2b00      	cmp	r3, #0
  40383e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403842:	931d      	str	r3, [sp, #116]	; 0x74
  403844:	bfb8      	it	lt
  403846:	425b      	neglt	r3, r3
  403848:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  40384c:	bfb4      	ite	lt
  40384e:	222d      	movlt	r2, #45	; 0x2d
  403850:	222b      	movge	r2, #43	; 0x2b
  403852:	2b09      	cmp	r3, #9
  403854:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  403858:	f340 80f1 	ble.w	403a3e <_svfprintf_r+0x158a>
  40385c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  403860:	4604      	mov	r4, r0
  403862:	4a2d      	ldr	r2, [pc, #180]	; (403918 <_svfprintf_r+0x1464>)
  403864:	fb82 2103 	smull	r2, r1, r2, r3
  403868:	17da      	asrs	r2, r3, #31
  40386a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40386e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  403872:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  403876:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40387a:	2a09      	cmp	r2, #9
  40387c:	4613      	mov	r3, r2
  40387e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  403882:	dcee      	bgt.n	403862 <_svfprintf_r+0x13ae>
  403884:	4621      	mov	r1, r4
  403886:	3330      	adds	r3, #48	; 0x30
  403888:	b2da      	uxtb	r2, r3
  40388a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40388e:	4288      	cmp	r0, r1
  403890:	f240 813a 	bls.w	403b08 <_svfprintf_r+0x1654>
  403894:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  403898:	4623      	mov	r3, r4
  40389a:	e001      	b.n	4038a0 <_svfprintf_r+0x13ec>
  40389c:	f813 2b01 	ldrb.w	r2, [r3], #1
  4038a0:	f801 2b01 	strb.w	r2, [r1], #1
  4038a4:	4298      	cmp	r0, r3
  4038a6:	d1f9      	bne.n	40389c <_svfprintf_r+0x13e8>
  4038a8:	1c43      	adds	r3, r0, #1
  4038aa:	1b1b      	subs	r3, r3, r4
  4038ac:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4038b0:	4413      	add	r3, r2
  4038b2:	aa1f      	add	r2, sp, #124	; 0x7c
  4038b4:	1a9b      	subs	r3, r3, r2
  4038b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4038b8:	9319      	str	r3, [sp, #100]	; 0x64
  4038ba:	2a01      	cmp	r2, #1
  4038bc:	4413      	add	r3, r2
  4038be:	930d      	str	r3, [sp, #52]	; 0x34
  4038c0:	f340 80ea 	ble.w	403a98 <_svfprintf_r+0x15e4>
  4038c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4038c8:	4413      	add	r3, r2
  4038ca:	2200      	movs	r2, #0
  4038cc:	930d      	str	r3, [sp, #52]	; 0x34
  4038ce:	9213      	str	r2, [sp, #76]	; 0x4c
  4038d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4038d4:	e62b      	b.n	40352e <_svfprintf_r+0x107a>
  4038d6:	aa23      	add	r2, sp, #140	; 0x8c
  4038d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4038da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4038dc:	f002 f85e 	bl	40599c <__ssprint_r>
  4038e0:	2800      	cmp	r0, #0
  4038e2:	f47e aee0 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  4038e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4038e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4038ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4038ee:	e4f6      	b.n	4032de <_svfprintf_r+0xe2a>
  4038f0:	2d06      	cmp	r5, #6
  4038f2:	462b      	mov	r3, r5
  4038f4:	bf28      	it	cs
  4038f6:	2306      	movcs	r3, #6
  4038f8:	930d      	str	r3, [sp, #52]	; 0x34
  4038fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4038fe:	46b3      	mov	fp, r6
  403900:	970e      	str	r7, [sp, #56]	; 0x38
  403902:	9613      	str	r6, [sp, #76]	; 0x4c
  403904:	4637      	mov	r7, r6
  403906:	9308      	str	r3, [sp, #32]
  403908:	4e04      	ldr	r6, [pc, #16]	; (40391c <_svfprintf_r+0x1468>)
  40390a:	f7fe bf99 	b.w	402840 <_svfprintf_r+0x38c>
  40390e:	bf00      	nop
  403910:	00406d2c 	.word	0x00406d2c
  403914:	00406cdc 	.word	0x00406cdc
  403918:	66666667 	.word	0x66666667
  40391c:	00406d24 	.word	0x00406d24
  403920:	aa23      	add	r2, sp, #140	; 0x8c
  403922:	9909      	ldr	r1, [sp, #36]	; 0x24
  403924:	980a      	ldr	r0, [sp, #40]	; 0x28
  403926:	f002 f839 	bl	40599c <__ssprint_r>
  40392a:	2800      	cmp	r0, #0
  40392c:	f47e aebb 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403932:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403934:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403936:	1ad3      	subs	r3, r2, r3
  403938:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40393c:	e4e7      	b.n	40330e <_svfprintf_r+0xe5a>
  40393e:	f04f 0b06 	mov.w	fp, #6
  403942:	e58f      	b.n	403464 <_svfprintf_r+0xfb0>
  403944:	a821      	add	r0, sp, #132	; 0x84
  403946:	a91e      	add	r1, sp, #120	; 0x78
  403948:	9004      	str	r0, [sp, #16]
  40394a:	9103      	str	r1, [sp, #12]
  40394c:	a81d      	add	r0, sp, #116	; 0x74
  40394e:	2103      	movs	r1, #3
  403950:	9002      	str	r0, [sp, #8]
  403952:	9a08      	ldr	r2, [sp, #32]
  403954:	f8cd b004 	str.w	fp, [sp, #4]
  403958:	463b      	mov	r3, r7
  40395a:	9100      	str	r1, [sp, #0]
  40395c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40395e:	f000 f99b 	bl	403c98 <_dtoa_r>
  403962:	465d      	mov	r5, fp
  403964:	4606      	mov	r6, r0
  403966:	eb00 040b 	add.w	r4, r0, fp
  40396a:	e6f9      	b.n	403760 <_svfprintf_r+0x12ac>
  40396c:	9307      	str	r3, [sp, #28]
  40396e:	f7ff b959 	b.w	402c24 <_svfprintf_r+0x770>
  403972:	272d      	movs	r7, #45	; 0x2d
  403974:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403978:	f7ff b8b2 	b.w	402ae0 <_svfprintf_r+0x62c>
  40397c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40397e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403980:	4413      	add	r3, r2
  403982:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403984:	930d      	str	r3, [sp, #52]	; 0x34
  403986:	2a00      	cmp	r2, #0
  403988:	dd7e      	ble.n	403a88 <_svfprintf_r+0x15d4>
  40398a:	2267      	movs	r2, #103	; 0x67
  40398c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403990:	9211      	str	r2, [sp, #68]	; 0x44
  403992:	e5cc      	b.n	40352e <_svfprintf_r+0x107a>
  403994:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  403998:	970e      	str	r7, [sp, #56]	; 0x38
  40399a:	9308      	str	r3, [sp, #32]
  40399c:	950d      	str	r5, [sp, #52]	; 0x34
  40399e:	4683      	mov	fp, r0
  4039a0:	9013      	str	r0, [sp, #76]	; 0x4c
  4039a2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4039a6:	f7fe bf4b 	b.w	402840 <_svfprintf_r+0x38c>
  4039aa:	9b07      	ldr	r3, [sp, #28]
  4039ac:	07db      	lsls	r3, r3, #31
  4039ae:	465f      	mov	r7, fp
  4039b0:	d505      	bpl.n	4039be <_svfprintf_r+0x150a>
  4039b2:	ae40      	add	r6, sp, #256	; 0x100
  4039b4:	2330      	movs	r3, #48	; 0x30
  4039b6:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4039ba:	f7fe bf37 	b.w	40282c <_svfprintf_r+0x378>
  4039be:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4039c2:	ae30      	add	r6, sp, #192	; 0xc0
  4039c4:	f7fe bf35 	b.w	402832 <_svfprintf_r+0x37e>
  4039c8:	2b00      	cmp	r3, #0
  4039ca:	dd7d      	ble.n	403ac8 <_svfprintf_r+0x1614>
  4039cc:	f1bb 0f00 	cmp.w	fp, #0
  4039d0:	d13d      	bne.n	403a4e <_svfprintf_r+0x159a>
  4039d2:	9a07      	ldr	r2, [sp, #28]
  4039d4:	07d4      	lsls	r4, r2, #31
  4039d6:	d43a      	bmi.n	403a4e <_svfprintf_r+0x159a>
  4039d8:	461a      	mov	r2, r3
  4039da:	920d      	str	r2, [sp, #52]	; 0x34
  4039dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4039e0:	e5a5      	b.n	40352e <_svfprintf_r+0x107a>
  4039e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4039e4:	2b47      	cmp	r3, #71	; 0x47
  4039e6:	f47f ad70 	bne.w	4034ca <_svfprintf_r+0x1016>
  4039ea:	9b07      	ldr	r3, [sp, #28]
  4039ec:	07db      	lsls	r3, r3, #31
  4039ee:	f53f aeb1 	bmi.w	403754 <_svfprintf_r+0x12a0>
  4039f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4039f4:	1b9b      	subs	r3, r3, r6
  4039f6:	9312      	str	r3, [sp, #72]	; 0x48
  4039f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039fa:	2b47      	cmp	r3, #71	; 0x47
  4039fc:	f43f aef8 	beq.w	4037f0 <_svfprintf_r+0x133c>
  403a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403a02:	e71a      	b.n	40383a <_svfprintf_r+0x1386>
  403a04:	aa23      	add	r2, sp, #140	; 0x8c
  403a06:	9909      	ldr	r1, [sp, #36]	; 0x24
  403a08:	980a      	ldr	r0, [sp, #40]	; 0x28
  403a0a:	f001 ffc7 	bl	40599c <__ssprint_r>
  403a0e:	2800      	cmp	r0, #0
  403a10:	f47e ae49 	bne.w	4026a6 <_svfprintf_r+0x1f2>
  403a14:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403a16:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a1a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403a1e:	e631      	b.n	403684 <_svfprintf_r+0x11d0>
  403a20:	46a0      	mov	r8, r4
  403a22:	2500      	movs	r5, #0
  403a24:	f7fe bda1 	b.w	40256a <_svfprintf_r+0xb6>
  403a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403a2a:	e562      	b.n	4034f2 <_svfprintf_r+0x103e>
  403a2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403a30:	4413      	add	r3, r2
  403a32:	2267      	movs	r2, #103	; 0x67
  403a34:	930d      	str	r3, [sp, #52]	; 0x34
  403a36:	9211      	str	r2, [sp, #68]	; 0x44
  403a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403a3c:	e577      	b.n	40352e <_svfprintf_r+0x107a>
  403a3e:	3330      	adds	r3, #48	; 0x30
  403a40:	2230      	movs	r2, #48	; 0x30
  403a42:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  403a46:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  403a4a:	ab20      	add	r3, sp, #128	; 0x80
  403a4c:	e731      	b.n	4038b2 <_svfprintf_r+0x13fe>
  403a4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403a50:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403a52:	189d      	adds	r5, r3, r2
  403a54:	eb05 030b 	add.w	r3, r5, fp
  403a58:	930d      	str	r3, [sp, #52]	; 0x34
  403a5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403a5e:	e566      	b.n	40352e <_svfprintf_r+0x107a>
  403a60:	9808      	ldr	r0, [sp, #32]
  403a62:	4639      	mov	r1, r7
  403a64:	2200      	movs	r2, #0
  403a66:	2300      	movs	r3, #0
  403a68:	f003 f844 	bl	406af4 <__aeabi_dcmpeq>
  403a6c:	2800      	cmp	r0, #0
  403a6e:	f47f ae7b 	bne.w	403768 <_svfprintf_r+0x12b4>
  403a72:	f1c5 0501 	rsb	r5, r5, #1
  403a76:	951d      	str	r5, [sp, #116]	; 0x74
  403a78:	442c      	add	r4, r5
  403a7a:	e527      	b.n	4034cc <_svfprintf_r+0x1018>
  403a7c:	4e32      	ldr	r6, [pc, #200]	; (403b48 <_svfprintf_r+0x1694>)
  403a7e:	4b33      	ldr	r3, [pc, #204]	; (403b4c <_svfprintf_r+0x1698>)
  403a80:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403a84:	f7ff b82e 	b.w	402ae4 <_svfprintf_r+0x630>
  403a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403a8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a8c:	f1c3 0301 	rsb	r3, r3, #1
  403a90:	441a      	add	r2, r3
  403a92:	4613      	mov	r3, r2
  403a94:	920d      	str	r2, [sp, #52]	; 0x34
  403a96:	e778      	b.n	40398a <_svfprintf_r+0x14d6>
  403a98:	9b07      	ldr	r3, [sp, #28]
  403a9a:	f013 0301 	ands.w	r3, r3, #1
  403a9e:	f47f af11 	bne.w	4038c4 <_svfprintf_r+0x1410>
  403aa2:	9313      	str	r3, [sp, #76]	; 0x4c
  403aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403aaa:	e540      	b.n	40352e <_svfprintf_r+0x107a>
  403aac:	980e      	ldr	r0, [sp, #56]	; 0x38
  403aae:	f898 3001 	ldrb.w	r3, [r8, #1]
  403ab2:	6805      	ldr	r5, [r0, #0]
  403ab4:	3004      	adds	r0, #4
  403ab6:	2d00      	cmp	r5, #0
  403ab8:	900e      	str	r0, [sp, #56]	; 0x38
  403aba:	46a0      	mov	r8, r4
  403abc:	f6be ad53 	bge.w	402566 <_svfprintf_r+0xb2>
  403ac0:	f04f 35ff 	mov.w	r5, #4294967295
  403ac4:	f7fe bd4f 	b.w	402566 <_svfprintf_r+0xb2>
  403ac8:	f1bb 0f00 	cmp.w	fp, #0
  403acc:	d102      	bne.n	403ad4 <_svfprintf_r+0x1620>
  403ace:	9b07      	ldr	r3, [sp, #28]
  403ad0:	07d8      	lsls	r0, r3, #31
  403ad2:	d507      	bpl.n	403ae4 <_svfprintf_r+0x1630>
  403ad4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403ad6:	1c5d      	adds	r5, r3, #1
  403ad8:	eb05 030b 	add.w	r3, r5, fp
  403adc:	930d      	str	r3, [sp, #52]	; 0x34
  403ade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ae2:	e524      	b.n	40352e <_svfprintf_r+0x107a>
  403ae4:	2301      	movs	r3, #1
  403ae6:	930d      	str	r3, [sp, #52]	; 0x34
  403ae8:	e521      	b.n	40352e <_svfprintf_r+0x107a>
  403aea:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403aee:	f7ff b921 	b.w	402d34 <_svfprintf_r+0x880>
  403af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403af4:	230c      	movs	r3, #12
  403af6:	6013      	str	r3, [r2, #0]
  403af8:	f04f 30ff 	mov.w	r0, #4294967295
  403afc:	f7fe bddc 	b.w	4026b8 <_svfprintf_r+0x204>
  403b00:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b04:	f7ff b8f9 	b.w	402cfa <_svfprintf_r+0x846>
  403b08:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  403b0c:	e6d1      	b.n	4038b2 <_svfprintf_r+0x13fe>
  403b0e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b12:	f7fe bdd9 	b.w	4026c8 <_svfprintf_r+0x214>
  403b16:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b1a:	f7ff b857 	b.w	402bcc <_svfprintf_r+0x718>
  403b1e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b22:	f7ff b825 	b.w	402b70 <_svfprintf_r+0x6bc>
  403b26:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b2a:	f7ff b94c 	b.w	402dc6 <_svfprintf_r+0x912>
  403b2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b32:	f7fe bff3 	b.w	402b1c <_svfprintf_r+0x668>
  403b36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b3a:	f7fe bfa3 	b.w	402a84 <_svfprintf_r+0x5d0>
  403b3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403b42:	f7fe be33 	b.w	4027ac <_svfprintf_r+0x2f8>
  403b46:	bf00      	nop
  403b48:	00406cf8 	.word	0x00406cf8
  403b4c:	00406cf4 	.word	0x00406cf4

00403b50 <register_fini>:
  403b50:	4b02      	ldr	r3, [pc, #8]	; (403b5c <register_fini+0xc>)
  403b52:	b113      	cbz	r3, 403b5a <register_fini+0xa>
  403b54:	4802      	ldr	r0, [pc, #8]	; (403b60 <register_fini+0x10>)
  403b56:	f000 b805 	b.w	403b64 <atexit>
  403b5a:	4770      	bx	lr
  403b5c:	00000000 	.word	0x00000000
  403b60:	00404af1 	.word	0x00404af1

00403b64 <atexit>:
  403b64:	2300      	movs	r3, #0
  403b66:	4601      	mov	r1, r0
  403b68:	461a      	mov	r2, r3
  403b6a:	4618      	mov	r0, r3
  403b6c:	f001 bf96 	b.w	405a9c <__register_exitproc>

00403b70 <quorem>:
  403b70:	6902      	ldr	r2, [r0, #16]
  403b72:	690b      	ldr	r3, [r1, #16]
  403b74:	4293      	cmp	r3, r2
  403b76:	f300 808d 	bgt.w	403c94 <quorem+0x124>
  403b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b7e:	f103 38ff 	add.w	r8, r3, #4294967295
  403b82:	f101 0714 	add.w	r7, r1, #20
  403b86:	f100 0b14 	add.w	fp, r0, #20
  403b8a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403b8e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403b92:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403b96:	b083      	sub	sp, #12
  403b98:	3201      	adds	r2, #1
  403b9a:	fbb3 f9f2 	udiv	r9, r3, r2
  403b9e:	eb0b 0304 	add.w	r3, fp, r4
  403ba2:	9400      	str	r4, [sp, #0]
  403ba4:	eb07 0a04 	add.w	sl, r7, r4
  403ba8:	9301      	str	r3, [sp, #4]
  403baa:	f1b9 0f00 	cmp.w	r9, #0
  403bae:	d039      	beq.n	403c24 <quorem+0xb4>
  403bb0:	2500      	movs	r5, #0
  403bb2:	46bc      	mov	ip, r7
  403bb4:	46de      	mov	lr, fp
  403bb6:	462b      	mov	r3, r5
  403bb8:	f85c 6b04 	ldr.w	r6, [ip], #4
  403bbc:	f8de 2000 	ldr.w	r2, [lr]
  403bc0:	b2b4      	uxth	r4, r6
  403bc2:	fb09 5504 	mla	r5, r9, r4, r5
  403bc6:	0c36      	lsrs	r6, r6, #16
  403bc8:	0c2c      	lsrs	r4, r5, #16
  403bca:	fb09 4406 	mla	r4, r9, r6, r4
  403bce:	b2ad      	uxth	r5, r5
  403bd0:	1b5b      	subs	r3, r3, r5
  403bd2:	b2a6      	uxth	r6, r4
  403bd4:	fa13 f382 	uxtah	r3, r3, r2
  403bd8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  403bdc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403be0:	b29b      	uxth	r3, r3
  403be2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403be6:	45e2      	cmp	sl, ip
  403be8:	f84e 3b04 	str.w	r3, [lr], #4
  403bec:	ea4f 4514 	mov.w	r5, r4, lsr #16
  403bf0:	ea4f 4326 	mov.w	r3, r6, asr #16
  403bf4:	d2e0      	bcs.n	403bb8 <quorem+0x48>
  403bf6:	9b00      	ldr	r3, [sp, #0]
  403bf8:	f85b 3003 	ldr.w	r3, [fp, r3]
  403bfc:	b993      	cbnz	r3, 403c24 <quorem+0xb4>
  403bfe:	9c01      	ldr	r4, [sp, #4]
  403c00:	1f23      	subs	r3, r4, #4
  403c02:	459b      	cmp	fp, r3
  403c04:	d20c      	bcs.n	403c20 <quorem+0xb0>
  403c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403c0a:	b94b      	cbnz	r3, 403c20 <quorem+0xb0>
  403c0c:	f1a4 0308 	sub.w	r3, r4, #8
  403c10:	e002      	b.n	403c18 <quorem+0xa8>
  403c12:	681a      	ldr	r2, [r3, #0]
  403c14:	3b04      	subs	r3, #4
  403c16:	b91a      	cbnz	r2, 403c20 <quorem+0xb0>
  403c18:	459b      	cmp	fp, r3
  403c1a:	f108 38ff 	add.w	r8, r8, #4294967295
  403c1e:	d3f8      	bcc.n	403c12 <quorem+0xa2>
  403c20:	f8c0 8010 	str.w	r8, [r0, #16]
  403c24:	4604      	mov	r4, r0
  403c26:	f001 fd29 	bl	40567c <__mcmp>
  403c2a:	2800      	cmp	r0, #0
  403c2c:	db2e      	blt.n	403c8c <quorem+0x11c>
  403c2e:	f109 0901 	add.w	r9, r9, #1
  403c32:	465d      	mov	r5, fp
  403c34:	2300      	movs	r3, #0
  403c36:	f857 1b04 	ldr.w	r1, [r7], #4
  403c3a:	6828      	ldr	r0, [r5, #0]
  403c3c:	b28a      	uxth	r2, r1
  403c3e:	1a9a      	subs	r2, r3, r2
  403c40:	0c09      	lsrs	r1, r1, #16
  403c42:	fa12 f280 	uxtah	r2, r2, r0
  403c46:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  403c4a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  403c4e:	b291      	uxth	r1, r2
  403c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  403c54:	45ba      	cmp	sl, r7
  403c56:	f845 1b04 	str.w	r1, [r5], #4
  403c5a:	ea4f 4323 	mov.w	r3, r3, asr #16
  403c5e:	d2ea      	bcs.n	403c36 <quorem+0xc6>
  403c60:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403c64:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403c68:	b982      	cbnz	r2, 403c8c <quorem+0x11c>
  403c6a:	1f1a      	subs	r2, r3, #4
  403c6c:	4593      	cmp	fp, r2
  403c6e:	d20b      	bcs.n	403c88 <quorem+0x118>
  403c70:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403c74:	b942      	cbnz	r2, 403c88 <quorem+0x118>
  403c76:	3b08      	subs	r3, #8
  403c78:	e002      	b.n	403c80 <quorem+0x110>
  403c7a:	681a      	ldr	r2, [r3, #0]
  403c7c:	3b04      	subs	r3, #4
  403c7e:	b91a      	cbnz	r2, 403c88 <quorem+0x118>
  403c80:	459b      	cmp	fp, r3
  403c82:	f108 38ff 	add.w	r8, r8, #4294967295
  403c86:	d3f8      	bcc.n	403c7a <quorem+0x10a>
  403c88:	f8c4 8010 	str.w	r8, [r4, #16]
  403c8c:	4648      	mov	r0, r9
  403c8e:	b003      	add	sp, #12
  403c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c94:	2000      	movs	r0, #0
  403c96:	4770      	bx	lr

00403c98 <_dtoa_r>:
  403c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403c9e:	b097      	sub	sp, #92	; 0x5c
  403ca0:	4681      	mov	r9, r0
  403ca2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  403ca4:	4692      	mov	sl, r2
  403ca6:	469b      	mov	fp, r3
  403ca8:	b149      	cbz	r1, 403cbe <_dtoa_r+0x26>
  403caa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403cac:	604a      	str	r2, [r1, #4]
  403cae:	2301      	movs	r3, #1
  403cb0:	4093      	lsls	r3, r2
  403cb2:	608b      	str	r3, [r1, #8]
  403cb4:	f001 fb00 	bl	4052b8 <_Bfree>
  403cb8:	2300      	movs	r3, #0
  403cba:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  403cbe:	f1bb 0f00 	cmp.w	fp, #0
  403cc2:	46d8      	mov	r8, fp
  403cc4:	db33      	blt.n	403d2e <_dtoa_r+0x96>
  403cc6:	2300      	movs	r3, #0
  403cc8:	6023      	str	r3, [r4, #0]
  403cca:	4ba5      	ldr	r3, [pc, #660]	; (403f60 <_dtoa_r+0x2c8>)
  403ccc:	461a      	mov	r2, r3
  403cce:	ea08 0303 	and.w	r3, r8, r3
  403cd2:	4293      	cmp	r3, r2
  403cd4:	d014      	beq.n	403d00 <_dtoa_r+0x68>
  403cd6:	4650      	mov	r0, sl
  403cd8:	4659      	mov	r1, fp
  403cda:	2200      	movs	r2, #0
  403cdc:	2300      	movs	r3, #0
  403cde:	f002 ff09 	bl	406af4 <__aeabi_dcmpeq>
  403ce2:	4605      	mov	r5, r0
  403ce4:	b348      	cbz	r0, 403d3a <_dtoa_r+0xa2>
  403ce6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403ce8:	2301      	movs	r3, #1
  403cea:	6013      	str	r3, [r2, #0]
  403cec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cee:	2b00      	cmp	r3, #0
  403cf0:	f000 80c5 	beq.w	403e7e <_dtoa_r+0x1e6>
  403cf4:	489b      	ldr	r0, [pc, #620]	; (403f64 <_dtoa_r+0x2cc>)
  403cf6:	6018      	str	r0, [r3, #0]
  403cf8:	3801      	subs	r0, #1
  403cfa:	b017      	add	sp, #92	; 0x5c
  403cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d00:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403d02:	f242 730f 	movw	r3, #9999	; 0x270f
  403d06:	6013      	str	r3, [r2, #0]
  403d08:	f1ba 0f00 	cmp.w	sl, #0
  403d0c:	f000 80a2 	beq.w	403e54 <_dtoa_r+0x1bc>
  403d10:	4895      	ldr	r0, [pc, #596]	; (403f68 <_dtoa_r+0x2d0>)
  403d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d14:	2b00      	cmp	r3, #0
  403d16:	d0f0      	beq.n	403cfa <_dtoa_r+0x62>
  403d18:	78c3      	ldrb	r3, [r0, #3]
  403d1a:	2b00      	cmp	r3, #0
  403d1c:	f000 80b1 	beq.w	403e82 <_dtoa_r+0x1ea>
  403d20:	f100 0308 	add.w	r3, r0, #8
  403d24:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403d26:	6013      	str	r3, [r2, #0]
  403d28:	b017      	add	sp, #92	; 0x5c
  403d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d2e:	2301      	movs	r3, #1
  403d30:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  403d34:	6023      	str	r3, [r4, #0]
  403d36:	46c3      	mov	fp, r8
  403d38:	e7c7      	b.n	403cca <_dtoa_r+0x32>
  403d3a:	aa14      	add	r2, sp, #80	; 0x50
  403d3c:	ab15      	add	r3, sp, #84	; 0x54
  403d3e:	9201      	str	r2, [sp, #4]
  403d40:	9300      	str	r3, [sp, #0]
  403d42:	4652      	mov	r2, sl
  403d44:	465b      	mov	r3, fp
  403d46:	4648      	mov	r0, r9
  403d48:	f001 fd42 	bl	4057d0 <__d2b>
  403d4c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  403d50:	9008      	str	r0, [sp, #32]
  403d52:	f040 8088 	bne.w	403e66 <_dtoa_r+0x1ce>
  403d56:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403d58:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403d5a:	442c      	add	r4, r5
  403d5c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  403d60:	2b20      	cmp	r3, #32
  403d62:	f340 8291 	ble.w	404288 <_dtoa_r+0x5f0>
  403d66:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403d6a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  403d6e:	fa08 f803 	lsl.w	r8, r8, r3
  403d72:	fa2a f000 	lsr.w	r0, sl, r0
  403d76:	ea40 0008 	orr.w	r0, r0, r8
  403d7a:	f002 fbdd 	bl	406538 <__aeabi_ui2d>
  403d7e:	2301      	movs	r3, #1
  403d80:	3c01      	subs	r4, #1
  403d82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403d86:	9310      	str	r3, [sp, #64]	; 0x40
  403d88:	2200      	movs	r2, #0
  403d8a:	4b78      	ldr	r3, [pc, #480]	; (403f6c <_dtoa_r+0x2d4>)
  403d8c:	f002 fa96 	bl	4062bc <__aeabi_dsub>
  403d90:	a36d      	add	r3, pc, #436	; (adr r3, 403f48 <_dtoa_r+0x2b0>)
  403d92:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d96:	f002 fc45 	bl	406624 <__aeabi_dmul>
  403d9a:	a36d      	add	r3, pc, #436	; (adr r3, 403f50 <_dtoa_r+0x2b8>)
  403d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403da0:	f002 fa8e 	bl	4062c0 <__adddf3>
  403da4:	4606      	mov	r6, r0
  403da6:	4620      	mov	r0, r4
  403da8:	460f      	mov	r7, r1
  403daa:	f002 fbd5 	bl	406558 <__aeabi_i2d>
  403dae:	a36a      	add	r3, pc, #424	; (adr r3, 403f58 <_dtoa_r+0x2c0>)
  403db0:	e9d3 2300 	ldrd	r2, r3, [r3]
  403db4:	f002 fc36 	bl	406624 <__aeabi_dmul>
  403db8:	4602      	mov	r2, r0
  403dba:	460b      	mov	r3, r1
  403dbc:	4630      	mov	r0, r6
  403dbe:	4639      	mov	r1, r7
  403dc0:	f002 fa7e 	bl	4062c0 <__adddf3>
  403dc4:	4606      	mov	r6, r0
  403dc6:	460f      	mov	r7, r1
  403dc8:	f002 fedc 	bl	406b84 <__aeabi_d2iz>
  403dcc:	2200      	movs	r2, #0
  403dce:	9004      	str	r0, [sp, #16]
  403dd0:	2300      	movs	r3, #0
  403dd2:	4630      	mov	r0, r6
  403dd4:	4639      	mov	r1, r7
  403dd6:	f002 fe97 	bl	406b08 <__aeabi_dcmplt>
  403dda:	2800      	cmp	r0, #0
  403ddc:	f040 8230 	bne.w	404240 <_dtoa_r+0x5a8>
  403de0:	9e04      	ldr	r6, [sp, #16]
  403de2:	2e16      	cmp	r6, #22
  403de4:	f200 8229 	bhi.w	40423a <_dtoa_r+0x5a2>
  403de8:	4b61      	ldr	r3, [pc, #388]	; (403f70 <_dtoa_r+0x2d8>)
  403dea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  403dee:	e9d3 0100 	ldrd	r0, r1, [r3]
  403df2:	4652      	mov	r2, sl
  403df4:	465b      	mov	r3, fp
  403df6:	f002 fea5 	bl	406b44 <__aeabi_dcmpgt>
  403dfa:	2800      	cmp	r0, #0
  403dfc:	f000 8249 	beq.w	404292 <_dtoa_r+0x5fa>
  403e00:	1e73      	subs	r3, r6, #1
  403e02:	9304      	str	r3, [sp, #16]
  403e04:	2300      	movs	r3, #0
  403e06:	930c      	str	r3, [sp, #48]	; 0x30
  403e08:	1b2c      	subs	r4, r5, r4
  403e0a:	1e63      	subs	r3, r4, #1
  403e0c:	9302      	str	r3, [sp, #8]
  403e0e:	f100 8232 	bmi.w	404276 <_dtoa_r+0x5de>
  403e12:	2300      	movs	r3, #0
  403e14:	9305      	str	r3, [sp, #20]
  403e16:	9b04      	ldr	r3, [sp, #16]
  403e18:	2b00      	cmp	r3, #0
  403e1a:	f2c0 8223 	blt.w	404264 <_dtoa_r+0x5cc>
  403e1e:	9a02      	ldr	r2, [sp, #8]
  403e20:	930b      	str	r3, [sp, #44]	; 0x2c
  403e22:	4611      	mov	r1, r2
  403e24:	4419      	add	r1, r3
  403e26:	2300      	movs	r3, #0
  403e28:	9102      	str	r1, [sp, #8]
  403e2a:	930a      	str	r3, [sp, #40]	; 0x28
  403e2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403e2e:	2b09      	cmp	r3, #9
  403e30:	d829      	bhi.n	403e86 <_dtoa_r+0x1ee>
  403e32:	2b05      	cmp	r3, #5
  403e34:	f340 8658 	ble.w	404ae8 <_dtoa_r+0xe50>
  403e38:	3b04      	subs	r3, #4
  403e3a:	9320      	str	r3, [sp, #128]	; 0x80
  403e3c:	2500      	movs	r5, #0
  403e3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403e40:	3b02      	subs	r3, #2
  403e42:	2b03      	cmp	r3, #3
  403e44:	f200 8635 	bhi.w	404ab2 <_dtoa_r+0xe1a>
  403e48:	e8df f013 	tbh	[pc, r3, lsl #1]
  403e4c:	0228032c 	.word	0x0228032c
  403e50:	04590337 	.word	0x04590337
  403e54:	4b44      	ldr	r3, [pc, #272]	; (403f68 <_dtoa_r+0x2d0>)
  403e56:	4a47      	ldr	r2, [pc, #284]	; (403f74 <_dtoa_r+0x2dc>)
  403e58:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403e5c:	2800      	cmp	r0, #0
  403e5e:	bf14      	ite	ne
  403e60:	4618      	movne	r0, r3
  403e62:	4610      	moveq	r0, r2
  403e64:	e755      	b.n	403d12 <_dtoa_r+0x7a>
  403e66:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403e6a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403e6e:	9510      	str	r5, [sp, #64]	; 0x40
  403e70:	4650      	mov	r0, sl
  403e72:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  403e76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403e7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403e7c:	e784      	b.n	403d88 <_dtoa_r+0xf0>
  403e7e:	483e      	ldr	r0, [pc, #248]	; (403f78 <_dtoa_r+0x2e0>)
  403e80:	e73b      	b.n	403cfa <_dtoa_r+0x62>
  403e82:	1cc3      	adds	r3, r0, #3
  403e84:	e74e      	b.n	403d24 <_dtoa_r+0x8c>
  403e86:	2100      	movs	r1, #0
  403e88:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  403e8c:	4648      	mov	r0, r9
  403e8e:	9120      	str	r1, [sp, #128]	; 0x80
  403e90:	f001 f9ec 	bl	40526c <_Balloc>
  403e94:	f04f 33ff 	mov.w	r3, #4294967295
  403e98:	9306      	str	r3, [sp, #24]
  403e9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403e9c:	930d      	str	r3, [sp, #52]	; 0x34
  403e9e:	2301      	movs	r3, #1
  403ea0:	9007      	str	r0, [sp, #28]
  403ea2:	9221      	str	r2, [sp, #132]	; 0x84
  403ea4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  403ea8:	9309      	str	r3, [sp, #36]	; 0x24
  403eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403eac:	2b00      	cmp	r3, #0
  403eae:	f2c0 80d1 	blt.w	404054 <_dtoa_r+0x3bc>
  403eb2:	9a04      	ldr	r2, [sp, #16]
  403eb4:	2a0e      	cmp	r2, #14
  403eb6:	f300 80cd 	bgt.w	404054 <_dtoa_r+0x3bc>
  403eba:	4b2d      	ldr	r3, [pc, #180]	; (403f70 <_dtoa_r+0x2d8>)
  403ebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
  403ec4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  403ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403eca:	2b00      	cmp	r3, #0
  403ecc:	f2c0 8300 	blt.w	4044d0 <_dtoa_r+0x838>
  403ed0:	4656      	mov	r6, sl
  403ed2:	465f      	mov	r7, fp
  403ed4:	4650      	mov	r0, sl
  403ed6:	4659      	mov	r1, fp
  403ed8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  403edc:	4652      	mov	r2, sl
  403ede:	465b      	mov	r3, fp
  403ee0:	f002 fcca 	bl	406878 <__aeabi_ddiv>
  403ee4:	f002 fe4e 	bl	406b84 <__aeabi_d2iz>
  403ee8:	4604      	mov	r4, r0
  403eea:	f002 fb35 	bl	406558 <__aeabi_i2d>
  403eee:	4652      	mov	r2, sl
  403ef0:	465b      	mov	r3, fp
  403ef2:	f002 fb97 	bl	406624 <__aeabi_dmul>
  403ef6:	460b      	mov	r3, r1
  403ef8:	4602      	mov	r2, r0
  403efa:	4639      	mov	r1, r7
  403efc:	4630      	mov	r0, r6
  403efe:	f002 f9dd 	bl	4062bc <__aeabi_dsub>
  403f02:	9d07      	ldr	r5, [sp, #28]
  403f04:	f104 0330 	add.w	r3, r4, #48	; 0x30
  403f08:	702b      	strb	r3, [r5, #0]
  403f0a:	9b06      	ldr	r3, [sp, #24]
  403f0c:	2b01      	cmp	r3, #1
  403f0e:	4606      	mov	r6, r0
  403f10:	460f      	mov	r7, r1
  403f12:	f105 0501 	add.w	r5, r5, #1
  403f16:	d062      	beq.n	403fde <_dtoa_r+0x346>
  403f18:	2200      	movs	r2, #0
  403f1a:	4b18      	ldr	r3, [pc, #96]	; (403f7c <_dtoa_r+0x2e4>)
  403f1c:	f002 fb82 	bl	406624 <__aeabi_dmul>
  403f20:	2200      	movs	r2, #0
  403f22:	2300      	movs	r3, #0
  403f24:	4606      	mov	r6, r0
  403f26:	460f      	mov	r7, r1
  403f28:	f002 fde4 	bl	406af4 <__aeabi_dcmpeq>
  403f2c:	2800      	cmp	r0, #0
  403f2e:	d17e      	bne.n	40402e <_dtoa_r+0x396>
  403f30:	f8cd 9014 	str.w	r9, [sp, #20]
  403f34:	f8dd a018 	ldr.w	sl, [sp, #24]
  403f38:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403f3c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  403f40:	e029      	b.n	403f96 <_dtoa_r+0x2fe>
  403f42:	bf00      	nop
  403f44:	f3af 8000 	nop.w
  403f48:	636f4361 	.word	0x636f4361
  403f4c:	3fd287a7 	.word	0x3fd287a7
  403f50:	8b60c8b3 	.word	0x8b60c8b3
  403f54:	3fc68a28 	.word	0x3fc68a28
  403f58:	509f79fb 	.word	0x509f79fb
  403f5c:	3fd34413 	.word	0x3fd34413
  403f60:	7ff00000 	.word	0x7ff00000
  403f64:	00406d2d 	.word	0x00406d2d
  403f68:	00406d4c 	.word	0x00406d4c
  403f6c:	3ff80000 	.word	0x3ff80000
  403f70:	00406d60 	.word	0x00406d60
  403f74:	00406d40 	.word	0x00406d40
  403f78:	00406d2c 	.word	0x00406d2c
  403f7c:	40240000 	.word	0x40240000
  403f80:	f002 fb50 	bl	406624 <__aeabi_dmul>
  403f84:	2200      	movs	r2, #0
  403f86:	2300      	movs	r3, #0
  403f88:	4606      	mov	r6, r0
  403f8a:	460f      	mov	r7, r1
  403f8c:	f002 fdb2 	bl	406af4 <__aeabi_dcmpeq>
  403f90:	2800      	cmp	r0, #0
  403f92:	f040 83b7 	bne.w	404704 <_dtoa_r+0xa6c>
  403f96:	4642      	mov	r2, r8
  403f98:	464b      	mov	r3, r9
  403f9a:	4630      	mov	r0, r6
  403f9c:	4639      	mov	r1, r7
  403f9e:	f002 fc6b 	bl	406878 <__aeabi_ddiv>
  403fa2:	f002 fdef 	bl	406b84 <__aeabi_d2iz>
  403fa6:	4604      	mov	r4, r0
  403fa8:	f002 fad6 	bl	406558 <__aeabi_i2d>
  403fac:	4642      	mov	r2, r8
  403fae:	464b      	mov	r3, r9
  403fb0:	f002 fb38 	bl	406624 <__aeabi_dmul>
  403fb4:	4602      	mov	r2, r0
  403fb6:	460b      	mov	r3, r1
  403fb8:	4630      	mov	r0, r6
  403fba:	4639      	mov	r1, r7
  403fbc:	f002 f97e 	bl	4062bc <__aeabi_dsub>
  403fc0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403fc4:	f805 eb01 	strb.w	lr, [r5], #1
  403fc8:	ebcb 0e05 	rsb	lr, fp, r5
  403fcc:	45d6      	cmp	lr, sl
  403fce:	4606      	mov	r6, r0
  403fd0:	460f      	mov	r7, r1
  403fd2:	f04f 0200 	mov.w	r2, #0
  403fd6:	4bb0      	ldr	r3, [pc, #704]	; (404298 <_dtoa_r+0x600>)
  403fd8:	d1d2      	bne.n	403f80 <_dtoa_r+0x2e8>
  403fda:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403fde:	4632      	mov	r2, r6
  403fe0:	463b      	mov	r3, r7
  403fe2:	4630      	mov	r0, r6
  403fe4:	4639      	mov	r1, r7
  403fe6:	f002 f96b 	bl	4062c0 <__adddf3>
  403fea:	4606      	mov	r6, r0
  403fec:	460f      	mov	r7, r1
  403fee:	4602      	mov	r2, r0
  403ff0:	460b      	mov	r3, r1
  403ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ff6:	f002 fd87 	bl	406b08 <__aeabi_dcmplt>
  403ffa:	b940      	cbnz	r0, 40400e <_dtoa_r+0x376>
  403ffc:	4632      	mov	r2, r6
  403ffe:	463b      	mov	r3, r7
  404000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404004:	f002 fd76 	bl	406af4 <__aeabi_dcmpeq>
  404008:	b188      	cbz	r0, 40402e <_dtoa_r+0x396>
  40400a:	07e3      	lsls	r3, r4, #31
  40400c:	d50f      	bpl.n	40402e <_dtoa_r+0x396>
  40400e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404012:	9a07      	ldr	r2, [sp, #28]
  404014:	1e6b      	subs	r3, r5, #1
  404016:	e004      	b.n	404022 <_dtoa_r+0x38a>
  404018:	429a      	cmp	r2, r3
  40401a:	f000 842c 	beq.w	404876 <_dtoa_r+0xbde>
  40401e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404022:	2c39      	cmp	r4, #57	; 0x39
  404024:	f103 0501 	add.w	r5, r3, #1
  404028:	d0f6      	beq.n	404018 <_dtoa_r+0x380>
  40402a:	3401      	adds	r4, #1
  40402c:	701c      	strb	r4, [r3, #0]
  40402e:	9908      	ldr	r1, [sp, #32]
  404030:	4648      	mov	r0, r9
  404032:	f001 f941 	bl	4052b8 <_Bfree>
  404036:	2200      	movs	r2, #0
  404038:	9b04      	ldr	r3, [sp, #16]
  40403a:	702a      	strb	r2, [r5, #0]
  40403c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40403e:	3301      	adds	r3, #1
  404040:	6013      	str	r3, [r2, #0]
  404042:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404044:	2b00      	cmp	r3, #0
  404046:	f000 83a7 	beq.w	404798 <_dtoa_r+0xb00>
  40404a:	9807      	ldr	r0, [sp, #28]
  40404c:	601d      	str	r5, [r3, #0]
  40404e:	b017      	add	sp, #92	; 0x5c
  404050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404054:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404056:	2a00      	cmp	r2, #0
  404058:	f000 8112 	beq.w	404280 <_dtoa_r+0x5e8>
  40405c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40405e:	2a01      	cmp	r2, #1
  404060:	f340 8258 	ble.w	404514 <_dtoa_r+0x87c>
  404064:	9b06      	ldr	r3, [sp, #24]
  404066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404068:	1e5f      	subs	r7, r3, #1
  40406a:	42ba      	cmp	r2, r7
  40406c:	f2c0 8397 	blt.w	40479e <_dtoa_r+0xb06>
  404070:	1bd7      	subs	r7, r2, r7
  404072:	9b06      	ldr	r3, [sp, #24]
  404074:	2b00      	cmp	r3, #0
  404076:	f2c0 848a 	blt.w	40498e <_dtoa_r+0xcf6>
  40407a:	9d05      	ldr	r5, [sp, #20]
  40407c:	9b06      	ldr	r3, [sp, #24]
  40407e:	9a05      	ldr	r2, [sp, #20]
  404080:	441a      	add	r2, r3
  404082:	9205      	str	r2, [sp, #20]
  404084:	9a02      	ldr	r2, [sp, #8]
  404086:	2101      	movs	r1, #1
  404088:	441a      	add	r2, r3
  40408a:	4648      	mov	r0, r9
  40408c:	9202      	str	r2, [sp, #8]
  40408e:	f001 f9ab 	bl	4053e8 <__i2b>
  404092:	4606      	mov	r6, r0
  404094:	b165      	cbz	r5, 4040b0 <_dtoa_r+0x418>
  404096:	9902      	ldr	r1, [sp, #8]
  404098:	2900      	cmp	r1, #0
  40409a:	460b      	mov	r3, r1
  40409c:	dd08      	ble.n	4040b0 <_dtoa_r+0x418>
  40409e:	42a9      	cmp	r1, r5
  4040a0:	9a05      	ldr	r2, [sp, #20]
  4040a2:	bfa8      	it	ge
  4040a4:	462b      	movge	r3, r5
  4040a6:	1ad2      	subs	r2, r2, r3
  4040a8:	1aed      	subs	r5, r5, r3
  4040aa:	1acb      	subs	r3, r1, r3
  4040ac:	9205      	str	r2, [sp, #20]
  4040ae:	9302      	str	r3, [sp, #8]
  4040b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040b2:	2b00      	cmp	r3, #0
  4040b4:	f340 82fc 	ble.w	4046b0 <_dtoa_r+0xa18>
  4040b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4040ba:	2a00      	cmp	r2, #0
  4040bc:	f000 8201 	beq.w	4044c2 <_dtoa_r+0x82a>
  4040c0:	2f00      	cmp	r7, #0
  4040c2:	f000 81fe 	beq.w	4044c2 <_dtoa_r+0x82a>
  4040c6:	4631      	mov	r1, r6
  4040c8:	463a      	mov	r2, r7
  4040ca:	4648      	mov	r0, r9
  4040cc:	f001 fa2e 	bl	40552c <__pow5mult>
  4040d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4040d4:	4601      	mov	r1, r0
  4040d6:	4642      	mov	r2, r8
  4040d8:	4606      	mov	r6, r0
  4040da:	4648      	mov	r0, r9
  4040dc:	f001 f98e 	bl	4053fc <__multiply>
  4040e0:	4641      	mov	r1, r8
  4040e2:	4604      	mov	r4, r0
  4040e4:	4648      	mov	r0, r9
  4040e6:	f001 f8e7 	bl	4052b8 <_Bfree>
  4040ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040ec:	1bdb      	subs	r3, r3, r7
  4040ee:	930a      	str	r3, [sp, #40]	; 0x28
  4040f0:	f040 81e6 	bne.w	4044c0 <_dtoa_r+0x828>
  4040f4:	2101      	movs	r1, #1
  4040f6:	4648      	mov	r0, r9
  4040f8:	f001 f976 	bl	4053e8 <__i2b>
  4040fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4040fe:	4680      	mov	r8, r0
  404100:	2b00      	cmp	r3, #0
  404102:	f000 8219 	beq.w	404538 <_dtoa_r+0x8a0>
  404106:	4601      	mov	r1, r0
  404108:	461a      	mov	r2, r3
  40410a:	4648      	mov	r0, r9
  40410c:	f001 fa0e 	bl	40552c <__pow5mult>
  404110:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404112:	2b01      	cmp	r3, #1
  404114:	4680      	mov	r8, r0
  404116:	f340 82f8 	ble.w	40470a <_dtoa_r+0xa72>
  40411a:	2700      	movs	r7, #0
  40411c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404120:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404124:	6918      	ldr	r0, [r3, #16]
  404126:	f001 f911 	bl	40534c <__hi0bits>
  40412a:	f1c0 0020 	rsb	r0, r0, #32
  40412e:	9a02      	ldr	r2, [sp, #8]
  404130:	4410      	add	r0, r2
  404132:	f010 001f 	ands.w	r0, r0, #31
  404136:	f000 81f6 	beq.w	404526 <_dtoa_r+0x88e>
  40413a:	f1c0 0320 	rsb	r3, r0, #32
  40413e:	2b04      	cmp	r3, #4
  404140:	f340 84ca 	ble.w	404ad8 <_dtoa_r+0xe40>
  404144:	9b05      	ldr	r3, [sp, #20]
  404146:	f1c0 001c 	rsb	r0, r0, #28
  40414a:	4403      	add	r3, r0
  40414c:	9305      	str	r3, [sp, #20]
  40414e:	4613      	mov	r3, r2
  404150:	4403      	add	r3, r0
  404152:	4405      	add	r5, r0
  404154:	9302      	str	r3, [sp, #8]
  404156:	9b05      	ldr	r3, [sp, #20]
  404158:	2b00      	cmp	r3, #0
  40415a:	dd05      	ble.n	404168 <_dtoa_r+0x4d0>
  40415c:	4621      	mov	r1, r4
  40415e:	461a      	mov	r2, r3
  404160:	4648      	mov	r0, r9
  404162:	f001 fa33 	bl	4055cc <__lshift>
  404166:	4604      	mov	r4, r0
  404168:	9b02      	ldr	r3, [sp, #8]
  40416a:	2b00      	cmp	r3, #0
  40416c:	dd05      	ble.n	40417a <_dtoa_r+0x4e2>
  40416e:	4641      	mov	r1, r8
  404170:	461a      	mov	r2, r3
  404172:	4648      	mov	r0, r9
  404174:	f001 fa2a 	bl	4055cc <__lshift>
  404178:	4680      	mov	r8, r0
  40417a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40417c:	2b00      	cmp	r3, #0
  40417e:	f040 827c 	bne.w	40467a <_dtoa_r+0x9e2>
  404182:	9b06      	ldr	r3, [sp, #24]
  404184:	2b00      	cmp	r3, #0
  404186:	f340 8295 	ble.w	4046b4 <_dtoa_r+0xa1c>
  40418a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40418c:	2b00      	cmp	r3, #0
  40418e:	f040 81f5 	bne.w	40457c <_dtoa_r+0x8e4>
  404192:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404196:	9f06      	ldr	r7, [sp, #24]
  404198:	465d      	mov	r5, fp
  40419a:	e002      	b.n	4041a2 <_dtoa_r+0x50a>
  40419c:	f001 f896 	bl	4052cc <__multadd>
  4041a0:	4604      	mov	r4, r0
  4041a2:	4641      	mov	r1, r8
  4041a4:	4620      	mov	r0, r4
  4041a6:	f7ff fce3 	bl	403b70 <quorem>
  4041aa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4041ae:	f805 ab01 	strb.w	sl, [r5], #1
  4041b2:	ebcb 0305 	rsb	r3, fp, r5
  4041b6:	42bb      	cmp	r3, r7
  4041b8:	f04f 020a 	mov.w	r2, #10
  4041bc:	f04f 0300 	mov.w	r3, #0
  4041c0:	4621      	mov	r1, r4
  4041c2:	4648      	mov	r0, r9
  4041c4:	dbea      	blt.n	40419c <_dtoa_r+0x504>
  4041c6:	9b07      	ldr	r3, [sp, #28]
  4041c8:	9a06      	ldr	r2, [sp, #24]
  4041ca:	2a01      	cmp	r2, #1
  4041cc:	bfac      	ite	ge
  4041ce:	189b      	addge	r3, r3, r2
  4041d0:	3301      	addlt	r3, #1
  4041d2:	461d      	mov	r5, r3
  4041d4:	f04f 0b00 	mov.w	fp, #0
  4041d8:	4621      	mov	r1, r4
  4041da:	2201      	movs	r2, #1
  4041dc:	4648      	mov	r0, r9
  4041de:	f001 f9f5 	bl	4055cc <__lshift>
  4041e2:	4641      	mov	r1, r8
  4041e4:	9008      	str	r0, [sp, #32]
  4041e6:	f001 fa49 	bl	40567c <__mcmp>
  4041ea:	2800      	cmp	r0, #0
  4041ec:	f340 830d 	ble.w	40480a <_dtoa_r+0xb72>
  4041f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4041f4:	9907      	ldr	r1, [sp, #28]
  4041f6:	1e6b      	subs	r3, r5, #1
  4041f8:	e004      	b.n	404204 <_dtoa_r+0x56c>
  4041fa:	428b      	cmp	r3, r1
  4041fc:	f000 8278 	beq.w	4046f0 <_dtoa_r+0xa58>
  404200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  404204:	2a39      	cmp	r2, #57	; 0x39
  404206:	f103 0501 	add.w	r5, r3, #1
  40420a:	d0f6      	beq.n	4041fa <_dtoa_r+0x562>
  40420c:	3201      	adds	r2, #1
  40420e:	701a      	strb	r2, [r3, #0]
  404210:	4641      	mov	r1, r8
  404212:	4648      	mov	r0, r9
  404214:	f001 f850 	bl	4052b8 <_Bfree>
  404218:	2e00      	cmp	r6, #0
  40421a:	f43f af08 	beq.w	40402e <_dtoa_r+0x396>
  40421e:	f1bb 0f00 	cmp.w	fp, #0
  404222:	d005      	beq.n	404230 <_dtoa_r+0x598>
  404224:	45b3      	cmp	fp, r6
  404226:	d003      	beq.n	404230 <_dtoa_r+0x598>
  404228:	4659      	mov	r1, fp
  40422a:	4648      	mov	r0, r9
  40422c:	f001 f844 	bl	4052b8 <_Bfree>
  404230:	4631      	mov	r1, r6
  404232:	4648      	mov	r0, r9
  404234:	f001 f840 	bl	4052b8 <_Bfree>
  404238:	e6f9      	b.n	40402e <_dtoa_r+0x396>
  40423a:	2301      	movs	r3, #1
  40423c:	930c      	str	r3, [sp, #48]	; 0x30
  40423e:	e5e3      	b.n	403e08 <_dtoa_r+0x170>
  404240:	f8dd 8010 	ldr.w	r8, [sp, #16]
  404244:	4640      	mov	r0, r8
  404246:	f002 f987 	bl	406558 <__aeabi_i2d>
  40424a:	4602      	mov	r2, r0
  40424c:	460b      	mov	r3, r1
  40424e:	4630      	mov	r0, r6
  404250:	4639      	mov	r1, r7
  404252:	f002 fc4f 	bl	406af4 <__aeabi_dcmpeq>
  404256:	2800      	cmp	r0, #0
  404258:	f47f adc2 	bne.w	403de0 <_dtoa_r+0x148>
  40425c:	f108 33ff 	add.w	r3, r8, #4294967295
  404260:	9304      	str	r3, [sp, #16]
  404262:	e5bd      	b.n	403de0 <_dtoa_r+0x148>
  404264:	9a05      	ldr	r2, [sp, #20]
  404266:	9b04      	ldr	r3, [sp, #16]
  404268:	1ad2      	subs	r2, r2, r3
  40426a:	425b      	negs	r3, r3
  40426c:	930a      	str	r3, [sp, #40]	; 0x28
  40426e:	2300      	movs	r3, #0
  404270:	9205      	str	r2, [sp, #20]
  404272:	930b      	str	r3, [sp, #44]	; 0x2c
  404274:	e5da      	b.n	403e2c <_dtoa_r+0x194>
  404276:	425b      	negs	r3, r3
  404278:	9305      	str	r3, [sp, #20]
  40427a:	2300      	movs	r3, #0
  40427c:	9302      	str	r3, [sp, #8]
  40427e:	e5ca      	b.n	403e16 <_dtoa_r+0x17e>
  404280:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404282:	9d05      	ldr	r5, [sp, #20]
  404284:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404286:	e705      	b.n	404094 <_dtoa_r+0x3fc>
  404288:	f1c3 0820 	rsb	r8, r3, #32
  40428c:	fa0a f008 	lsl.w	r0, sl, r8
  404290:	e573      	b.n	403d7a <_dtoa_r+0xe2>
  404292:	900c      	str	r0, [sp, #48]	; 0x30
  404294:	e5b8      	b.n	403e08 <_dtoa_r+0x170>
  404296:	bf00      	nop
  404298:	40240000 	.word	0x40240000
  40429c:	2300      	movs	r3, #0
  40429e:	9309      	str	r3, [sp, #36]	; 0x24
  4042a0:	9b04      	ldr	r3, [sp, #16]
  4042a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4042a4:	4413      	add	r3, r2
  4042a6:	930d      	str	r3, [sp, #52]	; 0x34
  4042a8:	3301      	adds	r3, #1
  4042aa:	2b00      	cmp	r3, #0
  4042ac:	9306      	str	r3, [sp, #24]
  4042ae:	f340 8283 	ble.w	4047b8 <_dtoa_r+0xb20>
  4042b2:	9c06      	ldr	r4, [sp, #24]
  4042b4:	4626      	mov	r6, r4
  4042b6:	2100      	movs	r1, #0
  4042b8:	2e17      	cmp	r6, #23
  4042ba:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4042be:	d90b      	bls.n	4042d8 <_dtoa_r+0x640>
  4042c0:	2201      	movs	r2, #1
  4042c2:	2304      	movs	r3, #4
  4042c4:	005b      	lsls	r3, r3, #1
  4042c6:	f103 0014 	add.w	r0, r3, #20
  4042ca:	42b0      	cmp	r0, r6
  4042cc:	4611      	mov	r1, r2
  4042ce:	f102 0201 	add.w	r2, r2, #1
  4042d2:	d9f7      	bls.n	4042c4 <_dtoa_r+0x62c>
  4042d4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4042d8:	4648      	mov	r0, r9
  4042da:	f000 ffc7 	bl	40526c <_Balloc>
  4042de:	2c0e      	cmp	r4, #14
  4042e0:	9007      	str	r0, [sp, #28]
  4042e2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4042e6:	f63f ade0 	bhi.w	403eaa <_dtoa_r+0x212>
  4042ea:	2d00      	cmp	r5, #0
  4042ec:	f43f addd 	beq.w	403eaa <_dtoa_r+0x212>
  4042f0:	9904      	ldr	r1, [sp, #16]
  4042f2:	4657      	mov	r7, sl
  4042f4:	46d8      	mov	r8, fp
  4042f6:	2900      	cmp	r1, #0
  4042f8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  4042fc:	f340 8292 	ble.w	404824 <_dtoa_r+0xb8c>
  404300:	4b91      	ldr	r3, [pc, #580]	; (404548 <_dtoa_r+0x8b0>)
  404302:	f001 020f 	and.w	r2, r1, #15
  404306:	110e      	asrs	r6, r1, #4
  404308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40430c:	06f0      	lsls	r0, r6, #27
  40430e:	e9d3 4500 	ldrd	r4, r5, [r3]
  404312:	f140 824c 	bpl.w	4047ae <_dtoa_r+0xb16>
  404316:	4b8d      	ldr	r3, [pc, #564]	; (40454c <_dtoa_r+0x8b4>)
  404318:	4650      	mov	r0, sl
  40431a:	4659      	mov	r1, fp
  40431c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404320:	f002 faaa 	bl	406878 <__aeabi_ddiv>
  404324:	f006 060f 	and.w	r6, r6, #15
  404328:	4682      	mov	sl, r0
  40432a:	468b      	mov	fp, r1
  40432c:	f04f 0803 	mov.w	r8, #3
  404330:	b186      	cbz	r6, 404354 <_dtoa_r+0x6bc>
  404332:	4f86      	ldr	r7, [pc, #536]	; (40454c <_dtoa_r+0x8b4>)
  404334:	07f1      	lsls	r1, r6, #31
  404336:	d509      	bpl.n	40434c <_dtoa_r+0x6b4>
  404338:	4620      	mov	r0, r4
  40433a:	4629      	mov	r1, r5
  40433c:	e9d7 2300 	ldrd	r2, r3, [r7]
  404340:	f002 f970 	bl	406624 <__aeabi_dmul>
  404344:	f108 0801 	add.w	r8, r8, #1
  404348:	4604      	mov	r4, r0
  40434a:	460d      	mov	r5, r1
  40434c:	1076      	asrs	r6, r6, #1
  40434e:	f107 0708 	add.w	r7, r7, #8
  404352:	d1ef      	bne.n	404334 <_dtoa_r+0x69c>
  404354:	4622      	mov	r2, r4
  404356:	462b      	mov	r3, r5
  404358:	4650      	mov	r0, sl
  40435a:	4659      	mov	r1, fp
  40435c:	f002 fa8c 	bl	406878 <__aeabi_ddiv>
  404360:	4606      	mov	r6, r0
  404362:	460f      	mov	r7, r1
  404364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404366:	b143      	cbz	r3, 40437a <_dtoa_r+0x6e2>
  404368:	2200      	movs	r2, #0
  40436a:	4b79      	ldr	r3, [pc, #484]	; (404550 <_dtoa_r+0x8b8>)
  40436c:	4630      	mov	r0, r6
  40436e:	4639      	mov	r1, r7
  404370:	f002 fbca 	bl	406b08 <__aeabi_dcmplt>
  404374:	2800      	cmp	r0, #0
  404376:	f040 8320 	bne.w	4049ba <_dtoa_r+0xd22>
  40437a:	4640      	mov	r0, r8
  40437c:	f002 f8ec 	bl	406558 <__aeabi_i2d>
  404380:	4632      	mov	r2, r6
  404382:	463b      	mov	r3, r7
  404384:	f002 f94e 	bl	406624 <__aeabi_dmul>
  404388:	4b72      	ldr	r3, [pc, #456]	; (404554 <_dtoa_r+0x8bc>)
  40438a:	2200      	movs	r2, #0
  40438c:	f001 ff98 	bl	4062c0 <__adddf3>
  404390:	9b06      	ldr	r3, [sp, #24]
  404392:	4604      	mov	r4, r0
  404394:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404398:	2b00      	cmp	r3, #0
  40439a:	f000 81df 	beq.w	40475c <_dtoa_r+0xac4>
  40439e:	9b04      	ldr	r3, [sp, #16]
  4043a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4043a4:	9311      	str	r3, [sp, #68]	; 0x44
  4043a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4043a8:	2b00      	cmp	r3, #0
  4043aa:	f000 8297 	beq.w	4048dc <_dtoa_r+0xc44>
  4043ae:	4b66      	ldr	r3, [pc, #408]	; (404548 <_dtoa_r+0x8b0>)
  4043b0:	4969      	ldr	r1, [pc, #420]	; (404558 <_dtoa_r+0x8c0>)
  4043b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4043b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4043ba:	2000      	movs	r0, #0
  4043bc:	f002 fa5c 	bl	406878 <__aeabi_ddiv>
  4043c0:	4622      	mov	r2, r4
  4043c2:	462b      	mov	r3, r5
  4043c4:	f001 ff7a 	bl	4062bc <__aeabi_dsub>
  4043c8:	4682      	mov	sl, r0
  4043ca:	468b      	mov	fp, r1
  4043cc:	4630      	mov	r0, r6
  4043ce:	4639      	mov	r1, r7
  4043d0:	f002 fbd8 	bl	406b84 <__aeabi_d2iz>
  4043d4:	4604      	mov	r4, r0
  4043d6:	f002 f8bf 	bl	406558 <__aeabi_i2d>
  4043da:	4602      	mov	r2, r0
  4043dc:	460b      	mov	r3, r1
  4043de:	4630      	mov	r0, r6
  4043e0:	4639      	mov	r1, r7
  4043e2:	f001 ff6b 	bl	4062bc <__aeabi_dsub>
  4043e6:	3430      	adds	r4, #48	; 0x30
  4043e8:	9d07      	ldr	r5, [sp, #28]
  4043ea:	b2e4      	uxtb	r4, r4
  4043ec:	4606      	mov	r6, r0
  4043ee:	460f      	mov	r7, r1
  4043f0:	702c      	strb	r4, [r5, #0]
  4043f2:	4602      	mov	r2, r0
  4043f4:	460b      	mov	r3, r1
  4043f6:	4650      	mov	r0, sl
  4043f8:	4659      	mov	r1, fp
  4043fa:	3501      	adds	r5, #1
  4043fc:	f002 fba2 	bl	406b44 <__aeabi_dcmpgt>
  404400:	2800      	cmp	r0, #0
  404402:	d14c      	bne.n	40449e <_dtoa_r+0x806>
  404404:	4632      	mov	r2, r6
  404406:	463b      	mov	r3, r7
  404408:	2000      	movs	r0, #0
  40440a:	4951      	ldr	r1, [pc, #324]	; (404550 <_dtoa_r+0x8b8>)
  40440c:	f001 ff56 	bl	4062bc <__aeabi_dsub>
  404410:	4602      	mov	r2, r0
  404412:	460b      	mov	r3, r1
  404414:	4650      	mov	r0, sl
  404416:	4659      	mov	r1, fp
  404418:	f002 fb94 	bl	406b44 <__aeabi_dcmpgt>
  40441c:	2800      	cmp	r0, #0
  40441e:	f040 830d 	bne.w	404a3c <_dtoa_r+0xda4>
  404422:	f1b8 0f01 	cmp.w	r8, #1
  404426:	f340 81b3 	ble.w	404790 <_dtoa_r+0xaf8>
  40442a:	9b07      	ldr	r3, [sp, #28]
  40442c:	4498      	add	r8, r3
  40442e:	e00d      	b.n	40444c <_dtoa_r+0x7b4>
  404430:	2000      	movs	r0, #0
  404432:	4947      	ldr	r1, [pc, #284]	; (404550 <_dtoa_r+0x8b8>)
  404434:	f001 ff42 	bl	4062bc <__aeabi_dsub>
  404438:	4652      	mov	r2, sl
  40443a:	465b      	mov	r3, fp
  40443c:	f002 fb64 	bl	406b08 <__aeabi_dcmplt>
  404440:	2800      	cmp	r0, #0
  404442:	f040 82fb 	bne.w	404a3c <_dtoa_r+0xda4>
  404446:	4545      	cmp	r5, r8
  404448:	f000 81a2 	beq.w	404790 <_dtoa_r+0xaf8>
  40444c:	4650      	mov	r0, sl
  40444e:	4659      	mov	r1, fp
  404450:	2200      	movs	r2, #0
  404452:	4b42      	ldr	r3, [pc, #264]	; (40455c <_dtoa_r+0x8c4>)
  404454:	f002 f8e6 	bl	406624 <__aeabi_dmul>
  404458:	2200      	movs	r2, #0
  40445a:	4b40      	ldr	r3, [pc, #256]	; (40455c <_dtoa_r+0x8c4>)
  40445c:	4682      	mov	sl, r0
  40445e:	468b      	mov	fp, r1
  404460:	4630      	mov	r0, r6
  404462:	4639      	mov	r1, r7
  404464:	f002 f8de 	bl	406624 <__aeabi_dmul>
  404468:	460f      	mov	r7, r1
  40446a:	4606      	mov	r6, r0
  40446c:	f002 fb8a 	bl	406b84 <__aeabi_d2iz>
  404470:	4604      	mov	r4, r0
  404472:	f002 f871 	bl	406558 <__aeabi_i2d>
  404476:	4602      	mov	r2, r0
  404478:	460b      	mov	r3, r1
  40447a:	4630      	mov	r0, r6
  40447c:	4639      	mov	r1, r7
  40447e:	f001 ff1d 	bl	4062bc <__aeabi_dsub>
  404482:	3430      	adds	r4, #48	; 0x30
  404484:	b2e4      	uxtb	r4, r4
  404486:	4652      	mov	r2, sl
  404488:	465b      	mov	r3, fp
  40448a:	f805 4b01 	strb.w	r4, [r5], #1
  40448e:	4606      	mov	r6, r0
  404490:	460f      	mov	r7, r1
  404492:	f002 fb39 	bl	406b08 <__aeabi_dcmplt>
  404496:	4632      	mov	r2, r6
  404498:	463b      	mov	r3, r7
  40449a:	2800      	cmp	r0, #0
  40449c:	d0c8      	beq.n	404430 <_dtoa_r+0x798>
  40449e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044a0:	9304      	str	r3, [sp, #16]
  4044a2:	e5c4      	b.n	40402e <_dtoa_r+0x396>
  4044a4:	2300      	movs	r3, #0
  4044a6:	9309      	str	r3, [sp, #36]	; 0x24
  4044a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4044aa:	2b00      	cmp	r3, #0
  4044ac:	f340 8189 	ble.w	4047c2 <_dtoa_r+0xb2a>
  4044b0:	461e      	mov	r6, r3
  4044b2:	461c      	mov	r4, r3
  4044b4:	930d      	str	r3, [sp, #52]	; 0x34
  4044b6:	9306      	str	r3, [sp, #24]
  4044b8:	e6fd      	b.n	4042b6 <_dtoa_r+0x61e>
  4044ba:	2301      	movs	r3, #1
  4044bc:	9309      	str	r3, [sp, #36]	; 0x24
  4044be:	e7f3      	b.n	4044a8 <_dtoa_r+0x810>
  4044c0:	9408      	str	r4, [sp, #32]
  4044c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4044c4:	9908      	ldr	r1, [sp, #32]
  4044c6:	4648      	mov	r0, r9
  4044c8:	f001 f830 	bl	40552c <__pow5mult>
  4044cc:	4604      	mov	r4, r0
  4044ce:	e611      	b.n	4040f4 <_dtoa_r+0x45c>
  4044d0:	9b06      	ldr	r3, [sp, #24]
  4044d2:	2b00      	cmp	r3, #0
  4044d4:	f73f acfc 	bgt.w	403ed0 <_dtoa_r+0x238>
  4044d8:	f040 82da 	bne.w	404a90 <_dtoa_r+0xdf8>
  4044dc:	2200      	movs	r2, #0
  4044de:	4b20      	ldr	r3, [pc, #128]	; (404560 <_dtoa_r+0x8c8>)
  4044e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4044e4:	f002 f89e 	bl	406624 <__aeabi_dmul>
  4044e8:	4652      	mov	r2, sl
  4044ea:	465b      	mov	r3, fp
  4044ec:	f002 fb20 	bl	406b30 <__aeabi_dcmpge>
  4044f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4044f4:	4646      	mov	r6, r8
  4044f6:	2800      	cmp	r0, #0
  4044f8:	f000 80f2 	beq.w	4046e0 <_dtoa_r+0xa48>
  4044fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4044fe:	9d07      	ldr	r5, [sp, #28]
  404500:	43db      	mvns	r3, r3
  404502:	9304      	str	r3, [sp, #16]
  404504:	4641      	mov	r1, r8
  404506:	4648      	mov	r0, r9
  404508:	f000 fed6 	bl	4052b8 <_Bfree>
  40450c:	2e00      	cmp	r6, #0
  40450e:	f43f ad8e 	beq.w	40402e <_dtoa_r+0x396>
  404512:	e68d      	b.n	404230 <_dtoa_r+0x598>
  404514:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404516:	2a00      	cmp	r2, #0
  404518:	f000 8241 	beq.w	40499e <_dtoa_r+0xd06>
  40451c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404520:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404522:	9d05      	ldr	r5, [sp, #20]
  404524:	e5ab      	b.n	40407e <_dtoa_r+0x3e6>
  404526:	201c      	movs	r0, #28
  404528:	9b05      	ldr	r3, [sp, #20]
  40452a:	4403      	add	r3, r0
  40452c:	9305      	str	r3, [sp, #20]
  40452e:	9b02      	ldr	r3, [sp, #8]
  404530:	4403      	add	r3, r0
  404532:	4405      	add	r5, r0
  404534:	9302      	str	r3, [sp, #8]
  404536:	e60e      	b.n	404156 <_dtoa_r+0x4be>
  404538:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40453a:	2b01      	cmp	r3, #1
  40453c:	f340 8282 	ble.w	404a44 <_dtoa_r+0xdac>
  404540:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  404542:	2001      	movs	r0, #1
  404544:	e5f3      	b.n	40412e <_dtoa_r+0x496>
  404546:	bf00      	nop
  404548:	00406d60 	.word	0x00406d60
  40454c:	00406e28 	.word	0x00406e28
  404550:	3ff00000 	.word	0x3ff00000
  404554:	401c0000 	.word	0x401c0000
  404558:	3fe00000 	.word	0x3fe00000
  40455c:	40240000 	.word	0x40240000
  404560:	40140000 	.word	0x40140000
  404564:	4631      	mov	r1, r6
  404566:	2300      	movs	r3, #0
  404568:	220a      	movs	r2, #10
  40456a:	4648      	mov	r0, r9
  40456c:	f000 feae 	bl	4052cc <__multadd>
  404570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404572:	2b00      	cmp	r3, #0
  404574:	4606      	mov	r6, r0
  404576:	f340 8297 	ble.w	404aa8 <_dtoa_r+0xe10>
  40457a:	9306      	str	r3, [sp, #24]
  40457c:	2d00      	cmp	r5, #0
  40457e:	dd05      	ble.n	40458c <_dtoa_r+0x8f4>
  404580:	4631      	mov	r1, r6
  404582:	462a      	mov	r2, r5
  404584:	4648      	mov	r0, r9
  404586:	f001 f821 	bl	4055cc <__lshift>
  40458a:	4606      	mov	r6, r0
  40458c:	2f00      	cmp	r7, #0
  40458e:	f040 817c 	bne.w	40488a <_dtoa_r+0xbf2>
  404592:	9605      	str	r6, [sp, #20]
  404594:	9b06      	ldr	r3, [sp, #24]
  404596:	9a07      	ldr	r2, [sp, #28]
  404598:	f8dd b014 	ldr.w	fp, [sp, #20]
  40459c:	3b01      	subs	r3, #1
  40459e:	18d3      	adds	r3, r2, r3
  4045a0:	9308      	str	r3, [sp, #32]
  4045a2:	f00a 0301 	and.w	r3, sl, #1
  4045a6:	9309      	str	r3, [sp, #36]	; 0x24
  4045a8:	4617      	mov	r7, r2
  4045aa:	46c2      	mov	sl, r8
  4045ac:	4651      	mov	r1, sl
  4045ae:	4620      	mov	r0, r4
  4045b0:	f7ff fade 	bl	403b70 <quorem>
  4045b4:	4631      	mov	r1, r6
  4045b6:	4605      	mov	r5, r0
  4045b8:	4620      	mov	r0, r4
  4045ba:	f001 f85f 	bl	40567c <__mcmp>
  4045be:	465a      	mov	r2, fp
  4045c0:	9002      	str	r0, [sp, #8]
  4045c2:	4651      	mov	r1, sl
  4045c4:	4648      	mov	r0, r9
  4045c6:	f001 f879 	bl	4056bc <__mdiff>
  4045ca:	68c2      	ldr	r2, [r0, #12]
  4045cc:	4680      	mov	r8, r0
  4045ce:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4045d2:	2a00      	cmp	r2, #0
  4045d4:	d149      	bne.n	40466a <_dtoa_r+0x9d2>
  4045d6:	4601      	mov	r1, r0
  4045d8:	4620      	mov	r0, r4
  4045da:	9306      	str	r3, [sp, #24]
  4045dc:	f001 f84e 	bl	40567c <__mcmp>
  4045e0:	4641      	mov	r1, r8
  4045e2:	9005      	str	r0, [sp, #20]
  4045e4:	4648      	mov	r0, r9
  4045e6:	f000 fe67 	bl	4052b8 <_Bfree>
  4045ea:	9a05      	ldr	r2, [sp, #20]
  4045ec:	9b06      	ldr	r3, [sp, #24]
  4045ee:	b92a      	cbnz	r2, 4045fc <_dtoa_r+0x964>
  4045f0:	9920      	ldr	r1, [sp, #128]	; 0x80
  4045f2:	b919      	cbnz	r1, 4045fc <_dtoa_r+0x964>
  4045f4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045f6:	2900      	cmp	r1, #0
  4045f8:	f000 8236 	beq.w	404a68 <_dtoa_r+0xdd0>
  4045fc:	9902      	ldr	r1, [sp, #8]
  4045fe:	2900      	cmp	r1, #0
  404600:	f2c0 80e4 	blt.w	4047cc <_dtoa_r+0xb34>
  404604:	d105      	bne.n	404612 <_dtoa_r+0x97a>
  404606:	9920      	ldr	r1, [sp, #128]	; 0x80
  404608:	b919      	cbnz	r1, 404612 <_dtoa_r+0x97a>
  40460a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40460c:	2900      	cmp	r1, #0
  40460e:	f000 80dd 	beq.w	4047cc <_dtoa_r+0xb34>
  404612:	2a00      	cmp	r2, #0
  404614:	f300 814d 	bgt.w	4048b2 <_dtoa_r+0xc1a>
  404618:	9a08      	ldr	r2, [sp, #32]
  40461a:	703b      	strb	r3, [r7, #0]
  40461c:	f107 0801 	add.w	r8, r7, #1
  404620:	4297      	cmp	r7, r2
  404622:	4645      	mov	r5, r8
  404624:	f000 8154 	beq.w	4048d0 <_dtoa_r+0xc38>
  404628:	4621      	mov	r1, r4
  40462a:	2300      	movs	r3, #0
  40462c:	220a      	movs	r2, #10
  40462e:	4648      	mov	r0, r9
  404630:	f000 fe4c 	bl	4052cc <__multadd>
  404634:	455e      	cmp	r6, fp
  404636:	4604      	mov	r4, r0
  404638:	4631      	mov	r1, r6
  40463a:	f04f 0300 	mov.w	r3, #0
  40463e:	f04f 020a 	mov.w	r2, #10
  404642:	4648      	mov	r0, r9
  404644:	d00b      	beq.n	40465e <_dtoa_r+0x9c6>
  404646:	f000 fe41 	bl	4052cc <__multadd>
  40464a:	4659      	mov	r1, fp
  40464c:	4606      	mov	r6, r0
  40464e:	2300      	movs	r3, #0
  404650:	220a      	movs	r2, #10
  404652:	4648      	mov	r0, r9
  404654:	f000 fe3a 	bl	4052cc <__multadd>
  404658:	4647      	mov	r7, r8
  40465a:	4683      	mov	fp, r0
  40465c:	e7a6      	b.n	4045ac <_dtoa_r+0x914>
  40465e:	f000 fe35 	bl	4052cc <__multadd>
  404662:	4647      	mov	r7, r8
  404664:	4606      	mov	r6, r0
  404666:	4683      	mov	fp, r0
  404668:	e7a0      	b.n	4045ac <_dtoa_r+0x914>
  40466a:	4601      	mov	r1, r0
  40466c:	4648      	mov	r0, r9
  40466e:	9305      	str	r3, [sp, #20]
  404670:	f000 fe22 	bl	4052b8 <_Bfree>
  404674:	2201      	movs	r2, #1
  404676:	9b05      	ldr	r3, [sp, #20]
  404678:	e7c0      	b.n	4045fc <_dtoa_r+0x964>
  40467a:	4641      	mov	r1, r8
  40467c:	4620      	mov	r0, r4
  40467e:	f000 fffd 	bl	40567c <__mcmp>
  404682:	2800      	cmp	r0, #0
  404684:	f6bf ad7d 	bge.w	404182 <_dtoa_r+0x4ea>
  404688:	4621      	mov	r1, r4
  40468a:	9c04      	ldr	r4, [sp, #16]
  40468c:	2300      	movs	r3, #0
  40468e:	3c01      	subs	r4, #1
  404690:	220a      	movs	r2, #10
  404692:	4648      	mov	r0, r9
  404694:	9404      	str	r4, [sp, #16]
  404696:	f000 fe19 	bl	4052cc <__multadd>
  40469a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40469c:	4604      	mov	r4, r0
  40469e:	2b00      	cmp	r3, #0
  4046a0:	f47f af60 	bne.w	404564 <_dtoa_r+0x8cc>
  4046a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4046a6:	2b00      	cmp	r3, #0
  4046a8:	f340 81f6 	ble.w	404a98 <_dtoa_r+0xe00>
  4046ac:	9306      	str	r3, [sp, #24]
  4046ae:	e570      	b.n	404192 <_dtoa_r+0x4fa>
  4046b0:	9c08      	ldr	r4, [sp, #32]
  4046b2:	e51f      	b.n	4040f4 <_dtoa_r+0x45c>
  4046b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4046b6:	2b02      	cmp	r3, #2
  4046b8:	f77f ad67 	ble.w	40418a <_dtoa_r+0x4f2>
  4046bc:	9b06      	ldr	r3, [sp, #24]
  4046be:	2b00      	cmp	r3, #0
  4046c0:	f040 8179 	bne.w	4049b6 <_dtoa_r+0xd1e>
  4046c4:	4641      	mov	r1, r8
  4046c6:	2205      	movs	r2, #5
  4046c8:	4648      	mov	r0, r9
  4046ca:	f000 fdff 	bl	4052cc <__multadd>
  4046ce:	4601      	mov	r1, r0
  4046d0:	4680      	mov	r8, r0
  4046d2:	4620      	mov	r0, r4
  4046d4:	f000 ffd2 	bl	40567c <__mcmp>
  4046d8:	2800      	cmp	r0, #0
  4046da:	9408      	str	r4, [sp, #32]
  4046dc:	f77f af0e 	ble.w	4044fc <_dtoa_r+0x864>
  4046e0:	9a04      	ldr	r2, [sp, #16]
  4046e2:	9907      	ldr	r1, [sp, #28]
  4046e4:	2331      	movs	r3, #49	; 0x31
  4046e6:	3201      	adds	r2, #1
  4046e8:	9204      	str	r2, [sp, #16]
  4046ea:	700b      	strb	r3, [r1, #0]
  4046ec:	1c4d      	adds	r5, r1, #1
  4046ee:	e709      	b.n	404504 <_dtoa_r+0x86c>
  4046f0:	9a04      	ldr	r2, [sp, #16]
  4046f2:	3201      	adds	r2, #1
  4046f4:	9204      	str	r2, [sp, #16]
  4046f6:	9a07      	ldr	r2, [sp, #28]
  4046f8:	2331      	movs	r3, #49	; 0x31
  4046fa:	7013      	strb	r3, [r2, #0]
  4046fc:	e588      	b.n	404210 <_dtoa_r+0x578>
  4046fe:	2301      	movs	r3, #1
  404700:	9309      	str	r3, [sp, #36]	; 0x24
  404702:	e5cd      	b.n	4042a0 <_dtoa_r+0x608>
  404704:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404708:	e491      	b.n	40402e <_dtoa_r+0x396>
  40470a:	f1ba 0f00 	cmp.w	sl, #0
  40470e:	f47f ad04 	bne.w	40411a <_dtoa_r+0x482>
  404712:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404716:	2b00      	cmp	r3, #0
  404718:	f040 813f 	bne.w	40499a <_dtoa_r+0xd02>
  40471c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  404720:	0d3f      	lsrs	r7, r7, #20
  404722:	053f      	lsls	r7, r7, #20
  404724:	b137      	cbz	r7, 404734 <_dtoa_r+0xa9c>
  404726:	9b05      	ldr	r3, [sp, #20]
  404728:	3301      	adds	r3, #1
  40472a:	9305      	str	r3, [sp, #20]
  40472c:	9b02      	ldr	r3, [sp, #8]
  40472e:	3301      	adds	r3, #1
  404730:	9302      	str	r3, [sp, #8]
  404732:	2701      	movs	r7, #1
  404734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404736:	2001      	movs	r0, #1
  404738:	2b00      	cmp	r3, #0
  40473a:	f43f acf8 	beq.w	40412e <_dtoa_r+0x496>
  40473e:	e4ed      	b.n	40411c <_dtoa_r+0x484>
  404740:	4640      	mov	r0, r8
  404742:	f001 ff09 	bl	406558 <__aeabi_i2d>
  404746:	4632      	mov	r2, r6
  404748:	463b      	mov	r3, r7
  40474a:	f001 ff6b 	bl	406624 <__aeabi_dmul>
  40474e:	2200      	movs	r2, #0
  404750:	4bbf      	ldr	r3, [pc, #764]	; (404a50 <_dtoa_r+0xdb8>)
  404752:	f001 fdb5 	bl	4062c0 <__adddf3>
  404756:	4604      	mov	r4, r0
  404758:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40475c:	4630      	mov	r0, r6
  40475e:	4639      	mov	r1, r7
  404760:	2200      	movs	r2, #0
  404762:	4bbc      	ldr	r3, [pc, #752]	; (404a54 <_dtoa_r+0xdbc>)
  404764:	f001 fdaa 	bl	4062bc <__aeabi_dsub>
  404768:	4622      	mov	r2, r4
  40476a:	462b      	mov	r3, r5
  40476c:	4606      	mov	r6, r0
  40476e:	460f      	mov	r7, r1
  404770:	f002 f9e8 	bl	406b44 <__aeabi_dcmpgt>
  404774:	4680      	mov	r8, r0
  404776:	2800      	cmp	r0, #0
  404778:	f040 8105 	bne.w	404986 <_dtoa_r+0xcee>
  40477c:	4622      	mov	r2, r4
  40477e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404782:	4630      	mov	r0, r6
  404784:	4639      	mov	r1, r7
  404786:	f002 f9bf 	bl	406b08 <__aeabi_dcmplt>
  40478a:	b108      	cbz	r0, 404790 <_dtoa_r+0xaf8>
  40478c:	4646      	mov	r6, r8
  40478e:	e6b5      	b.n	4044fc <_dtoa_r+0x864>
  404790:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  404794:	f7ff bb89 	b.w	403eaa <_dtoa_r+0x212>
  404798:	9807      	ldr	r0, [sp, #28]
  40479a:	f7ff baae 	b.w	403cfa <_dtoa_r+0x62>
  40479e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4047a2:	970a      	str	r7, [sp, #40]	; 0x28
  4047a4:	1afb      	subs	r3, r7, r3
  4047a6:	441a      	add	r2, r3
  4047a8:	920b      	str	r2, [sp, #44]	; 0x2c
  4047aa:	2700      	movs	r7, #0
  4047ac:	e461      	b.n	404072 <_dtoa_r+0x3da>
  4047ae:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4047b2:	f04f 0802 	mov.w	r8, #2
  4047b6:	e5bb      	b.n	404330 <_dtoa_r+0x698>
  4047b8:	461c      	mov	r4, r3
  4047ba:	2100      	movs	r1, #0
  4047bc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4047c0:	e58a      	b.n	4042d8 <_dtoa_r+0x640>
  4047c2:	2401      	movs	r4, #1
  4047c4:	9421      	str	r4, [sp, #132]	; 0x84
  4047c6:	940d      	str	r4, [sp, #52]	; 0x34
  4047c8:	9406      	str	r4, [sp, #24]
  4047ca:	e7f6      	b.n	4047ba <_dtoa_r+0xb22>
  4047cc:	2a00      	cmp	r2, #0
  4047ce:	46d0      	mov	r8, sl
  4047d0:	f8cd b014 	str.w	fp, [sp, #20]
  4047d4:	469a      	mov	sl, r3
  4047d6:	dd11      	ble.n	4047fc <_dtoa_r+0xb64>
  4047d8:	4621      	mov	r1, r4
  4047da:	2201      	movs	r2, #1
  4047dc:	4648      	mov	r0, r9
  4047de:	f000 fef5 	bl	4055cc <__lshift>
  4047e2:	4641      	mov	r1, r8
  4047e4:	4604      	mov	r4, r0
  4047e6:	f000 ff49 	bl	40567c <__mcmp>
  4047ea:	2800      	cmp	r0, #0
  4047ec:	f340 8149 	ble.w	404a82 <_dtoa_r+0xdea>
  4047f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4047f4:	f000 8106 	beq.w	404a04 <_dtoa_r+0xd6c>
  4047f8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4047fc:	46b3      	mov	fp, r6
  4047fe:	f887 a000 	strb.w	sl, [r7]
  404802:	1c7d      	adds	r5, r7, #1
  404804:	9e05      	ldr	r6, [sp, #20]
  404806:	9408      	str	r4, [sp, #32]
  404808:	e502      	b.n	404210 <_dtoa_r+0x578>
  40480a:	d104      	bne.n	404816 <_dtoa_r+0xb7e>
  40480c:	f01a 0f01 	tst.w	sl, #1
  404810:	d001      	beq.n	404816 <_dtoa_r+0xb7e>
  404812:	e4ed      	b.n	4041f0 <_dtoa_r+0x558>
  404814:	4615      	mov	r5, r2
  404816:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40481a:	2b30      	cmp	r3, #48	; 0x30
  40481c:	f105 32ff 	add.w	r2, r5, #4294967295
  404820:	d0f8      	beq.n	404814 <_dtoa_r+0xb7c>
  404822:	e4f5      	b.n	404210 <_dtoa_r+0x578>
  404824:	9b04      	ldr	r3, [sp, #16]
  404826:	425c      	negs	r4, r3
  404828:	2c00      	cmp	r4, #0
  40482a:	f000 80bf 	beq.w	4049ac <_dtoa_r+0xd14>
  40482e:	4b8a      	ldr	r3, [pc, #552]	; (404a58 <_dtoa_r+0xdc0>)
  404830:	f004 020f 	and.w	r2, r4, #15
  404834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404838:	e9d3 2300 	ldrd	r2, r3, [r3]
  40483c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404840:	f001 fef0 	bl	406624 <__aeabi_dmul>
  404844:	1124      	asrs	r4, r4, #4
  404846:	4606      	mov	r6, r0
  404848:	460f      	mov	r7, r1
  40484a:	f000 812a 	beq.w	404aa2 <_dtoa_r+0xe0a>
  40484e:	4d83      	ldr	r5, [pc, #524]	; (404a5c <_dtoa_r+0xdc4>)
  404850:	f04f 0802 	mov.w	r8, #2
  404854:	07e2      	lsls	r2, r4, #31
  404856:	d509      	bpl.n	40486c <_dtoa_r+0xbd4>
  404858:	4630      	mov	r0, r6
  40485a:	4639      	mov	r1, r7
  40485c:	e9d5 2300 	ldrd	r2, r3, [r5]
  404860:	f001 fee0 	bl	406624 <__aeabi_dmul>
  404864:	f108 0801 	add.w	r8, r8, #1
  404868:	4606      	mov	r6, r0
  40486a:	460f      	mov	r7, r1
  40486c:	1064      	asrs	r4, r4, #1
  40486e:	f105 0508 	add.w	r5, r5, #8
  404872:	d1ef      	bne.n	404854 <_dtoa_r+0xbbc>
  404874:	e576      	b.n	404364 <_dtoa_r+0x6cc>
  404876:	9907      	ldr	r1, [sp, #28]
  404878:	2230      	movs	r2, #48	; 0x30
  40487a:	700a      	strb	r2, [r1, #0]
  40487c:	9a04      	ldr	r2, [sp, #16]
  40487e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404882:	3201      	adds	r2, #1
  404884:	9204      	str	r2, [sp, #16]
  404886:	f7ff bbd0 	b.w	40402a <_dtoa_r+0x392>
  40488a:	6871      	ldr	r1, [r6, #4]
  40488c:	4648      	mov	r0, r9
  40488e:	f000 fced 	bl	40526c <_Balloc>
  404892:	6933      	ldr	r3, [r6, #16]
  404894:	1c9a      	adds	r2, r3, #2
  404896:	4605      	mov	r5, r0
  404898:	0092      	lsls	r2, r2, #2
  40489a:	f106 010c 	add.w	r1, r6, #12
  40489e:	300c      	adds	r0, #12
  4048a0:	f000 fc46 	bl	405130 <memcpy>
  4048a4:	4629      	mov	r1, r5
  4048a6:	2201      	movs	r2, #1
  4048a8:	4648      	mov	r0, r9
  4048aa:	f000 fe8f 	bl	4055cc <__lshift>
  4048ae:	9005      	str	r0, [sp, #20]
  4048b0:	e670      	b.n	404594 <_dtoa_r+0x8fc>
  4048b2:	2b39      	cmp	r3, #57	; 0x39
  4048b4:	f8cd b014 	str.w	fp, [sp, #20]
  4048b8:	46d0      	mov	r8, sl
  4048ba:	f000 80a3 	beq.w	404a04 <_dtoa_r+0xd6c>
  4048be:	f103 0a01 	add.w	sl, r3, #1
  4048c2:	46b3      	mov	fp, r6
  4048c4:	f887 a000 	strb.w	sl, [r7]
  4048c8:	1c7d      	adds	r5, r7, #1
  4048ca:	9e05      	ldr	r6, [sp, #20]
  4048cc:	9408      	str	r4, [sp, #32]
  4048ce:	e49f      	b.n	404210 <_dtoa_r+0x578>
  4048d0:	465a      	mov	r2, fp
  4048d2:	46d0      	mov	r8, sl
  4048d4:	46b3      	mov	fp, r6
  4048d6:	469a      	mov	sl, r3
  4048d8:	4616      	mov	r6, r2
  4048da:	e47d      	b.n	4041d8 <_dtoa_r+0x540>
  4048dc:	495e      	ldr	r1, [pc, #376]	; (404a58 <_dtoa_r+0xdc0>)
  4048de:	f108 3aff 	add.w	sl, r8, #4294967295
  4048e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  4048e6:	4622      	mov	r2, r4
  4048e8:	462b      	mov	r3, r5
  4048ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4048ee:	f001 fe99 	bl	406624 <__aeabi_dmul>
  4048f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4048f6:	4639      	mov	r1, r7
  4048f8:	4630      	mov	r0, r6
  4048fa:	f002 f943 	bl	406b84 <__aeabi_d2iz>
  4048fe:	4604      	mov	r4, r0
  404900:	f001 fe2a 	bl	406558 <__aeabi_i2d>
  404904:	4602      	mov	r2, r0
  404906:	460b      	mov	r3, r1
  404908:	4630      	mov	r0, r6
  40490a:	4639      	mov	r1, r7
  40490c:	f001 fcd6 	bl	4062bc <__aeabi_dsub>
  404910:	9a07      	ldr	r2, [sp, #28]
  404912:	3430      	adds	r4, #48	; 0x30
  404914:	f1b8 0f01 	cmp.w	r8, #1
  404918:	4606      	mov	r6, r0
  40491a:	460f      	mov	r7, r1
  40491c:	7014      	strb	r4, [r2, #0]
  40491e:	f102 0501 	add.w	r5, r2, #1
  404922:	d01e      	beq.n	404962 <_dtoa_r+0xcca>
  404924:	9b07      	ldr	r3, [sp, #28]
  404926:	eb03 0b08 	add.w	fp, r3, r8
  40492a:	46a8      	mov	r8, r5
  40492c:	2200      	movs	r2, #0
  40492e:	4b4c      	ldr	r3, [pc, #304]	; (404a60 <_dtoa_r+0xdc8>)
  404930:	4630      	mov	r0, r6
  404932:	4639      	mov	r1, r7
  404934:	f001 fe76 	bl	406624 <__aeabi_dmul>
  404938:	460f      	mov	r7, r1
  40493a:	4606      	mov	r6, r0
  40493c:	f002 f922 	bl	406b84 <__aeabi_d2iz>
  404940:	4604      	mov	r4, r0
  404942:	f001 fe09 	bl	406558 <__aeabi_i2d>
  404946:	3430      	adds	r4, #48	; 0x30
  404948:	4602      	mov	r2, r0
  40494a:	460b      	mov	r3, r1
  40494c:	4630      	mov	r0, r6
  40494e:	4639      	mov	r1, r7
  404950:	f001 fcb4 	bl	4062bc <__aeabi_dsub>
  404954:	f808 4b01 	strb.w	r4, [r8], #1
  404958:	45c3      	cmp	fp, r8
  40495a:	4606      	mov	r6, r0
  40495c:	460f      	mov	r7, r1
  40495e:	d1e5      	bne.n	40492c <_dtoa_r+0xc94>
  404960:	4455      	add	r5, sl
  404962:	2200      	movs	r2, #0
  404964:	4b3f      	ldr	r3, [pc, #252]	; (404a64 <_dtoa_r+0xdcc>)
  404966:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40496a:	f001 fca9 	bl	4062c0 <__adddf3>
  40496e:	4632      	mov	r2, r6
  404970:	463b      	mov	r3, r7
  404972:	f002 f8c9 	bl	406b08 <__aeabi_dcmplt>
  404976:	2800      	cmp	r0, #0
  404978:	d04c      	beq.n	404a14 <_dtoa_r+0xd7c>
  40497a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40497c:	9304      	str	r3, [sp, #16]
  40497e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404982:	f7ff bb46 	b.w	404012 <_dtoa_r+0x37a>
  404986:	f04f 0800 	mov.w	r8, #0
  40498a:	4646      	mov	r6, r8
  40498c:	e6a8      	b.n	4046e0 <_dtoa_r+0xa48>
  40498e:	9b05      	ldr	r3, [sp, #20]
  404990:	9a06      	ldr	r2, [sp, #24]
  404992:	1a9d      	subs	r5, r3, r2
  404994:	2300      	movs	r3, #0
  404996:	f7ff bb72 	b.w	40407e <_dtoa_r+0x3e6>
  40499a:	2700      	movs	r7, #0
  40499c:	e6ca      	b.n	404734 <_dtoa_r+0xa9c>
  40499e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4049a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4049a2:	9d05      	ldr	r5, [sp, #20]
  4049a4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4049a8:	f7ff bb69 	b.w	40407e <_dtoa_r+0x3e6>
  4049ac:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  4049b0:	f04f 0802 	mov.w	r8, #2
  4049b4:	e4d6      	b.n	404364 <_dtoa_r+0x6cc>
  4049b6:	9408      	str	r4, [sp, #32]
  4049b8:	e5a0      	b.n	4044fc <_dtoa_r+0x864>
  4049ba:	9b06      	ldr	r3, [sp, #24]
  4049bc:	2b00      	cmp	r3, #0
  4049be:	f43f aebf 	beq.w	404740 <_dtoa_r+0xaa8>
  4049c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4049c4:	2b00      	cmp	r3, #0
  4049c6:	f77f aee3 	ble.w	404790 <_dtoa_r+0xaf8>
  4049ca:	2200      	movs	r2, #0
  4049cc:	4b24      	ldr	r3, [pc, #144]	; (404a60 <_dtoa_r+0xdc8>)
  4049ce:	4630      	mov	r0, r6
  4049d0:	4639      	mov	r1, r7
  4049d2:	f001 fe27 	bl	406624 <__aeabi_dmul>
  4049d6:	4606      	mov	r6, r0
  4049d8:	460f      	mov	r7, r1
  4049da:	f108 0001 	add.w	r0, r8, #1
  4049de:	f001 fdbb 	bl	406558 <__aeabi_i2d>
  4049e2:	4632      	mov	r2, r6
  4049e4:	463b      	mov	r3, r7
  4049e6:	f001 fe1d 	bl	406624 <__aeabi_dmul>
  4049ea:	2200      	movs	r2, #0
  4049ec:	4b18      	ldr	r3, [pc, #96]	; (404a50 <_dtoa_r+0xdb8>)
  4049ee:	f001 fc67 	bl	4062c0 <__adddf3>
  4049f2:	9a04      	ldr	r2, [sp, #16]
  4049f4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4049f8:	3a01      	subs	r2, #1
  4049fa:	4604      	mov	r4, r0
  4049fc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404a00:	9211      	str	r2, [sp, #68]	; 0x44
  404a02:	e4d0      	b.n	4043a6 <_dtoa_r+0x70e>
  404a04:	2239      	movs	r2, #57	; 0x39
  404a06:	46b3      	mov	fp, r6
  404a08:	9408      	str	r4, [sp, #32]
  404a0a:	9e05      	ldr	r6, [sp, #20]
  404a0c:	703a      	strb	r2, [r7, #0]
  404a0e:	1c7d      	adds	r5, r7, #1
  404a10:	f7ff bbf0 	b.w	4041f4 <_dtoa_r+0x55c>
  404a14:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  404a18:	2000      	movs	r0, #0
  404a1a:	4912      	ldr	r1, [pc, #72]	; (404a64 <_dtoa_r+0xdcc>)
  404a1c:	f001 fc4e 	bl	4062bc <__aeabi_dsub>
  404a20:	4632      	mov	r2, r6
  404a22:	463b      	mov	r3, r7
  404a24:	f002 f88e 	bl	406b44 <__aeabi_dcmpgt>
  404a28:	b908      	cbnz	r0, 404a2e <_dtoa_r+0xd96>
  404a2a:	e6b1      	b.n	404790 <_dtoa_r+0xaf8>
  404a2c:	4615      	mov	r5, r2
  404a2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404a32:	2b30      	cmp	r3, #48	; 0x30
  404a34:	f105 32ff 	add.w	r2, r5, #4294967295
  404a38:	d0f8      	beq.n	404a2c <_dtoa_r+0xd94>
  404a3a:	e530      	b.n	40449e <_dtoa_r+0x806>
  404a3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a3e:	9304      	str	r3, [sp, #16]
  404a40:	f7ff bae7 	b.w	404012 <_dtoa_r+0x37a>
  404a44:	f1ba 0f00 	cmp.w	sl, #0
  404a48:	f47f ad7a 	bne.w	404540 <_dtoa_r+0x8a8>
  404a4c:	e661      	b.n	404712 <_dtoa_r+0xa7a>
  404a4e:	bf00      	nop
  404a50:	401c0000 	.word	0x401c0000
  404a54:	40140000 	.word	0x40140000
  404a58:	00406d60 	.word	0x00406d60
  404a5c:	00406e28 	.word	0x00406e28
  404a60:	40240000 	.word	0x40240000
  404a64:	3fe00000 	.word	0x3fe00000
  404a68:	2b39      	cmp	r3, #57	; 0x39
  404a6a:	f8cd b014 	str.w	fp, [sp, #20]
  404a6e:	46d0      	mov	r8, sl
  404a70:	f8dd b008 	ldr.w	fp, [sp, #8]
  404a74:	469a      	mov	sl, r3
  404a76:	d0c5      	beq.n	404a04 <_dtoa_r+0xd6c>
  404a78:	f1bb 0f00 	cmp.w	fp, #0
  404a7c:	f73f aebc 	bgt.w	4047f8 <_dtoa_r+0xb60>
  404a80:	e6bc      	b.n	4047fc <_dtoa_r+0xb64>
  404a82:	f47f aebb 	bne.w	4047fc <_dtoa_r+0xb64>
  404a86:	f01a 0f01 	tst.w	sl, #1
  404a8a:	f43f aeb7 	beq.w	4047fc <_dtoa_r+0xb64>
  404a8e:	e6af      	b.n	4047f0 <_dtoa_r+0xb58>
  404a90:	f04f 0800 	mov.w	r8, #0
  404a94:	4646      	mov	r6, r8
  404a96:	e531      	b.n	4044fc <_dtoa_r+0x864>
  404a98:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404a9a:	2b02      	cmp	r3, #2
  404a9c:	dc21      	bgt.n	404ae2 <_dtoa_r+0xe4a>
  404a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404aa0:	e604      	b.n	4046ac <_dtoa_r+0xa14>
  404aa2:	f04f 0802 	mov.w	r8, #2
  404aa6:	e45d      	b.n	404364 <_dtoa_r+0x6cc>
  404aa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404aaa:	2b02      	cmp	r3, #2
  404aac:	dc19      	bgt.n	404ae2 <_dtoa_r+0xe4a>
  404aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ab0:	e563      	b.n	40457a <_dtoa_r+0x8e2>
  404ab2:	2400      	movs	r4, #0
  404ab4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  404ab8:	4621      	mov	r1, r4
  404aba:	4648      	mov	r0, r9
  404abc:	f000 fbd6 	bl	40526c <_Balloc>
  404ac0:	f04f 33ff 	mov.w	r3, #4294967295
  404ac4:	9306      	str	r3, [sp, #24]
  404ac6:	930d      	str	r3, [sp, #52]	; 0x34
  404ac8:	2301      	movs	r3, #1
  404aca:	9007      	str	r0, [sp, #28]
  404acc:	9421      	str	r4, [sp, #132]	; 0x84
  404ace:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  404ad2:	9309      	str	r3, [sp, #36]	; 0x24
  404ad4:	f7ff b9e9 	b.w	403eaa <_dtoa_r+0x212>
  404ad8:	f43f ab3d 	beq.w	404156 <_dtoa_r+0x4be>
  404adc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404ae0:	e522      	b.n	404528 <_dtoa_r+0x890>
  404ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ae4:	9306      	str	r3, [sp, #24]
  404ae6:	e5e9      	b.n	4046bc <_dtoa_r+0xa24>
  404ae8:	2501      	movs	r5, #1
  404aea:	f7ff b9a8 	b.w	403e3e <_dtoa_r+0x1a6>
  404aee:	bf00      	nop

00404af0 <__libc_fini_array>:
  404af0:	b538      	push	{r3, r4, r5, lr}
  404af2:	4d07      	ldr	r5, [pc, #28]	; (404b10 <__libc_fini_array+0x20>)
  404af4:	4c07      	ldr	r4, [pc, #28]	; (404b14 <__libc_fini_array+0x24>)
  404af6:	1b2c      	subs	r4, r5, r4
  404af8:	10a4      	asrs	r4, r4, #2
  404afa:	d005      	beq.n	404b08 <__libc_fini_array+0x18>
  404afc:	3c01      	subs	r4, #1
  404afe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404b02:	4798      	blx	r3
  404b04:	2c00      	cmp	r4, #0
  404b06:	d1f9      	bne.n	404afc <__libc_fini_array+0xc>
  404b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404b0c:	f002 b9b0 	b.w	406e70 <_fini>
  404b10:	00406e80 	.word	0x00406e80
  404b14:	00406e7c 	.word	0x00406e7c

00404b18 <_localeconv_r>:
  404b18:	4800      	ldr	r0, [pc, #0]	; (404b1c <_localeconv_r+0x4>)
  404b1a:	4770      	bx	lr
  404b1c:	20400444 	.word	0x20400444

00404b20 <_malloc_r>:
  404b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b24:	f101 050b 	add.w	r5, r1, #11
  404b28:	2d16      	cmp	r5, #22
  404b2a:	b083      	sub	sp, #12
  404b2c:	4606      	mov	r6, r0
  404b2e:	f240 809f 	bls.w	404c70 <_malloc_r+0x150>
  404b32:	f035 0507 	bics.w	r5, r5, #7
  404b36:	f100 80bf 	bmi.w	404cb8 <_malloc_r+0x198>
  404b3a:	42a9      	cmp	r1, r5
  404b3c:	f200 80bc 	bhi.w	404cb8 <_malloc_r+0x198>
  404b40:	f000 fb90 	bl	405264 <__malloc_lock>
  404b44:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  404b48:	f0c0 829c 	bcc.w	405084 <_malloc_r+0x564>
  404b4c:	0a6b      	lsrs	r3, r5, #9
  404b4e:	f000 80ba 	beq.w	404cc6 <_malloc_r+0x1a6>
  404b52:	2b04      	cmp	r3, #4
  404b54:	f200 8183 	bhi.w	404e5e <_malloc_r+0x33e>
  404b58:	09a8      	lsrs	r0, r5, #6
  404b5a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  404b5e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404b62:	3038      	adds	r0, #56	; 0x38
  404b64:	4fc4      	ldr	r7, [pc, #784]	; (404e78 <_malloc_r+0x358>)
  404b66:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404b6a:	f1a3 0108 	sub.w	r1, r3, #8
  404b6e:	685c      	ldr	r4, [r3, #4]
  404b70:	42a1      	cmp	r1, r4
  404b72:	d107      	bne.n	404b84 <_malloc_r+0x64>
  404b74:	e0ac      	b.n	404cd0 <_malloc_r+0x1b0>
  404b76:	2a00      	cmp	r2, #0
  404b78:	f280 80ac 	bge.w	404cd4 <_malloc_r+0x1b4>
  404b7c:	68e4      	ldr	r4, [r4, #12]
  404b7e:	42a1      	cmp	r1, r4
  404b80:	f000 80a6 	beq.w	404cd0 <_malloc_r+0x1b0>
  404b84:	6863      	ldr	r3, [r4, #4]
  404b86:	f023 0303 	bic.w	r3, r3, #3
  404b8a:	1b5a      	subs	r2, r3, r5
  404b8c:	2a0f      	cmp	r2, #15
  404b8e:	ddf2      	ble.n	404b76 <_malloc_r+0x56>
  404b90:	49b9      	ldr	r1, [pc, #740]	; (404e78 <_malloc_r+0x358>)
  404b92:	693c      	ldr	r4, [r7, #16]
  404b94:	f101 0e08 	add.w	lr, r1, #8
  404b98:	4574      	cmp	r4, lr
  404b9a:	f000 81b3 	beq.w	404f04 <_malloc_r+0x3e4>
  404b9e:	6863      	ldr	r3, [r4, #4]
  404ba0:	f023 0303 	bic.w	r3, r3, #3
  404ba4:	1b5a      	subs	r2, r3, r5
  404ba6:	2a0f      	cmp	r2, #15
  404ba8:	f300 8199 	bgt.w	404ede <_malloc_r+0x3be>
  404bac:	2a00      	cmp	r2, #0
  404bae:	f8c1 e014 	str.w	lr, [r1, #20]
  404bb2:	f8c1 e010 	str.w	lr, [r1, #16]
  404bb6:	f280 809e 	bge.w	404cf6 <_malloc_r+0x1d6>
  404bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404bbe:	f080 8167 	bcs.w	404e90 <_malloc_r+0x370>
  404bc2:	08db      	lsrs	r3, r3, #3
  404bc4:	f103 0c01 	add.w	ip, r3, #1
  404bc8:	2201      	movs	r2, #1
  404bca:	109b      	asrs	r3, r3, #2
  404bcc:	fa02 f303 	lsl.w	r3, r2, r3
  404bd0:	684a      	ldr	r2, [r1, #4]
  404bd2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  404bd6:	f8c4 8008 	str.w	r8, [r4, #8]
  404bda:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  404bde:	431a      	orrs	r2, r3
  404be0:	f1a9 0308 	sub.w	r3, r9, #8
  404be4:	60e3      	str	r3, [r4, #12]
  404be6:	604a      	str	r2, [r1, #4]
  404be8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  404bec:	f8c8 400c 	str.w	r4, [r8, #12]
  404bf0:	1083      	asrs	r3, r0, #2
  404bf2:	2401      	movs	r4, #1
  404bf4:	409c      	lsls	r4, r3
  404bf6:	4294      	cmp	r4, r2
  404bf8:	f200 808a 	bhi.w	404d10 <_malloc_r+0x1f0>
  404bfc:	4214      	tst	r4, r2
  404bfe:	d106      	bne.n	404c0e <_malloc_r+0xee>
  404c00:	f020 0003 	bic.w	r0, r0, #3
  404c04:	0064      	lsls	r4, r4, #1
  404c06:	4214      	tst	r4, r2
  404c08:	f100 0004 	add.w	r0, r0, #4
  404c0c:	d0fa      	beq.n	404c04 <_malloc_r+0xe4>
  404c0e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404c12:	46cc      	mov	ip, r9
  404c14:	4680      	mov	r8, r0
  404c16:	f8dc 100c 	ldr.w	r1, [ip, #12]
  404c1a:	458c      	cmp	ip, r1
  404c1c:	d107      	bne.n	404c2e <_malloc_r+0x10e>
  404c1e:	e173      	b.n	404f08 <_malloc_r+0x3e8>
  404c20:	2a00      	cmp	r2, #0
  404c22:	f280 8181 	bge.w	404f28 <_malloc_r+0x408>
  404c26:	68c9      	ldr	r1, [r1, #12]
  404c28:	458c      	cmp	ip, r1
  404c2a:	f000 816d 	beq.w	404f08 <_malloc_r+0x3e8>
  404c2e:	684b      	ldr	r3, [r1, #4]
  404c30:	f023 0303 	bic.w	r3, r3, #3
  404c34:	1b5a      	subs	r2, r3, r5
  404c36:	2a0f      	cmp	r2, #15
  404c38:	ddf2      	ble.n	404c20 <_malloc_r+0x100>
  404c3a:	460c      	mov	r4, r1
  404c3c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  404c40:	f854 8f08 	ldr.w	r8, [r4, #8]!
  404c44:	194b      	adds	r3, r1, r5
  404c46:	f045 0501 	orr.w	r5, r5, #1
  404c4a:	604d      	str	r5, [r1, #4]
  404c4c:	f042 0101 	orr.w	r1, r2, #1
  404c50:	f8c8 c00c 	str.w	ip, [r8, #12]
  404c54:	4630      	mov	r0, r6
  404c56:	f8cc 8008 	str.w	r8, [ip, #8]
  404c5a:	617b      	str	r3, [r7, #20]
  404c5c:	613b      	str	r3, [r7, #16]
  404c5e:	f8c3 e00c 	str.w	lr, [r3, #12]
  404c62:	f8c3 e008 	str.w	lr, [r3, #8]
  404c66:	6059      	str	r1, [r3, #4]
  404c68:	509a      	str	r2, [r3, r2]
  404c6a:	f000 fafd 	bl	405268 <__malloc_unlock>
  404c6e:	e01f      	b.n	404cb0 <_malloc_r+0x190>
  404c70:	2910      	cmp	r1, #16
  404c72:	d821      	bhi.n	404cb8 <_malloc_r+0x198>
  404c74:	f000 faf6 	bl	405264 <__malloc_lock>
  404c78:	2510      	movs	r5, #16
  404c7a:	2306      	movs	r3, #6
  404c7c:	2002      	movs	r0, #2
  404c7e:	4f7e      	ldr	r7, [pc, #504]	; (404e78 <_malloc_r+0x358>)
  404c80:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404c84:	f1a3 0208 	sub.w	r2, r3, #8
  404c88:	685c      	ldr	r4, [r3, #4]
  404c8a:	4294      	cmp	r4, r2
  404c8c:	f000 8145 	beq.w	404f1a <_malloc_r+0x3fa>
  404c90:	6863      	ldr	r3, [r4, #4]
  404c92:	68e1      	ldr	r1, [r4, #12]
  404c94:	68a5      	ldr	r5, [r4, #8]
  404c96:	f023 0303 	bic.w	r3, r3, #3
  404c9a:	4423      	add	r3, r4
  404c9c:	4630      	mov	r0, r6
  404c9e:	685a      	ldr	r2, [r3, #4]
  404ca0:	60e9      	str	r1, [r5, #12]
  404ca2:	f042 0201 	orr.w	r2, r2, #1
  404ca6:	608d      	str	r5, [r1, #8]
  404ca8:	605a      	str	r2, [r3, #4]
  404caa:	f000 fadd 	bl	405268 <__malloc_unlock>
  404cae:	3408      	adds	r4, #8
  404cb0:	4620      	mov	r0, r4
  404cb2:	b003      	add	sp, #12
  404cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cb8:	2400      	movs	r4, #0
  404cba:	230c      	movs	r3, #12
  404cbc:	4620      	mov	r0, r4
  404cbe:	6033      	str	r3, [r6, #0]
  404cc0:	b003      	add	sp, #12
  404cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc6:	2380      	movs	r3, #128	; 0x80
  404cc8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  404ccc:	203f      	movs	r0, #63	; 0x3f
  404cce:	e749      	b.n	404b64 <_malloc_r+0x44>
  404cd0:	4670      	mov	r0, lr
  404cd2:	e75d      	b.n	404b90 <_malloc_r+0x70>
  404cd4:	4423      	add	r3, r4
  404cd6:	68e1      	ldr	r1, [r4, #12]
  404cd8:	685a      	ldr	r2, [r3, #4]
  404cda:	68a5      	ldr	r5, [r4, #8]
  404cdc:	f042 0201 	orr.w	r2, r2, #1
  404ce0:	60e9      	str	r1, [r5, #12]
  404ce2:	4630      	mov	r0, r6
  404ce4:	608d      	str	r5, [r1, #8]
  404ce6:	605a      	str	r2, [r3, #4]
  404ce8:	f000 fabe 	bl	405268 <__malloc_unlock>
  404cec:	3408      	adds	r4, #8
  404cee:	4620      	mov	r0, r4
  404cf0:	b003      	add	sp, #12
  404cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cf6:	4423      	add	r3, r4
  404cf8:	4630      	mov	r0, r6
  404cfa:	685a      	ldr	r2, [r3, #4]
  404cfc:	f042 0201 	orr.w	r2, r2, #1
  404d00:	605a      	str	r2, [r3, #4]
  404d02:	f000 fab1 	bl	405268 <__malloc_unlock>
  404d06:	3408      	adds	r4, #8
  404d08:	4620      	mov	r0, r4
  404d0a:	b003      	add	sp, #12
  404d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d10:	68bc      	ldr	r4, [r7, #8]
  404d12:	6863      	ldr	r3, [r4, #4]
  404d14:	f023 0803 	bic.w	r8, r3, #3
  404d18:	45a8      	cmp	r8, r5
  404d1a:	d304      	bcc.n	404d26 <_malloc_r+0x206>
  404d1c:	ebc5 0308 	rsb	r3, r5, r8
  404d20:	2b0f      	cmp	r3, #15
  404d22:	f300 808c 	bgt.w	404e3e <_malloc_r+0x31e>
  404d26:	4b55      	ldr	r3, [pc, #340]	; (404e7c <_malloc_r+0x35c>)
  404d28:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404e8c <_malloc_r+0x36c>
  404d2c:	681a      	ldr	r2, [r3, #0]
  404d2e:	f8d9 3000 	ldr.w	r3, [r9]
  404d32:	3301      	adds	r3, #1
  404d34:	442a      	add	r2, r5
  404d36:	eb04 0a08 	add.w	sl, r4, r8
  404d3a:	f000 8160 	beq.w	404ffe <_malloc_r+0x4de>
  404d3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  404d42:	320f      	adds	r2, #15
  404d44:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  404d48:	f022 020f 	bic.w	r2, r2, #15
  404d4c:	4611      	mov	r1, r2
  404d4e:	4630      	mov	r0, r6
  404d50:	9201      	str	r2, [sp, #4]
  404d52:	f000 fd99 	bl	405888 <_sbrk_r>
  404d56:	f1b0 3fff 	cmp.w	r0, #4294967295
  404d5a:	4683      	mov	fp, r0
  404d5c:	9a01      	ldr	r2, [sp, #4]
  404d5e:	f000 8158 	beq.w	405012 <_malloc_r+0x4f2>
  404d62:	4582      	cmp	sl, r0
  404d64:	f200 80fc 	bhi.w	404f60 <_malloc_r+0x440>
  404d68:	4b45      	ldr	r3, [pc, #276]	; (404e80 <_malloc_r+0x360>)
  404d6a:	6819      	ldr	r1, [r3, #0]
  404d6c:	45da      	cmp	sl, fp
  404d6e:	4411      	add	r1, r2
  404d70:	6019      	str	r1, [r3, #0]
  404d72:	f000 8153 	beq.w	40501c <_malloc_r+0x4fc>
  404d76:	f8d9 0000 	ldr.w	r0, [r9]
  404d7a:	f8df e110 	ldr.w	lr, [pc, #272]	; 404e8c <_malloc_r+0x36c>
  404d7e:	3001      	adds	r0, #1
  404d80:	bf1b      	ittet	ne
  404d82:	ebca 0a0b 	rsbne	sl, sl, fp
  404d86:	4451      	addne	r1, sl
  404d88:	f8ce b000 	streq.w	fp, [lr]
  404d8c:	6019      	strne	r1, [r3, #0]
  404d8e:	f01b 0107 	ands.w	r1, fp, #7
  404d92:	f000 8117 	beq.w	404fc4 <_malloc_r+0x4a4>
  404d96:	f1c1 0008 	rsb	r0, r1, #8
  404d9a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404d9e:	4483      	add	fp, r0
  404da0:	3108      	adds	r1, #8
  404da2:	445a      	add	r2, fp
  404da4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  404da8:	ebc2 0901 	rsb	r9, r2, r1
  404dac:	4649      	mov	r1, r9
  404dae:	4630      	mov	r0, r6
  404db0:	9301      	str	r3, [sp, #4]
  404db2:	f000 fd69 	bl	405888 <_sbrk_r>
  404db6:	1c43      	adds	r3, r0, #1
  404db8:	9b01      	ldr	r3, [sp, #4]
  404dba:	f000 813f 	beq.w	40503c <_malloc_r+0x51c>
  404dbe:	ebcb 0200 	rsb	r2, fp, r0
  404dc2:	444a      	add	r2, r9
  404dc4:	f042 0201 	orr.w	r2, r2, #1
  404dc8:	6819      	ldr	r1, [r3, #0]
  404dca:	f8c7 b008 	str.w	fp, [r7, #8]
  404dce:	4449      	add	r1, r9
  404dd0:	42bc      	cmp	r4, r7
  404dd2:	f8cb 2004 	str.w	r2, [fp, #4]
  404dd6:	6019      	str	r1, [r3, #0]
  404dd8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 404e80 <_malloc_r+0x360>
  404ddc:	d016      	beq.n	404e0c <_malloc_r+0x2ec>
  404dde:	f1b8 0f0f 	cmp.w	r8, #15
  404de2:	f240 80fd 	bls.w	404fe0 <_malloc_r+0x4c0>
  404de6:	6862      	ldr	r2, [r4, #4]
  404de8:	f1a8 030c 	sub.w	r3, r8, #12
  404dec:	f023 0307 	bic.w	r3, r3, #7
  404df0:	18e0      	adds	r0, r4, r3
  404df2:	f002 0201 	and.w	r2, r2, #1
  404df6:	f04f 0e05 	mov.w	lr, #5
  404dfa:	431a      	orrs	r2, r3
  404dfc:	2b0f      	cmp	r3, #15
  404dfe:	6062      	str	r2, [r4, #4]
  404e00:	f8c0 e004 	str.w	lr, [r0, #4]
  404e04:	f8c0 e008 	str.w	lr, [r0, #8]
  404e08:	f200 811c 	bhi.w	405044 <_malloc_r+0x524>
  404e0c:	4b1d      	ldr	r3, [pc, #116]	; (404e84 <_malloc_r+0x364>)
  404e0e:	68bc      	ldr	r4, [r7, #8]
  404e10:	681a      	ldr	r2, [r3, #0]
  404e12:	4291      	cmp	r1, r2
  404e14:	bf88      	it	hi
  404e16:	6019      	strhi	r1, [r3, #0]
  404e18:	4b1b      	ldr	r3, [pc, #108]	; (404e88 <_malloc_r+0x368>)
  404e1a:	681a      	ldr	r2, [r3, #0]
  404e1c:	4291      	cmp	r1, r2
  404e1e:	6862      	ldr	r2, [r4, #4]
  404e20:	bf88      	it	hi
  404e22:	6019      	strhi	r1, [r3, #0]
  404e24:	f022 0203 	bic.w	r2, r2, #3
  404e28:	4295      	cmp	r5, r2
  404e2a:	eba2 0305 	sub.w	r3, r2, r5
  404e2e:	d801      	bhi.n	404e34 <_malloc_r+0x314>
  404e30:	2b0f      	cmp	r3, #15
  404e32:	dc04      	bgt.n	404e3e <_malloc_r+0x31e>
  404e34:	4630      	mov	r0, r6
  404e36:	f000 fa17 	bl	405268 <__malloc_unlock>
  404e3a:	2400      	movs	r4, #0
  404e3c:	e738      	b.n	404cb0 <_malloc_r+0x190>
  404e3e:	1962      	adds	r2, r4, r5
  404e40:	f043 0301 	orr.w	r3, r3, #1
  404e44:	f045 0501 	orr.w	r5, r5, #1
  404e48:	6065      	str	r5, [r4, #4]
  404e4a:	4630      	mov	r0, r6
  404e4c:	60ba      	str	r2, [r7, #8]
  404e4e:	6053      	str	r3, [r2, #4]
  404e50:	f000 fa0a 	bl	405268 <__malloc_unlock>
  404e54:	3408      	adds	r4, #8
  404e56:	4620      	mov	r0, r4
  404e58:	b003      	add	sp, #12
  404e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e5e:	2b14      	cmp	r3, #20
  404e60:	d971      	bls.n	404f46 <_malloc_r+0x426>
  404e62:	2b54      	cmp	r3, #84	; 0x54
  404e64:	f200 80a4 	bhi.w	404fb0 <_malloc_r+0x490>
  404e68:	0b28      	lsrs	r0, r5, #12
  404e6a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  404e6e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404e72:	306e      	adds	r0, #110	; 0x6e
  404e74:	e676      	b.n	404b64 <_malloc_r+0x44>
  404e76:	bf00      	nop
  404e78:	2040047c 	.word	0x2040047c
  404e7c:	2040092c 	.word	0x2040092c
  404e80:	20400930 	.word	0x20400930
  404e84:	20400928 	.word	0x20400928
  404e88:	20400924 	.word	0x20400924
  404e8c:	20400888 	.word	0x20400888
  404e90:	0a5a      	lsrs	r2, r3, #9
  404e92:	2a04      	cmp	r2, #4
  404e94:	d95e      	bls.n	404f54 <_malloc_r+0x434>
  404e96:	2a14      	cmp	r2, #20
  404e98:	f200 80b3 	bhi.w	405002 <_malloc_r+0x4e2>
  404e9c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404ea0:	0049      	lsls	r1, r1, #1
  404ea2:	325b      	adds	r2, #91	; 0x5b
  404ea4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  404ea8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404eac:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40508c <_malloc_r+0x56c>
  404eb0:	f1ac 0c08 	sub.w	ip, ip, #8
  404eb4:	458c      	cmp	ip, r1
  404eb6:	f000 8088 	beq.w	404fca <_malloc_r+0x4aa>
  404eba:	684a      	ldr	r2, [r1, #4]
  404ebc:	f022 0203 	bic.w	r2, r2, #3
  404ec0:	4293      	cmp	r3, r2
  404ec2:	d202      	bcs.n	404eca <_malloc_r+0x3aa>
  404ec4:	6889      	ldr	r1, [r1, #8]
  404ec6:	458c      	cmp	ip, r1
  404ec8:	d1f7      	bne.n	404eba <_malloc_r+0x39a>
  404eca:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  404ece:	687a      	ldr	r2, [r7, #4]
  404ed0:	f8c4 c00c 	str.w	ip, [r4, #12]
  404ed4:	60a1      	str	r1, [r4, #8]
  404ed6:	f8cc 4008 	str.w	r4, [ip, #8]
  404eda:	60cc      	str	r4, [r1, #12]
  404edc:	e688      	b.n	404bf0 <_malloc_r+0xd0>
  404ede:	1963      	adds	r3, r4, r5
  404ee0:	f042 0701 	orr.w	r7, r2, #1
  404ee4:	f045 0501 	orr.w	r5, r5, #1
  404ee8:	6065      	str	r5, [r4, #4]
  404eea:	4630      	mov	r0, r6
  404eec:	614b      	str	r3, [r1, #20]
  404eee:	610b      	str	r3, [r1, #16]
  404ef0:	f8c3 e00c 	str.w	lr, [r3, #12]
  404ef4:	f8c3 e008 	str.w	lr, [r3, #8]
  404ef8:	605f      	str	r7, [r3, #4]
  404efa:	509a      	str	r2, [r3, r2]
  404efc:	3408      	adds	r4, #8
  404efe:	f000 f9b3 	bl	405268 <__malloc_unlock>
  404f02:	e6d5      	b.n	404cb0 <_malloc_r+0x190>
  404f04:	684a      	ldr	r2, [r1, #4]
  404f06:	e673      	b.n	404bf0 <_malloc_r+0xd0>
  404f08:	f108 0801 	add.w	r8, r8, #1
  404f0c:	f018 0f03 	tst.w	r8, #3
  404f10:	f10c 0c08 	add.w	ip, ip, #8
  404f14:	f47f ae7f 	bne.w	404c16 <_malloc_r+0xf6>
  404f18:	e030      	b.n	404f7c <_malloc_r+0x45c>
  404f1a:	68dc      	ldr	r4, [r3, #12]
  404f1c:	42a3      	cmp	r3, r4
  404f1e:	bf08      	it	eq
  404f20:	3002      	addeq	r0, #2
  404f22:	f43f ae35 	beq.w	404b90 <_malloc_r+0x70>
  404f26:	e6b3      	b.n	404c90 <_malloc_r+0x170>
  404f28:	440b      	add	r3, r1
  404f2a:	460c      	mov	r4, r1
  404f2c:	685a      	ldr	r2, [r3, #4]
  404f2e:	68c9      	ldr	r1, [r1, #12]
  404f30:	f854 5f08 	ldr.w	r5, [r4, #8]!
  404f34:	f042 0201 	orr.w	r2, r2, #1
  404f38:	605a      	str	r2, [r3, #4]
  404f3a:	4630      	mov	r0, r6
  404f3c:	60e9      	str	r1, [r5, #12]
  404f3e:	608d      	str	r5, [r1, #8]
  404f40:	f000 f992 	bl	405268 <__malloc_unlock>
  404f44:	e6b4      	b.n	404cb0 <_malloc_r+0x190>
  404f46:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  404f4a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  404f4e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404f52:	e607      	b.n	404b64 <_malloc_r+0x44>
  404f54:	099a      	lsrs	r2, r3, #6
  404f56:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404f5a:	0049      	lsls	r1, r1, #1
  404f5c:	3238      	adds	r2, #56	; 0x38
  404f5e:	e7a1      	b.n	404ea4 <_malloc_r+0x384>
  404f60:	42bc      	cmp	r4, r7
  404f62:	4b4a      	ldr	r3, [pc, #296]	; (40508c <_malloc_r+0x56c>)
  404f64:	f43f af00 	beq.w	404d68 <_malloc_r+0x248>
  404f68:	689c      	ldr	r4, [r3, #8]
  404f6a:	6862      	ldr	r2, [r4, #4]
  404f6c:	f022 0203 	bic.w	r2, r2, #3
  404f70:	e75a      	b.n	404e28 <_malloc_r+0x308>
  404f72:	f859 3908 	ldr.w	r3, [r9], #-8
  404f76:	4599      	cmp	r9, r3
  404f78:	f040 8082 	bne.w	405080 <_malloc_r+0x560>
  404f7c:	f010 0f03 	tst.w	r0, #3
  404f80:	f100 30ff 	add.w	r0, r0, #4294967295
  404f84:	d1f5      	bne.n	404f72 <_malloc_r+0x452>
  404f86:	687b      	ldr	r3, [r7, #4]
  404f88:	ea23 0304 	bic.w	r3, r3, r4
  404f8c:	607b      	str	r3, [r7, #4]
  404f8e:	0064      	lsls	r4, r4, #1
  404f90:	429c      	cmp	r4, r3
  404f92:	f63f aebd 	bhi.w	404d10 <_malloc_r+0x1f0>
  404f96:	2c00      	cmp	r4, #0
  404f98:	f43f aeba 	beq.w	404d10 <_malloc_r+0x1f0>
  404f9c:	421c      	tst	r4, r3
  404f9e:	4640      	mov	r0, r8
  404fa0:	f47f ae35 	bne.w	404c0e <_malloc_r+0xee>
  404fa4:	0064      	lsls	r4, r4, #1
  404fa6:	421c      	tst	r4, r3
  404fa8:	f100 0004 	add.w	r0, r0, #4
  404fac:	d0fa      	beq.n	404fa4 <_malloc_r+0x484>
  404fae:	e62e      	b.n	404c0e <_malloc_r+0xee>
  404fb0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404fb4:	d818      	bhi.n	404fe8 <_malloc_r+0x4c8>
  404fb6:	0be8      	lsrs	r0, r5, #15
  404fb8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404fbc:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404fc0:	3077      	adds	r0, #119	; 0x77
  404fc2:	e5cf      	b.n	404b64 <_malloc_r+0x44>
  404fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404fc8:	e6eb      	b.n	404da2 <_malloc_r+0x282>
  404fca:	2101      	movs	r1, #1
  404fcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404fd0:	1092      	asrs	r2, r2, #2
  404fd2:	fa01 f202 	lsl.w	r2, r1, r2
  404fd6:	431a      	orrs	r2, r3
  404fd8:	f8c8 2004 	str.w	r2, [r8, #4]
  404fdc:	4661      	mov	r1, ip
  404fde:	e777      	b.n	404ed0 <_malloc_r+0x3b0>
  404fe0:	2301      	movs	r3, #1
  404fe2:	f8cb 3004 	str.w	r3, [fp, #4]
  404fe6:	e725      	b.n	404e34 <_malloc_r+0x314>
  404fe8:	f240 5254 	movw	r2, #1364	; 0x554
  404fec:	4293      	cmp	r3, r2
  404fee:	d820      	bhi.n	405032 <_malloc_r+0x512>
  404ff0:	0ca8      	lsrs	r0, r5, #18
  404ff2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404ff6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404ffa:	307c      	adds	r0, #124	; 0x7c
  404ffc:	e5b2      	b.n	404b64 <_malloc_r+0x44>
  404ffe:	3210      	adds	r2, #16
  405000:	e6a4      	b.n	404d4c <_malloc_r+0x22c>
  405002:	2a54      	cmp	r2, #84	; 0x54
  405004:	d826      	bhi.n	405054 <_malloc_r+0x534>
  405006:	0b1a      	lsrs	r2, r3, #12
  405008:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40500c:	0049      	lsls	r1, r1, #1
  40500e:	326e      	adds	r2, #110	; 0x6e
  405010:	e748      	b.n	404ea4 <_malloc_r+0x384>
  405012:	68bc      	ldr	r4, [r7, #8]
  405014:	6862      	ldr	r2, [r4, #4]
  405016:	f022 0203 	bic.w	r2, r2, #3
  40501a:	e705      	b.n	404e28 <_malloc_r+0x308>
  40501c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405020:	2800      	cmp	r0, #0
  405022:	f47f aea8 	bne.w	404d76 <_malloc_r+0x256>
  405026:	4442      	add	r2, r8
  405028:	68bb      	ldr	r3, [r7, #8]
  40502a:	f042 0201 	orr.w	r2, r2, #1
  40502e:	605a      	str	r2, [r3, #4]
  405030:	e6ec      	b.n	404e0c <_malloc_r+0x2ec>
  405032:	23fe      	movs	r3, #254	; 0xfe
  405034:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  405038:	207e      	movs	r0, #126	; 0x7e
  40503a:	e593      	b.n	404b64 <_malloc_r+0x44>
  40503c:	2201      	movs	r2, #1
  40503e:	f04f 0900 	mov.w	r9, #0
  405042:	e6c1      	b.n	404dc8 <_malloc_r+0x2a8>
  405044:	f104 0108 	add.w	r1, r4, #8
  405048:	4630      	mov	r0, r6
  40504a:	f000 fdf7 	bl	405c3c <_free_r>
  40504e:	f8d9 1000 	ldr.w	r1, [r9]
  405052:	e6db      	b.n	404e0c <_malloc_r+0x2ec>
  405054:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405058:	d805      	bhi.n	405066 <_malloc_r+0x546>
  40505a:	0bda      	lsrs	r2, r3, #15
  40505c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405060:	0049      	lsls	r1, r1, #1
  405062:	3277      	adds	r2, #119	; 0x77
  405064:	e71e      	b.n	404ea4 <_malloc_r+0x384>
  405066:	f240 5154 	movw	r1, #1364	; 0x554
  40506a:	428a      	cmp	r2, r1
  40506c:	d805      	bhi.n	40507a <_malloc_r+0x55a>
  40506e:	0c9a      	lsrs	r2, r3, #18
  405070:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405074:	0049      	lsls	r1, r1, #1
  405076:	327c      	adds	r2, #124	; 0x7c
  405078:	e714      	b.n	404ea4 <_malloc_r+0x384>
  40507a:	21fe      	movs	r1, #254	; 0xfe
  40507c:	227e      	movs	r2, #126	; 0x7e
  40507e:	e711      	b.n	404ea4 <_malloc_r+0x384>
  405080:	687b      	ldr	r3, [r7, #4]
  405082:	e784      	b.n	404f8e <_malloc_r+0x46e>
  405084:	08e8      	lsrs	r0, r5, #3
  405086:	1c43      	adds	r3, r0, #1
  405088:	005b      	lsls	r3, r3, #1
  40508a:	e5f8      	b.n	404c7e <_malloc_r+0x15e>
  40508c:	2040047c 	.word	0x2040047c

00405090 <memchr>:
  405090:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405094:	2a10      	cmp	r2, #16
  405096:	db2b      	blt.n	4050f0 <memchr+0x60>
  405098:	f010 0f07 	tst.w	r0, #7
  40509c:	d008      	beq.n	4050b0 <memchr+0x20>
  40509e:	f810 3b01 	ldrb.w	r3, [r0], #1
  4050a2:	3a01      	subs	r2, #1
  4050a4:	428b      	cmp	r3, r1
  4050a6:	d02d      	beq.n	405104 <memchr+0x74>
  4050a8:	f010 0f07 	tst.w	r0, #7
  4050ac:	b342      	cbz	r2, 405100 <memchr+0x70>
  4050ae:	d1f6      	bne.n	40509e <memchr+0xe>
  4050b0:	b4f0      	push	{r4, r5, r6, r7}
  4050b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4050b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4050ba:	f022 0407 	bic.w	r4, r2, #7
  4050be:	f07f 0700 	mvns.w	r7, #0
  4050c2:	2300      	movs	r3, #0
  4050c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4050c8:	3c08      	subs	r4, #8
  4050ca:	ea85 0501 	eor.w	r5, r5, r1
  4050ce:	ea86 0601 	eor.w	r6, r6, r1
  4050d2:	fa85 f547 	uadd8	r5, r5, r7
  4050d6:	faa3 f587 	sel	r5, r3, r7
  4050da:	fa86 f647 	uadd8	r6, r6, r7
  4050de:	faa5 f687 	sel	r6, r5, r7
  4050e2:	b98e      	cbnz	r6, 405108 <memchr+0x78>
  4050e4:	d1ee      	bne.n	4050c4 <memchr+0x34>
  4050e6:	bcf0      	pop	{r4, r5, r6, r7}
  4050e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4050ec:	f002 0207 	and.w	r2, r2, #7
  4050f0:	b132      	cbz	r2, 405100 <memchr+0x70>
  4050f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4050f6:	3a01      	subs	r2, #1
  4050f8:	ea83 0301 	eor.w	r3, r3, r1
  4050fc:	b113      	cbz	r3, 405104 <memchr+0x74>
  4050fe:	d1f8      	bne.n	4050f2 <memchr+0x62>
  405100:	2000      	movs	r0, #0
  405102:	4770      	bx	lr
  405104:	3801      	subs	r0, #1
  405106:	4770      	bx	lr
  405108:	2d00      	cmp	r5, #0
  40510a:	bf06      	itte	eq
  40510c:	4635      	moveq	r5, r6
  40510e:	3803      	subeq	r0, #3
  405110:	3807      	subne	r0, #7
  405112:	f015 0f01 	tst.w	r5, #1
  405116:	d107      	bne.n	405128 <memchr+0x98>
  405118:	3001      	adds	r0, #1
  40511a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40511e:	bf02      	ittt	eq
  405120:	3001      	addeq	r0, #1
  405122:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405126:	3001      	addeq	r0, #1
  405128:	bcf0      	pop	{r4, r5, r6, r7}
  40512a:	3801      	subs	r0, #1
  40512c:	4770      	bx	lr
  40512e:	bf00      	nop

00405130 <memcpy>:
  405130:	4684      	mov	ip, r0
  405132:	ea41 0300 	orr.w	r3, r1, r0
  405136:	f013 0303 	ands.w	r3, r3, #3
  40513a:	d16d      	bne.n	405218 <memcpy+0xe8>
  40513c:	3a40      	subs	r2, #64	; 0x40
  40513e:	d341      	bcc.n	4051c4 <memcpy+0x94>
  405140:	f851 3b04 	ldr.w	r3, [r1], #4
  405144:	f840 3b04 	str.w	r3, [r0], #4
  405148:	f851 3b04 	ldr.w	r3, [r1], #4
  40514c:	f840 3b04 	str.w	r3, [r0], #4
  405150:	f851 3b04 	ldr.w	r3, [r1], #4
  405154:	f840 3b04 	str.w	r3, [r0], #4
  405158:	f851 3b04 	ldr.w	r3, [r1], #4
  40515c:	f840 3b04 	str.w	r3, [r0], #4
  405160:	f851 3b04 	ldr.w	r3, [r1], #4
  405164:	f840 3b04 	str.w	r3, [r0], #4
  405168:	f851 3b04 	ldr.w	r3, [r1], #4
  40516c:	f840 3b04 	str.w	r3, [r0], #4
  405170:	f851 3b04 	ldr.w	r3, [r1], #4
  405174:	f840 3b04 	str.w	r3, [r0], #4
  405178:	f851 3b04 	ldr.w	r3, [r1], #4
  40517c:	f840 3b04 	str.w	r3, [r0], #4
  405180:	f851 3b04 	ldr.w	r3, [r1], #4
  405184:	f840 3b04 	str.w	r3, [r0], #4
  405188:	f851 3b04 	ldr.w	r3, [r1], #4
  40518c:	f840 3b04 	str.w	r3, [r0], #4
  405190:	f851 3b04 	ldr.w	r3, [r1], #4
  405194:	f840 3b04 	str.w	r3, [r0], #4
  405198:	f851 3b04 	ldr.w	r3, [r1], #4
  40519c:	f840 3b04 	str.w	r3, [r0], #4
  4051a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4051a4:	f840 3b04 	str.w	r3, [r0], #4
  4051a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4051ac:	f840 3b04 	str.w	r3, [r0], #4
  4051b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4051b4:	f840 3b04 	str.w	r3, [r0], #4
  4051b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4051bc:	f840 3b04 	str.w	r3, [r0], #4
  4051c0:	3a40      	subs	r2, #64	; 0x40
  4051c2:	d2bd      	bcs.n	405140 <memcpy+0x10>
  4051c4:	3230      	adds	r2, #48	; 0x30
  4051c6:	d311      	bcc.n	4051ec <memcpy+0xbc>
  4051c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4051cc:	f840 3b04 	str.w	r3, [r0], #4
  4051d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4051d4:	f840 3b04 	str.w	r3, [r0], #4
  4051d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4051dc:	f840 3b04 	str.w	r3, [r0], #4
  4051e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4051e4:	f840 3b04 	str.w	r3, [r0], #4
  4051e8:	3a10      	subs	r2, #16
  4051ea:	d2ed      	bcs.n	4051c8 <memcpy+0x98>
  4051ec:	320c      	adds	r2, #12
  4051ee:	d305      	bcc.n	4051fc <memcpy+0xcc>
  4051f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4051f4:	f840 3b04 	str.w	r3, [r0], #4
  4051f8:	3a04      	subs	r2, #4
  4051fa:	d2f9      	bcs.n	4051f0 <memcpy+0xc0>
  4051fc:	3204      	adds	r2, #4
  4051fe:	d008      	beq.n	405212 <memcpy+0xe2>
  405200:	07d2      	lsls	r2, r2, #31
  405202:	bf1c      	itt	ne
  405204:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405208:	f800 3b01 	strbne.w	r3, [r0], #1
  40520c:	d301      	bcc.n	405212 <memcpy+0xe2>
  40520e:	880b      	ldrh	r3, [r1, #0]
  405210:	8003      	strh	r3, [r0, #0]
  405212:	4660      	mov	r0, ip
  405214:	4770      	bx	lr
  405216:	bf00      	nop
  405218:	2a08      	cmp	r2, #8
  40521a:	d313      	bcc.n	405244 <memcpy+0x114>
  40521c:	078b      	lsls	r3, r1, #30
  40521e:	d08d      	beq.n	40513c <memcpy+0xc>
  405220:	f010 0303 	ands.w	r3, r0, #3
  405224:	d08a      	beq.n	40513c <memcpy+0xc>
  405226:	f1c3 0304 	rsb	r3, r3, #4
  40522a:	1ad2      	subs	r2, r2, r3
  40522c:	07db      	lsls	r3, r3, #31
  40522e:	bf1c      	itt	ne
  405230:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405234:	f800 3b01 	strbne.w	r3, [r0], #1
  405238:	d380      	bcc.n	40513c <memcpy+0xc>
  40523a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40523e:	f820 3b02 	strh.w	r3, [r0], #2
  405242:	e77b      	b.n	40513c <memcpy+0xc>
  405244:	3a04      	subs	r2, #4
  405246:	d3d9      	bcc.n	4051fc <memcpy+0xcc>
  405248:	3a01      	subs	r2, #1
  40524a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40524e:	f800 3b01 	strb.w	r3, [r0], #1
  405252:	d2f9      	bcs.n	405248 <memcpy+0x118>
  405254:	780b      	ldrb	r3, [r1, #0]
  405256:	7003      	strb	r3, [r0, #0]
  405258:	784b      	ldrb	r3, [r1, #1]
  40525a:	7043      	strb	r3, [r0, #1]
  40525c:	788b      	ldrb	r3, [r1, #2]
  40525e:	7083      	strb	r3, [r0, #2]
  405260:	4660      	mov	r0, ip
  405262:	4770      	bx	lr

00405264 <__malloc_lock>:
  405264:	4770      	bx	lr
  405266:	bf00      	nop

00405268 <__malloc_unlock>:
  405268:	4770      	bx	lr
  40526a:	bf00      	nop

0040526c <_Balloc>:
  40526c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40526e:	b570      	push	{r4, r5, r6, lr}
  405270:	4605      	mov	r5, r0
  405272:	460c      	mov	r4, r1
  405274:	b14b      	cbz	r3, 40528a <_Balloc+0x1e>
  405276:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40527a:	b180      	cbz	r0, 40529e <_Balloc+0x32>
  40527c:	6802      	ldr	r2, [r0, #0]
  40527e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405282:	2300      	movs	r3, #0
  405284:	6103      	str	r3, [r0, #16]
  405286:	60c3      	str	r3, [r0, #12]
  405288:	bd70      	pop	{r4, r5, r6, pc}
  40528a:	2221      	movs	r2, #33	; 0x21
  40528c:	2104      	movs	r1, #4
  40528e:	f000 fc57 	bl	405b40 <_calloc_r>
  405292:	64e8      	str	r0, [r5, #76]	; 0x4c
  405294:	4603      	mov	r3, r0
  405296:	2800      	cmp	r0, #0
  405298:	d1ed      	bne.n	405276 <_Balloc+0xa>
  40529a:	2000      	movs	r0, #0
  40529c:	bd70      	pop	{r4, r5, r6, pc}
  40529e:	2101      	movs	r1, #1
  4052a0:	fa01 f604 	lsl.w	r6, r1, r4
  4052a4:	1d72      	adds	r2, r6, #5
  4052a6:	4628      	mov	r0, r5
  4052a8:	0092      	lsls	r2, r2, #2
  4052aa:	f000 fc49 	bl	405b40 <_calloc_r>
  4052ae:	2800      	cmp	r0, #0
  4052b0:	d0f3      	beq.n	40529a <_Balloc+0x2e>
  4052b2:	6044      	str	r4, [r0, #4]
  4052b4:	6086      	str	r6, [r0, #8]
  4052b6:	e7e4      	b.n	405282 <_Balloc+0x16>

004052b8 <_Bfree>:
  4052b8:	b131      	cbz	r1, 4052c8 <_Bfree+0x10>
  4052ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4052bc:	684a      	ldr	r2, [r1, #4]
  4052be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4052c2:	6008      	str	r0, [r1, #0]
  4052c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4052c8:	4770      	bx	lr
  4052ca:	bf00      	nop

004052cc <__multadd>:
  4052cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4052ce:	690c      	ldr	r4, [r1, #16]
  4052d0:	b083      	sub	sp, #12
  4052d2:	460d      	mov	r5, r1
  4052d4:	4606      	mov	r6, r0
  4052d6:	f101 0e14 	add.w	lr, r1, #20
  4052da:	2700      	movs	r7, #0
  4052dc:	f8de 0000 	ldr.w	r0, [lr]
  4052e0:	b281      	uxth	r1, r0
  4052e2:	fb02 3101 	mla	r1, r2, r1, r3
  4052e6:	0c0b      	lsrs	r3, r1, #16
  4052e8:	0c00      	lsrs	r0, r0, #16
  4052ea:	fb02 3300 	mla	r3, r2, r0, r3
  4052ee:	b289      	uxth	r1, r1
  4052f0:	3701      	adds	r7, #1
  4052f2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  4052f6:	42bc      	cmp	r4, r7
  4052f8:	f84e 1b04 	str.w	r1, [lr], #4
  4052fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
  405300:	dcec      	bgt.n	4052dc <__multadd+0x10>
  405302:	b13b      	cbz	r3, 405314 <__multadd+0x48>
  405304:	68aa      	ldr	r2, [r5, #8]
  405306:	4294      	cmp	r4, r2
  405308:	da07      	bge.n	40531a <__multadd+0x4e>
  40530a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40530e:	3401      	adds	r4, #1
  405310:	6153      	str	r3, [r2, #20]
  405312:	612c      	str	r4, [r5, #16]
  405314:	4628      	mov	r0, r5
  405316:	b003      	add	sp, #12
  405318:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40531a:	6869      	ldr	r1, [r5, #4]
  40531c:	9301      	str	r3, [sp, #4]
  40531e:	3101      	adds	r1, #1
  405320:	4630      	mov	r0, r6
  405322:	f7ff ffa3 	bl	40526c <_Balloc>
  405326:	692a      	ldr	r2, [r5, #16]
  405328:	3202      	adds	r2, #2
  40532a:	f105 010c 	add.w	r1, r5, #12
  40532e:	4607      	mov	r7, r0
  405330:	0092      	lsls	r2, r2, #2
  405332:	300c      	adds	r0, #12
  405334:	f7ff fefc 	bl	405130 <memcpy>
  405338:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40533a:	6869      	ldr	r1, [r5, #4]
  40533c:	9b01      	ldr	r3, [sp, #4]
  40533e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405342:	6028      	str	r0, [r5, #0]
  405344:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405348:	463d      	mov	r5, r7
  40534a:	e7de      	b.n	40530a <__multadd+0x3e>

0040534c <__hi0bits>:
  40534c:	0c03      	lsrs	r3, r0, #16
  40534e:	041b      	lsls	r3, r3, #16
  405350:	b9b3      	cbnz	r3, 405380 <__hi0bits+0x34>
  405352:	0400      	lsls	r0, r0, #16
  405354:	2310      	movs	r3, #16
  405356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40535a:	bf04      	itt	eq
  40535c:	0200      	lsleq	r0, r0, #8
  40535e:	3308      	addeq	r3, #8
  405360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  405364:	bf04      	itt	eq
  405366:	0100      	lsleq	r0, r0, #4
  405368:	3304      	addeq	r3, #4
  40536a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40536e:	bf04      	itt	eq
  405370:	0080      	lsleq	r0, r0, #2
  405372:	3302      	addeq	r3, #2
  405374:	2800      	cmp	r0, #0
  405376:	db07      	blt.n	405388 <__hi0bits+0x3c>
  405378:	0042      	lsls	r2, r0, #1
  40537a:	d403      	bmi.n	405384 <__hi0bits+0x38>
  40537c:	2020      	movs	r0, #32
  40537e:	4770      	bx	lr
  405380:	2300      	movs	r3, #0
  405382:	e7e8      	b.n	405356 <__hi0bits+0xa>
  405384:	1c58      	adds	r0, r3, #1
  405386:	4770      	bx	lr
  405388:	4618      	mov	r0, r3
  40538a:	4770      	bx	lr

0040538c <__lo0bits>:
  40538c:	6803      	ldr	r3, [r0, #0]
  40538e:	f013 0207 	ands.w	r2, r3, #7
  405392:	d007      	beq.n	4053a4 <__lo0bits+0x18>
  405394:	07d9      	lsls	r1, r3, #31
  405396:	d420      	bmi.n	4053da <__lo0bits+0x4e>
  405398:	079a      	lsls	r2, r3, #30
  40539a:	d420      	bmi.n	4053de <__lo0bits+0x52>
  40539c:	089b      	lsrs	r3, r3, #2
  40539e:	6003      	str	r3, [r0, #0]
  4053a0:	2002      	movs	r0, #2
  4053a2:	4770      	bx	lr
  4053a4:	b299      	uxth	r1, r3
  4053a6:	b909      	cbnz	r1, 4053ac <__lo0bits+0x20>
  4053a8:	0c1b      	lsrs	r3, r3, #16
  4053aa:	2210      	movs	r2, #16
  4053ac:	f013 0fff 	tst.w	r3, #255	; 0xff
  4053b0:	bf04      	itt	eq
  4053b2:	0a1b      	lsreq	r3, r3, #8
  4053b4:	3208      	addeq	r2, #8
  4053b6:	0719      	lsls	r1, r3, #28
  4053b8:	bf04      	itt	eq
  4053ba:	091b      	lsreq	r3, r3, #4
  4053bc:	3204      	addeq	r2, #4
  4053be:	0799      	lsls	r1, r3, #30
  4053c0:	bf04      	itt	eq
  4053c2:	089b      	lsreq	r3, r3, #2
  4053c4:	3202      	addeq	r2, #2
  4053c6:	07d9      	lsls	r1, r3, #31
  4053c8:	d404      	bmi.n	4053d4 <__lo0bits+0x48>
  4053ca:	085b      	lsrs	r3, r3, #1
  4053cc:	d101      	bne.n	4053d2 <__lo0bits+0x46>
  4053ce:	2020      	movs	r0, #32
  4053d0:	4770      	bx	lr
  4053d2:	3201      	adds	r2, #1
  4053d4:	6003      	str	r3, [r0, #0]
  4053d6:	4610      	mov	r0, r2
  4053d8:	4770      	bx	lr
  4053da:	2000      	movs	r0, #0
  4053dc:	4770      	bx	lr
  4053de:	085b      	lsrs	r3, r3, #1
  4053e0:	6003      	str	r3, [r0, #0]
  4053e2:	2001      	movs	r0, #1
  4053e4:	4770      	bx	lr
  4053e6:	bf00      	nop

004053e8 <__i2b>:
  4053e8:	b510      	push	{r4, lr}
  4053ea:	460c      	mov	r4, r1
  4053ec:	2101      	movs	r1, #1
  4053ee:	f7ff ff3d 	bl	40526c <_Balloc>
  4053f2:	2201      	movs	r2, #1
  4053f4:	6144      	str	r4, [r0, #20]
  4053f6:	6102      	str	r2, [r0, #16]
  4053f8:	bd10      	pop	{r4, pc}
  4053fa:	bf00      	nop

004053fc <__multiply>:
  4053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405400:	690d      	ldr	r5, [r1, #16]
  405402:	6917      	ldr	r7, [r2, #16]
  405404:	42bd      	cmp	r5, r7
  405406:	b083      	sub	sp, #12
  405408:	460c      	mov	r4, r1
  40540a:	4616      	mov	r6, r2
  40540c:	da04      	bge.n	405418 <__multiply+0x1c>
  40540e:	462a      	mov	r2, r5
  405410:	4634      	mov	r4, r6
  405412:	463d      	mov	r5, r7
  405414:	460e      	mov	r6, r1
  405416:	4617      	mov	r7, r2
  405418:	68a3      	ldr	r3, [r4, #8]
  40541a:	6861      	ldr	r1, [r4, #4]
  40541c:	eb05 0807 	add.w	r8, r5, r7
  405420:	4598      	cmp	r8, r3
  405422:	bfc8      	it	gt
  405424:	3101      	addgt	r1, #1
  405426:	f7ff ff21 	bl	40526c <_Balloc>
  40542a:	f100 0c14 	add.w	ip, r0, #20
  40542e:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  405432:	45cc      	cmp	ip, r9
  405434:	9000      	str	r0, [sp, #0]
  405436:	d205      	bcs.n	405444 <__multiply+0x48>
  405438:	4663      	mov	r3, ip
  40543a:	2100      	movs	r1, #0
  40543c:	f843 1b04 	str.w	r1, [r3], #4
  405440:	4599      	cmp	r9, r3
  405442:	d8fb      	bhi.n	40543c <__multiply+0x40>
  405444:	f106 0214 	add.w	r2, r6, #20
  405448:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40544c:	f104 0314 	add.w	r3, r4, #20
  405450:	4552      	cmp	r2, sl
  405452:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  405456:	d254      	bcs.n	405502 <__multiply+0x106>
  405458:	f8cd 9004 	str.w	r9, [sp, #4]
  40545c:	4699      	mov	r9, r3
  40545e:	f852 3b04 	ldr.w	r3, [r2], #4
  405462:	fa1f fb83 	uxth.w	fp, r3
  405466:	f1bb 0f00 	cmp.w	fp, #0
  40546a:	d020      	beq.n	4054ae <__multiply+0xb2>
  40546c:	2000      	movs	r0, #0
  40546e:	464f      	mov	r7, r9
  405470:	4666      	mov	r6, ip
  405472:	4605      	mov	r5, r0
  405474:	e000      	b.n	405478 <__multiply+0x7c>
  405476:	461e      	mov	r6, r3
  405478:	f857 4b04 	ldr.w	r4, [r7], #4
  40547c:	6830      	ldr	r0, [r6, #0]
  40547e:	b2a1      	uxth	r1, r4
  405480:	b283      	uxth	r3, r0
  405482:	fb0b 3101 	mla	r1, fp, r1, r3
  405486:	0c24      	lsrs	r4, r4, #16
  405488:	0c00      	lsrs	r0, r0, #16
  40548a:	194b      	adds	r3, r1, r5
  40548c:	fb0b 0004 	mla	r0, fp, r4, r0
  405490:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  405494:	b299      	uxth	r1, r3
  405496:	4633      	mov	r3, r6
  405498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40549c:	45be      	cmp	lr, r7
  40549e:	ea4f 4510 	mov.w	r5, r0, lsr #16
  4054a2:	f843 1b04 	str.w	r1, [r3], #4
  4054a6:	d8e6      	bhi.n	405476 <__multiply+0x7a>
  4054a8:	6075      	str	r5, [r6, #4]
  4054aa:	f852 3c04 	ldr.w	r3, [r2, #-4]
  4054ae:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  4054b2:	d020      	beq.n	4054f6 <__multiply+0xfa>
  4054b4:	f8dc 3000 	ldr.w	r3, [ip]
  4054b8:	4667      	mov	r7, ip
  4054ba:	4618      	mov	r0, r3
  4054bc:	464d      	mov	r5, r9
  4054be:	2100      	movs	r1, #0
  4054c0:	e000      	b.n	4054c4 <__multiply+0xc8>
  4054c2:	4637      	mov	r7, r6
  4054c4:	882c      	ldrh	r4, [r5, #0]
  4054c6:	0c00      	lsrs	r0, r0, #16
  4054c8:	fb0b 0004 	mla	r0, fp, r4, r0
  4054cc:	4401      	add	r1, r0
  4054ce:	b29c      	uxth	r4, r3
  4054d0:	463e      	mov	r6, r7
  4054d2:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  4054d6:	f846 3b04 	str.w	r3, [r6], #4
  4054da:	6878      	ldr	r0, [r7, #4]
  4054dc:	f855 4b04 	ldr.w	r4, [r5], #4
  4054e0:	b283      	uxth	r3, r0
  4054e2:	0c24      	lsrs	r4, r4, #16
  4054e4:	fb0b 3404 	mla	r4, fp, r4, r3
  4054e8:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  4054ec:	45ae      	cmp	lr, r5
  4054ee:	ea4f 4113 	mov.w	r1, r3, lsr #16
  4054f2:	d8e6      	bhi.n	4054c2 <__multiply+0xc6>
  4054f4:	607b      	str	r3, [r7, #4]
  4054f6:	4592      	cmp	sl, r2
  4054f8:	f10c 0c04 	add.w	ip, ip, #4
  4054fc:	d8af      	bhi.n	40545e <__multiply+0x62>
  4054fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
  405502:	f1b8 0f00 	cmp.w	r8, #0
  405506:	dd0b      	ble.n	405520 <__multiply+0x124>
  405508:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40550c:	f1a9 0904 	sub.w	r9, r9, #4
  405510:	b11b      	cbz	r3, 40551a <__multiply+0x11e>
  405512:	e005      	b.n	405520 <__multiply+0x124>
  405514:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  405518:	b913      	cbnz	r3, 405520 <__multiply+0x124>
  40551a:	f1b8 0801 	subs.w	r8, r8, #1
  40551e:	d1f9      	bne.n	405514 <__multiply+0x118>
  405520:	9800      	ldr	r0, [sp, #0]
  405522:	f8c0 8010 	str.w	r8, [r0, #16]
  405526:	b003      	add	sp, #12
  405528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040552c <__pow5mult>:
  40552c:	f012 0303 	ands.w	r3, r2, #3
  405530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405534:	4614      	mov	r4, r2
  405536:	4607      	mov	r7, r0
  405538:	d12e      	bne.n	405598 <__pow5mult+0x6c>
  40553a:	460e      	mov	r6, r1
  40553c:	10a4      	asrs	r4, r4, #2
  40553e:	d01c      	beq.n	40557a <__pow5mult+0x4e>
  405540:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  405542:	b395      	cbz	r5, 4055aa <__pow5mult+0x7e>
  405544:	07e3      	lsls	r3, r4, #31
  405546:	f04f 0800 	mov.w	r8, #0
  40554a:	d406      	bmi.n	40555a <__pow5mult+0x2e>
  40554c:	1064      	asrs	r4, r4, #1
  40554e:	d014      	beq.n	40557a <__pow5mult+0x4e>
  405550:	6828      	ldr	r0, [r5, #0]
  405552:	b1a8      	cbz	r0, 405580 <__pow5mult+0x54>
  405554:	4605      	mov	r5, r0
  405556:	07e3      	lsls	r3, r4, #31
  405558:	d5f8      	bpl.n	40554c <__pow5mult+0x20>
  40555a:	462a      	mov	r2, r5
  40555c:	4631      	mov	r1, r6
  40555e:	4638      	mov	r0, r7
  405560:	f7ff ff4c 	bl	4053fc <__multiply>
  405564:	b1b6      	cbz	r6, 405594 <__pow5mult+0x68>
  405566:	6872      	ldr	r2, [r6, #4]
  405568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40556a:	1064      	asrs	r4, r4, #1
  40556c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405570:	6031      	str	r1, [r6, #0]
  405572:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405576:	4606      	mov	r6, r0
  405578:	d1ea      	bne.n	405550 <__pow5mult+0x24>
  40557a:	4630      	mov	r0, r6
  40557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405580:	462a      	mov	r2, r5
  405582:	4629      	mov	r1, r5
  405584:	4638      	mov	r0, r7
  405586:	f7ff ff39 	bl	4053fc <__multiply>
  40558a:	6028      	str	r0, [r5, #0]
  40558c:	f8c0 8000 	str.w	r8, [r0]
  405590:	4605      	mov	r5, r0
  405592:	e7e0      	b.n	405556 <__pow5mult+0x2a>
  405594:	4606      	mov	r6, r0
  405596:	e7d9      	b.n	40554c <__pow5mult+0x20>
  405598:	1e5a      	subs	r2, r3, #1
  40559a:	4d0b      	ldr	r5, [pc, #44]	; (4055c8 <__pow5mult+0x9c>)
  40559c:	2300      	movs	r3, #0
  40559e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4055a2:	f7ff fe93 	bl	4052cc <__multadd>
  4055a6:	4606      	mov	r6, r0
  4055a8:	e7c8      	b.n	40553c <__pow5mult+0x10>
  4055aa:	2101      	movs	r1, #1
  4055ac:	4638      	mov	r0, r7
  4055ae:	f7ff fe5d 	bl	40526c <_Balloc>
  4055b2:	f240 2171 	movw	r1, #625	; 0x271
  4055b6:	2201      	movs	r2, #1
  4055b8:	2300      	movs	r3, #0
  4055ba:	6141      	str	r1, [r0, #20]
  4055bc:	6102      	str	r2, [r0, #16]
  4055be:	4605      	mov	r5, r0
  4055c0:	64b8      	str	r0, [r7, #72]	; 0x48
  4055c2:	6003      	str	r3, [r0, #0]
  4055c4:	e7be      	b.n	405544 <__pow5mult+0x18>
  4055c6:	bf00      	nop
  4055c8:	00406e50 	.word	0x00406e50

004055cc <__lshift>:
  4055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4055d0:	4691      	mov	r9, r2
  4055d2:	690a      	ldr	r2, [r1, #16]
  4055d4:	688b      	ldr	r3, [r1, #8]
  4055d6:	ea4f 1469 	mov.w	r4, r9, asr #5
  4055da:	eb04 0802 	add.w	r8, r4, r2
  4055de:	f108 0501 	add.w	r5, r8, #1
  4055e2:	429d      	cmp	r5, r3
  4055e4:	460e      	mov	r6, r1
  4055e6:	4682      	mov	sl, r0
  4055e8:	6849      	ldr	r1, [r1, #4]
  4055ea:	dd04      	ble.n	4055f6 <__lshift+0x2a>
  4055ec:	005b      	lsls	r3, r3, #1
  4055ee:	429d      	cmp	r5, r3
  4055f0:	f101 0101 	add.w	r1, r1, #1
  4055f4:	dcfa      	bgt.n	4055ec <__lshift+0x20>
  4055f6:	4650      	mov	r0, sl
  4055f8:	f7ff fe38 	bl	40526c <_Balloc>
  4055fc:	2c00      	cmp	r4, #0
  4055fe:	f100 0214 	add.w	r2, r0, #20
  405602:	dd38      	ble.n	405676 <__lshift+0xaa>
  405604:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  405608:	2100      	movs	r1, #0
  40560a:	f842 1b04 	str.w	r1, [r2], #4
  40560e:	4293      	cmp	r3, r2
  405610:	d1fb      	bne.n	40560a <__lshift+0x3e>
  405612:	6934      	ldr	r4, [r6, #16]
  405614:	f106 0114 	add.w	r1, r6, #20
  405618:	f019 091f 	ands.w	r9, r9, #31
  40561c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405620:	d021      	beq.n	405666 <__lshift+0x9a>
  405622:	f1c9 0220 	rsb	r2, r9, #32
  405626:	2400      	movs	r4, #0
  405628:	680f      	ldr	r7, [r1, #0]
  40562a:	fa07 fc09 	lsl.w	ip, r7, r9
  40562e:	ea4c 0404 	orr.w	r4, ip, r4
  405632:	469c      	mov	ip, r3
  405634:	f843 4b04 	str.w	r4, [r3], #4
  405638:	f851 4b04 	ldr.w	r4, [r1], #4
  40563c:	458e      	cmp	lr, r1
  40563e:	fa24 f402 	lsr.w	r4, r4, r2
  405642:	d8f1      	bhi.n	405628 <__lshift+0x5c>
  405644:	f8cc 4004 	str.w	r4, [ip, #4]
  405648:	b10c      	cbz	r4, 40564e <__lshift+0x82>
  40564a:	f108 0502 	add.w	r5, r8, #2
  40564e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  405652:	6872      	ldr	r2, [r6, #4]
  405654:	3d01      	subs	r5, #1
  405656:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40565a:	6105      	str	r5, [r0, #16]
  40565c:	6031      	str	r1, [r6, #0]
  40565e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405666:	3b04      	subs	r3, #4
  405668:	f851 2b04 	ldr.w	r2, [r1], #4
  40566c:	f843 2f04 	str.w	r2, [r3, #4]!
  405670:	458e      	cmp	lr, r1
  405672:	d8f9      	bhi.n	405668 <__lshift+0x9c>
  405674:	e7eb      	b.n	40564e <__lshift+0x82>
  405676:	4613      	mov	r3, r2
  405678:	e7cb      	b.n	405612 <__lshift+0x46>
  40567a:	bf00      	nop

0040567c <__mcmp>:
  40567c:	6902      	ldr	r2, [r0, #16]
  40567e:	690b      	ldr	r3, [r1, #16]
  405680:	1ad2      	subs	r2, r2, r3
  405682:	d112      	bne.n	4056aa <__mcmp+0x2e>
  405684:	009b      	lsls	r3, r3, #2
  405686:	3014      	adds	r0, #20
  405688:	3114      	adds	r1, #20
  40568a:	4419      	add	r1, r3
  40568c:	b410      	push	{r4}
  40568e:	4403      	add	r3, r0
  405690:	e001      	b.n	405696 <__mcmp+0x1a>
  405692:	4298      	cmp	r0, r3
  405694:	d20b      	bcs.n	4056ae <__mcmp+0x32>
  405696:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40569a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40569e:	4294      	cmp	r4, r2
  4056a0:	d0f7      	beq.n	405692 <__mcmp+0x16>
  4056a2:	d307      	bcc.n	4056b4 <__mcmp+0x38>
  4056a4:	2001      	movs	r0, #1
  4056a6:	bc10      	pop	{r4}
  4056a8:	4770      	bx	lr
  4056aa:	4610      	mov	r0, r2
  4056ac:	4770      	bx	lr
  4056ae:	2000      	movs	r0, #0
  4056b0:	bc10      	pop	{r4}
  4056b2:	4770      	bx	lr
  4056b4:	f04f 30ff 	mov.w	r0, #4294967295
  4056b8:	e7f5      	b.n	4056a6 <__mcmp+0x2a>
  4056ba:	bf00      	nop

004056bc <__mdiff>:
  4056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4056c0:	690b      	ldr	r3, [r1, #16]
  4056c2:	460f      	mov	r7, r1
  4056c4:	6911      	ldr	r1, [r2, #16]
  4056c6:	1a5b      	subs	r3, r3, r1
  4056c8:	2b00      	cmp	r3, #0
  4056ca:	4690      	mov	r8, r2
  4056cc:	d117      	bne.n	4056fe <__mdiff+0x42>
  4056ce:	0089      	lsls	r1, r1, #2
  4056d0:	f107 0214 	add.w	r2, r7, #20
  4056d4:	f108 0514 	add.w	r5, r8, #20
  4056d8:	1853      	adds	r3, r2, r1
  4056da:	4429      	add	r1, r5
  4056dc:	e001      	b.n	4056e2 <__mdiff+0x26>
  4056de:	429a      	cmp	r2, r3
  4056e0:	d25e      	bcs.n	4057a0 <__mdiff+0xe4>
  4056e2:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  4056e6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4056ea:	42a6      	cmp	r6, r4
  4056ec:	d0f7      	beq.n	4056de <__mdiff+0x22>
  4056ee:	d260      	bcs.n	4057b2 <__mdiff+0xf6>
  4056f0:	463b      	mov	r3, r7
  4056f2:	4614      	mov	r4, r2
  4056f4:	4647      	mov	r7, r8
  4056f6:	f04f 0901 	mov.w	r9, #1
  4056fa:	4698      	mov	r8, r3
  4056fc:	e006      	b.n	40570c <__mdiff+0x50>
  4056fe:	db5d      	blt.n	4057bc <__mdiff+0x100>
  405700:	f107 0514 	add.w	r5, r7, #20
  405704:	f102 0414 	add.w	r4, r2, #20
  405708:	f04f 0900 	mov.w	r9, #0
  40570c:	6879      	ldr	r1, [r7, #4]
  40570e:	f7ff fdad 	bl	40526c <_Balloc>
  405712:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405716:	693e      	ldr	r6, [r7, #16]
  405718:	f8c0 900c 	str.w	r9, [r0, #12]
  40571c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405720:	46a6      	mov	lr, r4
  405722:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405726:	f100 0414 	add.w	r4, r0, #20
  40572a:	2300      	movs	r3, #0
  40572c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405730:	f855 8b04 	ldr.w	r8, [r5], #4
  405734:	b28a      	uxth	r2, r1
  405736:	fa13 f388 	uxtah	r3, r3, r8
  40573a:	0c09      	lsrs	r1, r1, #16
  40573c:	1a9a      	subs	r2, r3, r2
  40573e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405742:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405746:	b292      	uxth	r2, r2
  405748:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40574c:	45f4      	cmp	ip, lr
  40574e:	f844 2b04 	str.w	r2, [r4], #4
  405752:	ea4f 4323 	mov.w	r3, r3, asr #16
  405756:	d8e9      	bhi.n	40572c <__mdiff+0x70>
  405758:	42af      	cmp	r7, r5
  40575a:	d917      	bls.n	40578c <__mdiff+0xd0>
  40575c:	46a4      	mov	ip, r4
  40575e:	4629      	mov	r1, r5
  405760:	f851 eb04 	ldr.w	lr, [r1], #4
  405764:	fa13 f28e 	uxtah	r2, r3, lr
  405768:	1413      	asrs	r3, r2, #16
  40576a:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40576e:	b292      	uxth	r2, r2
  405770:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405774:	428f      	cmp	r7, r1
  405776:	f84c 2b04 	str.w	r2, [ip], #4
  40577a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40577e:	d8ef      	bhi.n	405760 <__mdiff+0xa4>
  405780:	43ed      	mvns	r5, r5
  405782:	443d      	add	r5, r7
  405784:	f025 0503 	bic.w	r5, r5, #3
  405788:	3504      	adds	r5, #4
  40578a:	442c      	add	r4, r5
  40578c:	3c04      	subs	r4, #4
  40578e:	b922      	cbnz	r2, 40579a <__mdiff+0xde>
  405790:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405794:	3e01      	subs	r6, #1
  405796:	2b00      	cmp	r3, #0
  405798:	d0fa      	beq.n	405790 <__mdiff+0xd4>
  40579a:	6106      	str	r6, [r0, #16]
  40579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4057a0:	2100      	movs	r1, #0
  4057a2:	f7ff fd63 	bl	40526c <_Balloc>
  4057a6:	2201      	movs	r2, #1
  4057a8:	2300      	movs	r3, #0
  4057aa:	6102      	str	r2, [r0, #16]
  4057ac:	6143      	str	r3, [r0, #20]
  4057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4057b2:	462c      	mov	r4, r5
  4057b4:	f04f 0900 	mov.w	r9, #0
  4057b8:	4615      	mov	r5, r2
  4057ba:	e7a7      	b.n	40570c <__mdiff+0x50>
  4057bc:	463b      	mov	r3, r7
  4057be:	f107 0414 	add.w	r4, r7, #20
  4057c2:	f108 0514 	add.w	r5, r8, #20
  4057c6:	4647      	mov	r7, r8
  4057c8:	f04f 0901 	mov.w	r9, #1
  4057cc:	4698      	mov	r8, r3
  4057ce:	e79d      	b.n	40570c <__mdiff+0x50>

004057d0 <__d2b>:
  4057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057d4:	b082      	sub	sp, #8
  4057d6:	2101      	movs	r1, #1
  4057d8:	461c      	mov	r4, r3
  4057da:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4057de:	4615      	mov	r5, r2
  4057e0:	9e08      	ldr	r6, [sp, #32]
  4057e2:	f7ff fd43 	bl	40526c <_Balloc>
  4057e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4057ea:	4680      	mov	r8, r0
  4057ec:	b10f      	cbz	r7, 4057f2 <__d2b+0x22>
  4057ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4057f2:	9401      	str	r4, [sp, #4]
  4057f4:	b31d      	cbz	r5, 40583e <__d2b+0x6e>
  4057f6:	a802      	add	r0, sp, #8
  4057f8:	f840 5d08 	str.w	r5, [r0, #-8]!
  4057fc:	f7ff fdc6 	bl	40538c <__lo0bits>
  405800:	2800      	cmp	r0, #0
  405802:	d134      	bne.n	40586e <__d2b+0x9e>
  405804:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405808:	f8c8 2014 	str.w	r2, [r8, #20]
  40580c:	2b00      	cmp	r3, #0
  40580e:	bf0c      	ite	eq
  405810:	2101      	moveq	r1, #1
  405812:	2102      	movne	r1, #2
  405814:	f8c8 3018 	str.w	r3, [r8, #24]
  405818:	f8c8 1010 	str.w	r1, [r8, #16]
  40581c:	b9df      	cbnz	r7, 405856 <__d2b+0x86>
  40581e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  405822:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405826:	6030      	str	r0, [r6, #0]
  405828:	6918      	ldr	r0, [r3, #16]
  40582a:	f7ff fd8f 	bl	40534c <__hi0bits>
  40582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405830:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405834:	6018      	str	r0, [r3, #0]
  405836:	4640      	mov	r0, r8
  405838:	b002      	add	sp, #8
  40583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40583e:	a801      	add	r0, sp, #4
  405840:	f7ff fda4 	bl	40538c <__lo0bits>
  405844:	9b01      	ldr	r3, [sp, #4]
  405846:	f8c8 3014 	str.w	r3, [r8, #20]
  40584a:	2101      	movs	r1, #1
  40584c:	3020      	adds	r0, #32
  40584e:	f8c8 1010 	str.w	r1, [r8, #16]
  405852:	2f00      	cmp	r7, #0
  405854:	d0e3      	beq.n	40581e <__d2b+0x4e>
  405856:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405858:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40585c:	4407      	add	r7, r0
  40585e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405862:	6037      	str	r7, [r6, #0]
  405864:	6018      	str	r0, [r3, #0]
  405866:	4640      	mov	r0, r8
  405868:	b002      	add	sp, #8
  40586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40586e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405872:	f1c0 0120 	rsb	r1, r0, #32
  405876:	fa03 f101 	lsl.w	r1, r3, r1
  40587a:	430a      	orrs	r2, r1
  40587c:	40c3      	lsrs	r3, r0
  40587e:	9301      	str	r3, [sp, #4]
  405880:	f8c8 2014 	str.w	r2, [r8, #20]
  405884:	e7c2      	b.n	40580c <__d2b+0x3c>
  405886:	bf00      	nop

00405888 <_sbrk_r>:
  405888:	b538      	push	{r3, r4, r5, lr}
  40588a:	4c07      	ldr	r4, [pc, #28]	; (4058a8 <_sbrk_r+0x20>)
  40588c:	2300      	movs	r3, #0
  40588e:	4605      	mov	r5, r0
  405890:	4608      	mov	r0, r1
  405892:	6023      	str	r3, [r4, #0]
  405894:	f7fb ff3e 	bl	401714 <_sbrk>
  405898:	1c43      	adds	r3, r0, #1
  40589a:	d000      	beq.n	40589e <_sbrk_r+0x16>
  40589c:	bd38      	pop	{r3, r4, r5, pc}
  40589e:	6823      	ldr	r3, [r4, #0]
  4058a0:	2b00      	cmp	r3, #0
  4058a2:	d0fb      	beq.n	40589c <_sbrk_r+0x14>
  4058a4:	602b      	str	r3, [r5, #0]
  4058a6:	bd38      	pop	{r3, r4, r5, pc}
  4058a8:	20400a2c 	.word	0x20400a2c
	...

004058c0 <strlen>:
  4058c0:	f890 f000 	pld	[r0]
  4058c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4058c8:	f020 0107 	bic.w	r1, r0, #7
  4058cc:	f06f 0c00 	mvn.w	ip, #0
  4058d0:	f010 0407 	ands.w	r4, r0, #7
  4058d4:	f891 f020 	pld	[r1, #32]
  4058d8:	f040 8049 	bne.w	40596e <strlen+0xae>
  4058dc:	f04f 0400 	mov.w	r4, #0
  4058e0:	f06f 0007 	mvn.w	r0, #7
  4058e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4058e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4058ec:	f100 0008 	add.w	r0, r0, #8
  4058f0:	fa82 f24c 	uadd8	r2, r2, ip
  4058f4:	faa4 f28c 	sel	r2, r4, ip
  4058f8:	fa83 f34c 	uadd8	r3, r3, ip
  4058fc:	faa2 f38c 	sel	r3, r2, ip
  405900:	bb4b      	cbnz	r3, 405956 <strlen+0x96>
  405902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405906:	fa82 f24c 	uadd8	r2, r2, ip
  40590a:	f100 0008 	add.w	r0, r0, #8
  40590e:	faa4 f28c 	sel	r2, r4, ip
  405912:	fa83 f34c 	uadd8	r3, r3, ip
  405916:	faa2 f38c 	sel	r3, r2, ip
  40591a:	b9e3      	cbnz	r3, 405956 <strlen+0x96>
  40591c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405920:	fa82 f24c 	uadd8	r2, r2, ip
  405924:	f100 0008 	add.w	r0, r0, #8
  405928:	faa4 f28c 	sel	r2, r4, ip
  40592c:	fa83 f34c 	uadd8	r3, r3, ip
  405930:	faa2 f38c 	sel	r3, r2, ip
  405934:	b97b      	cbnz	r3, 405956 <strlen+0x96>
  405936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40593a:	f101 0120 	add.w	r1, r1, #32
  40593e:	fa82 f24c 	uadd8	r2, r2, ip
  405942:	f100 0008 	add.w	r0, r0, #8
  405946:	faa4 f28c 	sel	r2, r4, ip
  40594a:	fa83 f34c 	uadd8	r3, r3, ip
  40594e:	faa2 f38c 	sel	r3, r2, ip
  405952:	2b00      	cmp	r3, #0
  405954:	d0c6      	beq.n	4058e4 <strlen+0x24>
  405956:	2a00      	cmp	r2, #0
  405958:	bf04      	itt	eq
  40595a:	3004      	addeq	r0, #4
  40595c:	461a      	moveq	r2, r3
  40595e:	ba12      	rev	r2, r2
  405960:	fab2 f282 	clz	r2, r2
  405964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40596c:	4770      	bx	lr
  40596e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405972:	f004 0503 	and.w	r5, r4, #3
  405976:	f1c4 0000 	rsb	r0, r4, #0
  40597a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40597e:	f014 0f04 	tst.w	r4, #4
  405982:	f891 f040 	pld	[r1, #64]	; 0x40
  405986:	fa0c f505 	lsl.w	r5, ip, r5
  40598a:	ea62 0205 	orn	r2, r2, r5
  40598e:	bf1c      	itt	ne
  405990:	ea63 0305 	ornne	r3, r3, r5
  405994:	4662      	movne	r2, ip
  405996:	f04f 0400 	mov.w	r4, #0
  40599a:	e7a9      	b.n	4058f0 <strlen+0x30>

0040599c <__ssprint_r>:
  40599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059a0:	6893      	ldr	r3, [r2, #8]
  4059a2:	b083      	sub	sp, #12
  4059a4:	4690      	mov	r8, r2
  4059a6:	2b00      	cmp	r3, #0
  4059a8:	d072      	beq.n	405a90 <__ssprint_r+0xf4>
  4059aa:	4683      	mov	fp, r0
  4059ac:	f04f 0900 	mov.w	r9, #0
  4059b0:	6816      	ldr	r6, [r2, #0]
  4059b2:	6808      	ldr	r0, [r1, #0]
  4059b4:	688b      	ldr	r3, [r1, #8]
  4059b6:	460d      	mov	r5, r1
  4059b8:	464c      	mov	r4, r9
  4059ba:	2c00      	cmp	r4, #0
  4059bc:	d045      	beq.n	405a4a <__ssprint_r+0xae>
  4059be:	429c      	cmp	r4, r3
  4059c0:	461f      	mov	r7, r3
  4059c2:	469a      	mov	sl, r3
  4059c4:	d346      	bcc.n	405a54 <__ssprint_r+0xb8>
  4059c6:	89ab      	ldrh	r3, [r5, #12]
  4059c8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4059cc:	d02d      	beq.n	405a2a <__ssprint_r+0x8e>
  4059ce:	696f      	ldr	r7, [r5, #20]
  4059d0:	6929      	ldr	r1, [r5, #16]
  4059d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4059d6:	ebc1 0a00 	rsb	sl, r1, r0
  4059da:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4059de:	1c60      	adds	r0, r4, #1
  4059e0:	107f      	asrs	r7, r7, #1
  4059e2:	4450      	add	r0, sl
  4059e4:	42b8      	cmp	r0, r7
  4059e6:	463a      	mov	r2, r7
  4059e8:	bf84      	itt	hi
  4059ea:	4607      	movhi	r7, r0
  4059ec:	463a      	movhi	r2, r7
  4059ee:	055b      	lsls	r3, r3, #21
  4059f0:	d533      	bpl.n	405a5a <__ssprint_r+0xbe>
  4059f2:	4611      	mov	r1, r2
  4059f4:	4658      	mov	r0, fp
  4059f6:	f7ff f893 	bl	404b20 <_malloc_r>
  4059fa:	2800      	cmp	r0, #0
  4059fc:	d037      	beq.n	405a6e <__ssprint_r+0xd2>
  4059fe:	4652      	mov	r2, sl
  405a00:	6929      	ldr	r1, [r5, #16]
  405a02:	9001      	str	r0, [sp, #4]
  405a04:	f7ff fb94 	bl	405130 <memcpy>
  405a08:	89aa      	ldrh	r2, [r5, #12]
  405a0a:	9b01      	ldr	r3, [sp, #4]
  405a0c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405a14:	81aa      	strh	r2, [r5, #12]
  405a16:	ebca 0207 	rsb	r2, sl, r7
  405a1a:	eb03 000a 	add.w	r0, r3, sl
  405a1e:	616f      	str	r7, [r5, #20]
  405a20:	612b      	str	r3, [r5, #16]
  405a22:	6028      	str	r0, [r5, #0]
  405a24:	60aa      	str	r2, [r5, #8]
  405a26:	4627      	mov	r7, r4
  405a28:	46a2      	mov	sl, r4
  405a2a:	4652      	mov	r2, sl
  405a2c:	4649      	mov	r1, r9
  405a2e:	f000 f9ed 	bl	405e0c <memmove>
  405a32:	f8d8 2008 	ldr.w	r2, [r8, #8]
  405a36:	68ab      	ldr	r3, [r5, #8]
  405a38:	6828      	ldr	r0, [r5, #0]
  405a3a:	1bdb      	subs	r3, r3, r7
  405a3c:	4450      	add	r0, sl
  405a3e:	1b14      	subs	r4, r2, r4
  405a40:	60ab      	str	r3, [r5, #8]
  405a42:	6028      	str	r0, [r5, #0]
  405a44:	f8c8 4008 	str.w	r4, [r8, #8]
  405a48:	b314      	cbz	r4, 405a90 <__ssprint_r+0xf4>
  405a4a:	f8d6 9000 	ldr.w	r9, [r6]
  405a4e:	6874      	ldr	r4, [r6, #4]
  405a50:	3608      	adds	r6, #8
  405a52:	e7b2      	b.n	4059ba <__ssprint_r+0x1e>
  405a54:	4627      	mov	r7, r4
  405a56:	46a2      	mov	sl, r4
  405a58:	e7e7      	b.n	405a2a <__ssprint_r+0x8e>
  405a5a:	4658      	mov	r0, fp
  405a5c:	f000 fa3a 	bl	405ed4 <_realloc_r>
  405a60:	4603      	mov	r3, r0
  405a62:	2800      	cmp	r0, #0
  405a64:	d1d7      	bne.n	405a16 <__ssprint_r+0x7a>
  405a66:	6929      	ldr	r1, [r5, #16]
  405a68:	4658      	mov	r0, fp
  405a6a:	f000 f8e7 	bl	405c3c <_free_r>
  405a6e:	230c      	movs	r3, #12
  405a70:	f8cb 3000 	str.w	r3, [fp]
  405a74:	89ab      	ldrh	r3, [r5, #12]
  405a76:	2200      	movs	r2, #0
  405a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a7c:	f04f 30ff 	mov.w	r0, #4294967295
  405a80:	81ab      	strh	r3, [r5, #12]
  405a82:	f8c8 2008 	str.w	r2, [r8, #8]
  405a86:	f8c8 2004 	str.w	r2, [r8, #4]
  405a8a:	b003      	add	sp, #12
  405a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a90:	2000      	movs	r0, #0
  405a92:	f8c8 0004 	str.w	r0, [r8, #4]
  405a96:	b003      	add	sp, #12
  405a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405a9c <__register_exitproc>:
  405a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405aa0:	4c25      	ldr	r4, [pc, #148]	; (405b38 <__register_exitproc+0x9c>)
  405aa2:	6825      	ldr	r5, [r4, #0]
  405aa4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405aa8:	4606      	mov	r6, r0
  405aaa:	4688      	mov	r8, r1
  405aac:	4692      	mov	sl, r2
  405aae:	4699      	mov	r9, r3
  405ab0:	b3c4      	cbz	r4, 405b24 <__register_exitproc+0x88>
  405ab2:	6860      	ldr	r0, [r4, #4]
  405ab4:	281f      	cmp	r0, #31
  405ab6:	dc17      	bgt.n	405ae8 <__register_exitproc+0x4c>
  405ab8:	1c43      	adds	r3, r0, #1
  405aba:	b176      	cbz	r6, 405ada <__register_exitproc+0x3e>
  405abc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405ac0:	2201      	movs	r2, #1
  405ac2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  405ac6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  405aca:	4082      	lsls	r2, r0
  405acc:	4311      	orrs	r1, r2
  405ace:	2e02      	cmp	r6, #2
  405ad0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  405ad4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405ad8:	d01e      	beq.n	405b18 <__register_exitproc+0x7c>
  405ada:	3002      	adds	r0, #2
  405adc:	6063      	str	r3, [r4, #4]
  405ade:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  405ae2:	2000      	movs	r0, #0
  405ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405ae8:	4b14      	ldr	r3, [pc, #80]	; (405b3c <__register_exitproc+0xa0>)
  405aea:	b303      	cbz	r3, 405b2e <__register_exitproc+0x92>
  405aec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405af0:	f3af 8000 	nop.w
  405af4:	4604      	mov	r4, r0
  405af6:	b1d0      	cbz	r0, 405b2e <__register_exitproc+0x92>
  405af8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405afc:	2700      	movs	r7, #0
  405afe:	e880 0088 	stmia.w	r0, {r3, r7}
  405b02:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405b06:	4638      	mov	r0, r7
  405b08:	2301      	movs	r3, #1
  405b0a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  405b0e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  405b12:	2e00      	cmp	r6, #0
  405b14:	d0e1      	beq.n	405ada <__register_exitproc+0x3e>
  405b16:	e7d1      	b.n	405abc <__register_exitproc+0x20>
  405b18:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405b1c:	430a      	orrs	r2, r1
  405b1e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  405b22:	e7da      	b.n	405ada <__register_exitproc+0x3e>
  405b24:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405b28:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405b2c:	e7c1      	b.n	405ab2 <__register_exitproc+0x16>
  405b2e:	f04f 30ff 	mov.w	r0, #4294967295
  405b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b36:	bf00      	nop
  405b38:	00406cd8 	.word	0x00406cd8
  405b3c:	00000000 	.word	0x00000000

00405b40 <_calloc_r>:
  405b40:	b510      	push	{r4, lr}
  405b42:	fb02 f101 	mul.w	r1, r2, r1
  405b46:	f7fe ffeb 	bl	404b20 <_malloc_r>
  405b4a:	4604      	mov	r4, r0
  405b4c:	b1d8      	cbz	r0, 405b86 <_calloc_r+0x46>
  405b4e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  405b52:	f022 0203 	bic.w	r2, r2, #3
  405b56:	3a04      	subs	r2, #4
  405b58:	2a24      	cmp	r2, #36	; 0x24
  405b5a:	d818      	bhi.n	405b8e <_calloc_r+0x4e>
  405b5c:	2a13      	cmp	r2, #19
  405b5e:	d914      	bls.n	405b8a <_calloc_r+0x4a>
  405b60:	2300      	movs	r3, #0
  405b62:	2a1b      	cmp	r2, #27
  405b64:	6003      	str	r3, [r0, #0]
  405b66:	6043      	str	r3, [r0, #4]
  405b68:	d916      	bls.n	405b98 <_calloc_r+0x58>
  405b6a:	2a24      	cmp	r2, #36	; 0x24
  405b6c:	6083      	str	r3, [r0, #8]
  405b6e:	60c3      	str	r3, [r0, #12]
  405b70:	bf11      	iteee	ne
  405b72:	f100 0210 	addne.w	r2, r0, #16
  405b76:	6103      	streq	r3, [r0, #16]
  405b78:	6143      	streq	r3, [r0, #20]
  405b7a:	f100 0218 	addeq.w	r2, r0, #24
  405b7e:	2300      	movs	r3, #0
  405b80:	6013      	str	r3, [r2, #0]
  405b82:	6053      	str	r3, [r2, #4]
  405b84:	6093      	str	r3, [r2, #8]
  405b86:	4620      	mov	r0, r4
  405b88:	bd10      	pop	{r4, pc}
  405b8a:	4602      	mov	r2, r0
  405b8c:	e7f7      	b.n	405b7e <_calloc_r+0x3e>
  405b8e:	2100      	movs	r1, #0
  405b90:	f7fc fc1c 	bl	4023cc <memset>
  405b94:	4620      	mov	r0, r4
  405b96:	bd10      	pop	{r4, pc}
  405b98:	f100 0208 	add.w	r2, r0, #8
  405b9c:	e7ef      	b.n	405b7e <_calloc_r+0x3e>
  405b9e:	bf00      	nop

00405ba0 <_malloc_trim_r>:
  405ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405ba2:	4f23      	ldr	r7, [pc, #140]	; (405c30 <_malloc_trim_r+0x90>)
  405ba4:	460c      	mov	r4, r1
  405ba6:	4606      	mov	r6, r0
  405ba8:	f7ff fb5c 	bl	405264 <__malloc_lock>
  405bac:	68bb      	ldr	r3, [r7, #8]
  405bae:	685d      	ldr	r5, [r3, #4]
  405bb0:	f025 0503 	bic.w	r5, r5, #3
  405bb4:	1b29      	subs	r1, r5, r4
  405bb6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405bba:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405bbe:	f021 010f 	bic.w	r1, r1, #15
  405bc2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405bc6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405bca:	db07      	blt.n	405bdc <_malloc_trim_r+0x3c>
  405bcc:	2100      	movs	r1, #0
  405bce:	4630      	mov	r0, r6
  405bd0:	f7ff fe5a 	bl	405888 <_sbrk_r>
  405bd4:	68bb      	ldr	r3, [r7, #8]
  405bd6:	442b      	add	r3, r5
  405bd8:	4298      	cmp	r0, r3
  405bda:	d004      	beq.n	405be6 <_malloc_trim_r+0x46>
  405bdc:	4630      	mov	r0, r6
  405bde:	f7ff fb43 	bl	405268 <__malloc_unlock>
  405be2:	2000      	movs	r0, #0
  405be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405be6:	4261      	negs	r1, r4
  405be8:	4630      	mov	r0, r6
  405bea:	f7ff fe4d 	bl	405888 <_sbrk_r>
  405bee:	3001      	adds	r0, #1
  405bf0:	d00d      	beq.n	405c0e <_malloc_trim_r+0x6e>
  405bf2:	4b10      	ldr	r3, [pc, #64]	; (405c34 <_malloc_trim_r+0x94>)
  405bf4:	68ba      	ldr	r2, [r7, #8]
  405bf6:	6819      	ldr	r1, [r3, #0]
  405bf8:	1b2d      	subs	r5, r5, r4
  405bfa:	f045 0501 	orr.w	r5, r5, #1
  405bfe:	4630      	mov	r0, r6
  405c00:	1b09      	subs	r1, r1, r4
  405c02:	6055      	str	r5, [r2, #4]
  405c04:	6019      	str	r1, [r3, #0]
  405c06:	f7ff fb2f 	bl	405268 <__malloc_unlock>
  405c0a:	2001      	movs	r0, #1
  405c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c0e:	2100      	movs	r1, #0
  405c10:	4630      	mov	r0, r6
  405c12:	f7ff fe39 	bl	405888 <_sbrk_r>
  405c16:	68ba      	ldr	r2, [r7, #8]
  405c18:	1a83      	subs	r3, r0, r2
  405c1a:	2b0f      	cmp	r3, #15
  405c1c:	ddde      	ble.n	405bdc <_malloc_trim_r+0x3c>
  405c1e:	4c06      	ldr	r4, [pc, #24]	; (405c38 <_malloc_trim_r+0x98>)
  405c20:	4904      	ldr	r1, [pc, #16]	; (405c34 <_malloc_trim_r+0x94>)
  405c22:	6824      	ldr	r4, [r4, #0]
  405c24:	f043 0301 	orr.w	r3, r3, #1
  405c28:	1b00      	subs	r0, r0, r4
  405c2a:	6053      	str	r3, [r2, #4]
  405c2c:	6008      	str	r0, [r1, #0]
  405c2e:	e7d5      	b.n	405bdc <_malloc_trim_r+0x3c>
  405c30:	2040047c 	.word	0x2040047c
  405c34:	20400930 	.word	0x20400930
  405c38:	20400888 	.word	0x20400888

00405c3c <_free_r>:
  405c3c:	2900      	cmp	r1, #0
  405c3e:	d045      	beq.n	405ccc <_free_r+0x90>
  405c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c44:	460d      	mov	r5, r1
  405c46:	4680      	mov	r8, r0
  405c48:	f7ff fb0c 	bl	405264 <__malloc_lock>
  405c4c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405c50:	496a      	ldr	r1, [pc, #424]	; (405dfc <_free_r+0x1c0>)
  405c52:	f027 0301 	bic.w	r3, r7, #1
  405c56:	f1a5 0408 	sub.w	r4, r5, #8
  405c5a:	18e2      	adds	r2, r4, r3
  405c5c:	688e      	ldr	r6, [r1, #8]
  405c5e:	6850      	ldr	r0, [r2, #4]
  405c60:	42b2      	cmp	r2, r6
  405c62:	f020 0003 	bic.w	r0, r0, #3
  405c66:	d062      	beq.n	405d2e <_free_r+0xf2>
  405c68:	07fe      	lsls	r6, r7, #31
  405c6a:	6050      	str	r0, [r2, #4]
  405c6c:	d40b      	bmi.n	405c86 <_free_r+0x4a>
  405c6e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405c72:	1be4      	subs	r4, r4, r7
  405c74:	f101 0e08 	add.w	lr, r1, #8
  405c78:	68a5      	ldr	r5, [r4, #8]
  405c7a:	4575      	cmp	r5, lr
  405c7c:	443b      	add	r3, r7
  405c7e:	d06f      	beq.n	405d60 <_free_r+0x124>
  405c80:	68e7      	ldr	r7, [r4, #12]
  405c82:	60ef      	str	r7, [r5, #12]
  405c84:	60bd      	str	r5, [r7, #8]
  405c86:	1815      	adds	r5, r2, r0
  405c88:	686d      	ldr	r5, [r5, #4]
  405c8a:	07ed      	lsls	r5, r5, #31
  405c8c:	d542      	bpl.n	405d14 <_free_r+0xd8>
  405c8e:	f043 0201 	orr.w	r2, r3, #1
  405c92:	6062      	str	r2, [r4, #4]
  405c94:	50e3      	str	r3, [r4, r3]
  405c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c9a:	d218      	bcs.n	405cce <_free_r+0x92>
  405c9c:	08db      	lsrs	r3, r3, #3
  405c9e:	1c5a      	adds	r2, r3, #1
  405ca0:	684d      	ldr	r5, [r1, #4]
  405ca2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  405ca6:	60a7      	str	r7, [r4, #8]
  405ca8:	2001      	movs	r0, #1
  405caa:	109b      	asrs	r3, r3, #2
  405cac:	fa00 f303 	lsl.w	r3, r0, r3
  405cb0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  405cb4:	431d      	orrs	r5, r3
  405cb6:	3808      	subs	r0, #8
  405cb8:	60e0      	str	r0, [r4, #12]
  405cba:	604d      	str	r5, [r1, #4]
  405cbc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  405cc0:	60fc      	str	r4, [r7, #12]
  405cc2:	4640      	mov	r0, r8
  405cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405cc8:	f7ff bace 	b.w	405268 <__malloc_unlock>
  405ccc:	4770      	bx	lr
  405cce:	0a5a      	lsrs	r2, r3, #9
  405cd0:	2a04      	cmp	r2, #4
  405cd2:	d853      	bhi.n	405d7c <_free_r+0x140>
  405cd4:	099a      	lsrs	r2, r3, #6
  405cd6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405cda:	007f      	lsls	r7, r7, #1
  405cdc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405ce0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  405ce4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  405ce8:	4944      	ldr	r1, [pc, #272]	; (405dfc <_free_r+0x1c0>)
  405cea:	3808      	subs	r0, #8
  405cec:	4290      	cmp	r0, r2
  405cee:	d04d      	beq.n	405d8c <_free_r+0x150>
  405cf0:	6851      	ldr	r1, [r2, #4]
  405cf2:	f021 0103 	bic.w	r1, r1, #3
  405cf6:	428b      	cmp	r3, r1
  405cf8:	d202      	bcs.n	405d00 <_free_r+0xc4>
  405cfa:	6892      	ldr	r2, [r2, #8]
  405cfc:	4290      	cmp	r0, r2
  405cfe:	d1f7      	bne.n	405cf0 <_free_r+0xb4>
  405d00:	68d0      	ldr	r0, [r2, #12]
  405d02:	60e0      	str	r0, [r4, #12]
  405d04:	60a2      	str	r2, [r4, #8]
  405d06:	6084      	str	r4, [r0, #8]
  405d08:	60d4      	str	r4, [r2, #12]
  405d0a:	4640      	mov	r0, r8
  405d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405d10:	f7ff baaa 	b.w	405268 <__malloc_unlock>
  405d14:	6895      	ldr	r5, [r2, #8]
  405d16:	4f3a      	ldr	r7, [pc, #232]	; (405e00 <_free_r+0x1c4>)
  405d18:	42bd      	cmp	r5, r7
  405d1a:	4403      	add	r3, r0
  405d1c:	d03f      	beq.n	405d9e <_free_r+0x162>
  405d1e:	68d0      	ldr	r0, [r2, #12]
  405d20:	60e8      	str	r0, [r5, #12]
  405d22:	f043 0201 	orr.w	r2, r3, #1
  405d26:	6085      	str	r5, [r0, #8]
  405d28:	6062      	str	r2, [r4, #4]
  405d2a:	50e3      	str	r3, [r4, r3]
  405d2c:	e7b3      	b.n	405c96 <_free_r+0x5a>
  405d2e:	07ff      	lsls	r7, r7, #31
  405d30:	4403      	add	r3, r0
  405d32:	d407      	bmi.n	405d44 <_free_r+0x108>
  405d34:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405d38:	1aa4      	subs	r4, r4, r2
  405d3a:	4413      	add	r3, r2
  405d3c:	68a0      	ldr	r0, [r4, #8]
  405d3e:	68e2      	ldr	r2, [r4, #12]
  405d40:	60c2      	str	r2, [r0, #12]
  405d42:	6090      	str	r0, [r2, #8]
  405d44:	4a2f      	ldr	r2, [pc, #188]	; (405e04 <_free_r+0x1c8>)
  405d46:	6812      	ldr	r2, [r2, #0]
  405d48:	f043 0001 	orr.w	r0, r3, #1
  405d4c:	4293      	cmp	r3, r2
  405d4e:	6060      	str	r0, [r4, #4]
  405d50:	608c      	str	r4, [r1, #8]
  405d52:	d3b6      	bcc.n	405cc2 <_free_r+0x86>
  405d54:	4b2c      	ldr	r3, [pc, #176]	; (405e08 <_free_r+0x1cc>)
  405d56:	4640      	mov	r0, r8
  405d58:	6819      	ldr	r1, [r3, #0]
  405d5a:	f7ff ff21 	bl	405ba0 <_malloc_trim_r>
  405d5e:	e7b0      	b.n	405cc2 <_free_r+0x86>
  405d60:	1811      	adds	r1, r2, r0
  405d62:	6849      	ldr	r1, [r1, #4]
  405d64:	07c9      	lsls	r1, r1, #31
  405d66:	d444      	bmi.n	405df2 <_free_r+0x1b6>
  405d68:	6891      	ldr	r1, [r2, #8]
  405d6a:	68d2      	ldr	r2, [r2, #12]
  405d6c:	60ca      	str	r2, [r1, #12]
  405d6e:	4403      	add	r3, r0
  405d70:	f043 0001 	orr.w	r0, r3, #1
  405d74:	6091      	str	r1, [r2, #8]
  405d76:	6060      	str	r0, [r4, #4]
  405d78:	50e3      	str	r3, [r4, r3]
  405d7a:	e7a2      	b.n	405cc2 <_free_r+0x86>
  405d7c:	2a14      	cmp	r2, #20
  405d7e:	d817      	bhi.n	405db0 <_free_r+0x174>
  405d80:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405d84:	007f      	lsls	r7, r7, #1
  405d86:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405d8a:	e7a9      	b.n	405ce0 <_free_r+0xa4>
  405d8c:	10aa      	asrs	r2, r5, #2
  405d8e:	684b      	ldr	r3, [r1, #4]
  405d90:	2501      	movs	r5, #1
  405d92:	fa05 f202 	lsl.w	r2, r5, r2
  405d96:	4313      	orrs	r3, r2
  405d98:	604b      	str	r3, [r1, #4]
  405d9a:	4602      	mov	r2, r0
  405d9c:	e7b1      	b.n	405d02 <_free_r+0xc6>
  405d9e:	f043 0201 	orr.w	r2, r3, #1
  405da2:	614c      	str	r4, [r1, #20]
  405da4:	610c      	str	r4, [r1, #16]
  405da6:	60e5      	str	r5, [r4, #12]
  405da8:	60a5      	str	r5, [r4, #8]
  405daa:	6062      	str	r2, [r4, #4]
  405dac:	50e3      	str	r3, [r4, r3]
  405dae:	e788      	b.n	405cc2 <_free_r+0x86>
  405db0:	2a54      	cmp	r2, #84	; 0x54
  405db2:	d806      	bhi.n	405dc2 <_free_r+0x186>
  405db4:	0b1a      	lsrs	r2, r3, #12
  405db6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405dba:	007f      	lsls	r7, r7, #1
  405dbc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405dc0:	e78e      	b.n	405ce0 <_free_r+0xa4>
  405dc2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405dc6:	d806      	bhi.n	405dd6 <_free_r+0x19a>
  405dc8:	0bda      	lsrs	r2, r3, #15
  405dca:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405dce:	007f      	lsls	r7, r7, #1
  405dd0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405dd4:	e784      	b.n	405ce0 <_free_r+0xa4>
  405dd6:	f240 5054 	movw	r0, #1364	; 0x554
  405dda:	4282      	cmp	r2, r0
  405ddc:	d806      	bhi.n	405dec <_free_r+0x1b0>
  405dde:	0c9a      	lsrs	r2, r3, #18
  405de0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405de4:	007f      	lsls	r7, r7, #1
  405de6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405dea:	e779      	b.n	405ce0 <_free_r+0xa4>
  405dec:	27fe      	movs	r7, #254	; 0xfe
  405dee:	257e      	movs	r5, #126	; 0x7e
  405df0:	e776      	b.n	405ce0 <_free_r+0xa4>
  405df2:	f043 0201 	orr.w	r2, r3, #1
  405df6:	6062      	str	r2, [r4, #4]
  405df8:	50e3      	str	r3, [r4, r3]
  405dfa:	e762      	b.n	405cc2 <_free_r+0x86>
  405dfc:	2040047c 	.word	0x2040047c
  405e00:	20400484 	.word	0x20400484
  405e04:	20400884 	.word	0x20400884
  405e08:	2040092c 	.word	0x2040092c

00405e0c <memmove>:
  405e0c:	4288      	cmp	r0, r1
  405e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e10:	d90d      	bls.n	405e2e <memmove+0x22>
  405e12:	188b      	adds	r3, r1, r2
  405e14:	4298      	cmp	r0, r3
  405e16:	d20a      	bcs.n	405e2e <memmove+0x22>
  405e18:	1881      	adds	r1, r0, r2
  405e1a:	2a00      	cmp	r2, #0
  405e1c:	d051      	beq.n	405ec2 <memmove+0xb6>
  405e1e:	1a9a      	subs	r2, r3, r2
  405e20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405e24:	f801 4d01 	strb.w	r4, [r1, #-1]!
  405e28:	4293      	cmp	r3, r2
  405e2a:	d1f9      	bne.n	405e20 <memmove+0x14>
  405e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e2e:	2a0f      	cmp	r2, #15
  405e30:	d948      	bls.n	405ec4 <memmove+0xb8>
  405e32:	ea41 0300 	orr.w	r3, r1, r0
  405e36:	079b      	lsls	r3, r3, #30
  405e38:	d146      	bne.n	405ec8 <memmove+0xbc>
  405e3a:	f100 0410 	add.w	r4, r0, #16
  405e3e:	f101 0310 	add.w	r3, r1, #16
  405e42:	4615      	mov	r5, r2
  405e44:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405e48:	f844 6c10 	str.w	r6, [r4, #-16]
  405e4c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405e50:	f844 6c0c 	str.w	r6, [r4, #-12]
  405e54:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405e58:	f844 6c08 	str.w	r6, [r4, #-8]
  405e5c:	3d10      	subs	r5, #16
  405e5e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405e62:	f844 6c04 	str.w	r6, [r4, #-4]
  405e66:	2d0f      	cmp	r5, #15
  405e68:	f103 0310 	add.w	r3, r3, #16
  405e6c:	f104 0410 	add.w	r4, r4, #16
  405e70:	d8e8      	bhi.n	405e44 <memmove+0x38>
  405e72:	f1a2 0310 	sub.w	r3, r2, #16
  405e76:	f023 030f 	bic.w	r3, r3, #15
  405e7a:	f002 0e0f 	and.w	lr, r2, #15
  405e7e:	3310      	adds	r3, #16
  405e80:	f1be 0f03 	cmp.w	lr, #3
  405e84:	4419      	add	r1, r3
  405e86:	4403      	add	r3, r0
  405e88:	d921      	bls.n	405ece <memmove+0xc2>
  405e8a:	1f1e      	subs	r6, r3, #4
  405e8c:	460d      	mov	r5, r1
  405e8e:	4674      	mov	r4, lr
  405e90:	3c04      	subs	r4, #4
  405e92:	f855 7b04 	ldr.w	r7, [r5], #4
  405e96:	f846 7f04 	str.w	r7, [r6, #4]!
  405e9a:	2c03      	cmp	r4, #3
  405e9c:	d8f8      	bhi.n	405e90 <memmove+0x84>
  405e9e:	f1ae 0404 	sub.w	r4, lr, #4
  405ea2:	f024 0403 	bic.w	r4, r4, #3
  405ea6:	3404      	adds	r4, #4
  405ea8:	4423      	add	r3, r4
  405eaa:	4421      	add	r1, r4
  405eac:	f002 0203 	and.w	r2, r2, #3
  405eb0:	b162      	cbz	r2, 405ecc <memmove+0xc0>
  405eb2:	3b01      	subs	r3, #1
  405eb4:	440a      	add	r2, r1
  405eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
  405eba:	f803 4f01 	strb.w	r4, [r3, #1]!
  405ebe:	428a      	cmp	r2, r1
  405ec0:	d1f9      	bne.n	405eb6 <memmove+0xaa>
  405ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ec4:	4603      	mov	r3, r0
  405ec6:	e7f3      	b.n	405eb0 <memmove+0xa4>
  405ec8:	4603      	mov	r3, r0
  405eca:	e7f2      	b.n	405eb2 <memmove+0xa6>
  405ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ece:	4672      	mov	r2, lr
  405ed0:	e7ee      	b.n	405eb0 <memmove+0xa4>
  405ed2:	bf00      	nop

00405ed4 <_realloc_r>:
  405ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ed8:	4617      	mov	r7, r2
  405eda:	b083      	sub	sp, #12
  405edc:	2900      	cmp	r1, #0
  405ede:	f000 80c1 	beq.w	406064 <_realloc_r+0x190>
  405ee2:	460e      	mov	r6, r1
  405ee4:	4681      	mov	r9, r0
  405ee6:	f107 050b 	add.w	r5, r7, #11
  405eea:	f7ff f9bb 	bl	405264 <__malloc_lock>
  405eee:	f856 ec04 	ldr.w	lr, [r6, #-4]
  405ef2:	2d16      	cmp	r5, #22
  405ef4:	f02e 0403 	bic.w	r4, lr, #3
  405ef8:	f1a6 0808 	sub.w	r8, r6, #8
  405efc:	d840      	bhi.n	405f80 <_realloc_r+0xac>
  405efe:	2210      	movs	r2, #16
  405f00:	4615      	mov	r5, r2
  405f02:	42af      	cmp	r7, r5
  405f04:	d841      	bhi.n	405f8a <_realloc_r+0xb6>
  405f06:	4294      	cmp	r4, r2
  405f08:	da75      	bge.n	405ff6 <_realloc_r+0x122>
  405f0a:	4bc9      	ldr	r3, [pc, #804]	; (406230 <_realloc_r+0x35c>)
  405f0c:	6899      	ldr	r1, [r3, #8]
  405f0e:	eb08 0004 	add.w	r0, r8, r4
  405f12:	4288      	cmp	r0, r1
  405f14:	6841      	ldr	r1, [r0, #4]
  405f16:	f000 80d9 	beq.w	4060cc <_realloc_r+0x1f8>
  405f1a:	f021 0301 	bic.w	r3, r1, #1
  405f1e:	4403      	add	r3, r0
  405f20:	685b      	ldr	r3, [r3, #4]
  405f22:	07db      	lsls	r3, r3, #31
  405f24:	d57d      	bpl.n	406022 <_realloc_r+0x14e>
  405f26:	f01e 0f01 	tst.w	lr, #1
  405f2a:	d035      	beq.n	405f98 <_realloc_r+0xc4>
  405f2c:	4639      	mov	r1, r7
  405f2e:	4648      	mov	r0, r9
  405f30:	f7fe fdf6 	bl	404b20 <_malloc_r>
  405f34:	4607      	mov	r7, r0
  405f36:	b1e0      	cbz	r0, 405f72 <_realloc_r+0x9e>
  405f38:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405f3c:	f023 0301 	bic.w	r3, r3, #1
  405f40:	4443      	add	r3, r8
  405f42:	f1a0 0208 	sub.w	r2, r0, #8
  405f46:	429a      	cmp	r2, r3
  405f48:	f000 8144 	beq.w	4061d4 <_realloc_r+0x300>
  405f4c:	1f22      	subs	r2, r4, #4
  405f4e:	2a24      	cmp	r2, #36	; 0x24
  405f50:	f200 8131 	bhi.w	4061b6 <_realloc_r+0x2e2>
  405f54:	2a13      	cmp	r2, #19
  405f56:	f200 8104 	bhi.w	406162 <_realloc_r+0x28e>
  405f5a:	4603      	mov	r3, r0
  405f5c:	4632      	mov	r2, r6
  405f5e:	6811      	ldr	r1, [r2, #0]
  405f60:	6019      	str	r1, [r3, #0]
  405f62:	6851      	ldr	r1, [r2, #4]
  405f64:	6059      	str	r1, [r3, #4]
  405f66:	6892      	ldr	r2, [r2, #8]
  405f68:	609a      	str	r2, [r3, #8]
  405f6a:	4631      	mov	r1, r6
  405f6c:	4648      	mov	r0, r9
  405f6e:	f7ff fe65 	bl	405c3c <_free_r>
  405f72:	4648      	mov	r0, r9
  405f74:	f7ff f978 	bl	405268 <__malloc_unlock>
  405f78:	4638      	mov	r0, r7
  405f7a:	b003      	add	sp, #12
  405f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f80:	f025 0507 	bic.w	r5, r5, #7
  405f84:	2d00      	cmp	r5, #0
  405f86:	462a      	mov	r2, r5
  405f88:	dabb      	bge.n	405f02 <_realloc_r+0x2e>
  405f8a:	230c      	movs	r3, #12
  405f8c:	2000      	movs	r0, #0
  405f8e:	f8c9 3000 	str.w	r3, [r9]
  405f92:	b003      	add	sp, #12
  405f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f98:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405f9c:	ebc3 0a08 	rsb	sl, r3, r8
  405fa0:	f8da 3004 	ldr.w	r3, [sl, #4]
  405fa4:	f023 0c03 	bic.w	ip, r3, #3
  405fa8:	eb04 030c 	add.w	r3, r4, ip
  405fac:	4293      	cmp	r3, r2
  405fae:	dbbd      	blt.n	405f2c <_realloc_r+0x58>
  405fb0:	4657      	mov	r7, sl
  405fb2:	f8da 100c 	ldr.w	r1, [sl, #12]
  405fb6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405fba:	1f22      	subs	r2, r4, #4
  405fbc:	2a24      	cmp	r2, #36	; 0x24
  405fbe:	60c1      	str	r1, [r0, #12]
  405fc0:	6088      	str	r0, [r1, #8]
  405fc2:	f200 8117 	bhi.w	4061f4 <_realloc_r+0x320>
  405fc6:	2a13      	cmp	r2, #19
  405fc8:	f240 8112 	bls.w	4061f0 <_realloc_r+0x31c>
  405fcc:	6831      	ldr	r1, [r6, #0]
  405fce:	f8ca 1008 	str.w	r1, [sl, #8]
  405fd2:	6871      	ldr	r1, [r6, #4]
  405fd4:	f8ca 100c 	str.w	r1, [sl, #12]
  405fd8:	2a1b      	cmp	r2, #27
  405fda:	f200 812b 	bhi.w	406234 <_realloc_r+0x360>
  405fde:	3608      	adds	r6, #8
  405fe0:	f10a 0210 	add.w	r2, sl, #16
  405fe4:	6831      	ldr	r1, [r6, #0]
  405fe6:	6011      	str	r1, [r2, #0]
  405fe8:	6871      	ldr	r1, [r6, #4]
  405fea:	6051      	str	r1, [r2, #4]
  405fec:	68b1      	ldr	r1, [r6, #8]
  405fee:	6091      	str	r1, [r2, #8]
  405ff0:	463e      	mov	r6, r7
  405ff2:	461c      	mov	r4, r3
  405ff4:	46d0      	mov	r8, sl
  405ff6:	1b63      	subs	r3, r4, r5
  405ff8:	2b0f      	cmp	r3, #15
  405ffa:	d81d      	bhi.n	406038 <_realloc_r+0x164>
  405ffc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406000:	f003 0301 	and.w	r3, r3, #1
  406004:	4323      	orrs	r3, r4
  406006:	4444      	add	r4, r8
  406008:	f8c8 3004 	str.w	r3, [r8, #4]
  40600c:	6863      	ldr	r3, [r4, #4]
  40600e:	f043 0301 	orr.w	r3, r3, #1
  406012:	6063      	str	r3, [r4, #4]
  406014:	4648      	mov	r0, r9
  406016:	f7ff f927 	bl	405268 <__malloc_unlock>
  40601a:	4630      	mov	r0, r6
  40601c:	b003      	add	sp, #12
  40601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406022:	f021 0103 	bic.w	r1, r1, #3
  406026:	4421      	add	r1, r4
  406028:	4291      	cmp	r1, r2
  40602a:	db21      	blt.n	406070 <_realloc_r+0x19c>
  40602c:	68c3      	ldr	r3, [r0, #12]
  40602e:	6882      	ldr	r2, [r0, #8]
  406030:	460c      	mov	r4, r1
  406032:	60d3      	str	r3, [r2, #12]
  406034:	609a      	str	r2, [r3, #8]
  406036:	e7de      	b.n	405ff6 <_realloc_r+0x122>
  406038:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40603c:	eb08 0105 	add.w	r1, r8, r5
  406040:	f002 0201 	and.w	r2, r2, #1
  406044:	4315      	orrs	r5, r2
  406046:	f043 0201 	orr.w	r2, r3, #1
  40604a:	440b      	add	r3, r1
  40604c:	f8c8 5004 	str.w	r5, [r8, #4]
  406050:	604a      	str	r2, [r1, #4]
  406052:	685a      	ldr	r2, [r3, #4]
  406054:	f042 0201 	orr.w	r2, r2, #1
  406058:	3108      	adds	r1, #8
  40605a:	605a      	str	r2, [r3, #4]
  40605c:	4648      	mov	r0, r9
  40605e:	f7ff fded 	bl	405c3c <_free_r>
  406062:	e7d7      	b.n	406014 <_realloc_r+0x140>
  406064:	4611      	mov	r1, r2
  406066:	b003      	add	sp, #12
  406068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40606c:	f7fe bd58 	b.w	404b20 <_malloc_r>
  406070:	f01e 0f01 	tst.w	lr, #1
  406074:	f47f af5a 	bne.w	405f2c <_realloc_r+0x58>
  406078:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40607c:	ebc3 0a08 	rsb	sl, r3, r8
  406080:	f8da 3004 	ldr.w	r3, [sl, #4]
  406084:	f023 0c03 	bic.w	ip, r3, #3
  406088:	eb01 0e0c 	add.w	lr, r1, ip
  40608c:	4596      	cmp	lr, r2
  40608e:	db8b      	blt.n	405fa8 <_realloc_r+0xd4>
  406090:	68c3      	ldr	r3, [r0, #12]
  406092:	6882      	ldr	r2, [r0, #8]
  406094:	4657      	mov	r7, sl
  406096:	60d3      	str	r3, [r2, #12]
  406098:	609a      	str	r2, [r3, #8]
  40609a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40609e:	f8da 300c 	ldr.w	r3, [sl, #12]
  4060a2:	60cb      	str	r3, [r1, #12]
  4060a4:	1f22      	subs	r2, r4, #4
  4060a6:	2a24      	cmp	r2, #36	; 0x24
  4060a8:	6099      	str	r1, [r3, #8]
  4060aa:	f200 8099 	bhi.w	4061e0 <_realloc_r+0x30c>
  4060ae:	2a13      	cmp	r2, #19
  4060b0:	d962      	bls.n	406178 <_realloc_r+0x2a4>
  4060b2:	6833      	ldr	r3, [r6, #0]
  4060b4:	f8ca 3008 	str.w	r3, [sl, #8]
  4060b8:	6873      	ldr	r3, [r6, #4]
  4060ba:	f8ca 300c 	str.w	r3, [sl, #12]
  4060be:	2a1b      	cmp	r2, #27
  4060c0:	f200 80a0 	bhi.w	406204 <_realloc_r+0x330>
  4060c4:	3608      	adds	r6, #8
  4060c6:	f10a 0310 	add.w	r3, sl, #16
  4060ca:	e056      	b.n	40617a <_realloc_r+0x2a6>
  4060cc:	f021 0b03 	bic.w	fp, r1, #3
  4060d0:	44a3      	add	fp, r4
  4060d2:	f105 0010 	add.w	r0, r5, #16
  4060d6:	4583      	cmp	fp, r0
  4060d8:	da59      	bge.n	40618e <_realloc_r+0x2ba>
  4060da:	f01e 0f01 	tst.w	lr, #1
  4060de:	f47f af25 	bne.w	405f2c <_realloc_r+0x58>
  4060e2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4060e6:	ebc1 0a08 	rsb	sl, r1, r8
  4060ea:	f8da 1004 	ldr.w	r1, [sl, #4]
  4060ee:	f021 0c03 	bic.w	ip, r1, #3
  4060f2:	44e3      	add	fp, ip
  4060f4:	4558      	cmp	r0, fp
  4060f6:	f73f af57 	bgt.w	405fa8 <_realloc_r+0xd4>
  4060fa:	4657      	mov	r7, sl
  4060fc:	f8da 100c 	ldr.w	r1, [sl, #12]
  406100:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406104:	1f22      	subs	r2, r4, #4
  406106:	2a24      	cmp	r2, #36	; 0x24
  406108:	60c1      	str	r1, [r0, #12]
  40610a:	6088      	str	r0, [r1, #8]
  40610c:	f200 80b4 	bhi.w	406278 <_realloc_r+0x3a4>
  406110:	2a13      	cmp	r2, #19
  406112:	f240 80a5 	bls.w	406260 <_realloc_r+0x38c>
  406116:	6831      	ldr	r1, [r6, #0]
  406118:	f8ca 1008 	str.w	r1, [sl, #8]
  40611c:	6871      	ldr	r1, [r6, #4]
  40611e:	f8ca 100c 	str.w	r1, [sl, #12]
  406122:	2a1b      	cmp	r2, #27
  406124:	f200 80af 	bhi.w	406286 <_realloc_r+0x3b2>
  406128:	3608      	adds	r6, #8
  40612a:	f10a 0210 	add.w	r2, sl, #16
  40612e:	6831      	ldr	r1, [r6, #0]
  406130:	6011      	str	r1, [r2, #0]
  406132:	6871      	ldr	r1, [r6, #4]
  406134:	6051      	str	r1, [r2, #4]
  406136:	68b1      	ldr	r1, [r6, #8]
  406138:	6091      	str	r1, [r2, #8]
  40613a:	eb0a 0105 	add.w	r1, sl, r5
  40613e:	ebc5 020b 	rsb	r2, r5, fp
  406142:	f042 0201 	orr.w	r2, r2, #1
  406146:	6099      	str	r1, [r3, #8]
  406148:	604a      	str	r2, [r1, #4]
  40614a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40614e:	f003 0301 	and.w	r3, r3, #1
  406152:	431d      	orrs	r5, r3
  406154:	4648      	mov	r0, r9
  406156:	f8ca 5004 	str.w	r5, [sl, #4]
  40615a:	f7ff f885 	bl	405268 <__malloc_unlock>
  40615e:	4638      	mov	r0, r7
  406160:	e75c      	b.n	40601c <_realloc_r+0x148>
  406162:	6833      	ldr	r3, [r6, #0]
  406164:	6003      	str	r3, [r0, #0]
  406166:	6873      	ldr	r3, [r6, #4]
  406168:	6043      	str	r3, [r0, #4]
  40616a:	2a1b      	cmp	r2, #27
  40616c:	d827      	bhi.n	4061be <_realloc_r+0x2ea>
  40616e:	f100 0308 	add.w	r3, r0, #8
  406172:	f106 0208 	add.w	r2, r6, #8
  406176:	e6f2      	b.n	405f5e <_realloc_r+0x8a>
  406178:	463b      	mov	r3, r7
  40617a:	6832      	ldr	r2, [r6, #0]
  40617c:	601a      	str	r2, [r3, #0]
  40617e:	6872      	ldr	r2, [r6, #4]
  406180:	605a      	str	r2, [r3, #4]
  406182:	68b2      	ldr	r2, [r6, #8]
  406184:	609a      	str	r2, [r3, #8]
  406186:	463e      	mov	r6, r7
  406188:	4674      	mov	r4, lr
  40618a:	46d0      	mov	r8, sl
  40618c:	e733      	b.n	405ff6 <_realloc_r+0x122>
  40618e:	eb08 0105 	add.w	r1, r8, r5
  406192:	ebc5 0b0b 	rsb	fp, r5, fp
  406196:	f04b 0201 	orr.w	r2, fp, #1
  40619a:	6099      	str	r1, [r3, #8]
  40619c:	604a      	str	r2, [r1, #4]
  40619e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4061a2:	f003 0301 	and.w	r3, r3, #1
  4061a6:	431d      	orrs	r5, r3
  4061a8:	4648      	mov	r0, r9
  4061aa:	f846 5c04 	str.w	r5, [r6, #-4]
  4061ae:	f7ff f85b 	bl	405268 <__malloc_unlock>
  4061b2:	4630      	mov	r0, r6
  4061b4:	e732      	b.n	40601c <_realloc_r+0x148>
  4061b6:	4631      	mov	r1, r6
  4061b8:	f7ff fe28 	bl	405e0c <memmove>
  4061bc:	e6d5      	b.n	405f6a <_realloc_r+0x96>
  4061be:	68b3      	ldr	r3, [r6, #8]
  4061c0:	6083      	str	r3, [r0, #8]
  4061c2:	68f3      	ldr	r3, [r6, #12]
  4061c4:	60c3      	str	r3, [r0, #12]
  4061c6:	2a24      	cmp	r2, #36	; 0x24
  4061c8:	d028      	beq.n	40621c <_realloc_r+0x348>
  4061ca:	f100 0310 	add.w	r3, r0, #16
  4061ce:	f106 0210 	add.w	r2, r6, #16
  4061d2:	e6c4      	b.n	405f5e <_realloc_r+0x8a>
  4061d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4061d8:	f023 0303 	bic.w	r3, r3, #3
  4061dc:	441c      	add	r4, r3
  4061de:	e70a      	b.n	405ff6 <_realloc_r+0x122>
  4061e0:	4631      	mov	r1, r6
  4061e2:	4638      	mov	r0, r7
  4061e4:	4674      	mov	r4, lr
  4061e6:	46d0      	mov	r8, sl
  4061e8:	f7ff fe10 	bl	405e0c <memmove>
  4061ec:	463e      	mov	r6, r7
  4061ee:	e702      	b.n	405ff6 <_realloc_r+0x122>
  4061f0:	463a      	mov	r2, r7
  4061f2:	e6f7      	b.n	405fe4 <_realloc_r+0x110>
  4061f4:	4631      	mov	r1, r6
  4061f6:	4638      	mov	r0, r7
  4061f8:	461c      	mov	r4, r3
  4061fa:	46d0      	mov	r8, sl
  4061fc:	f7ff fe06 	bl	405e0c <memmove>
  406200:	463e      	mov	r6, r7
  406202:	e6f8      	b.n	405ff6 <_realloc_r+0x122>
  406204:	68b3      	ldr	r3, [r6, #8]
  406206:	f8ca 3010 	str.w	r3, [sl, #16]
  40620a:	68f3      	ldr	r3, [r6, #12]
  40620c:	f8ca 3014 	str.w	r3, [sl, #20]
  406210:	2a24      	cmp	r2, #36	; 0x24
  406212:	d01b      	beq.n	40624c <_realloc_r+0x378>
  406214:	3610      	adds	r6, #16
  406216:	f10a 0318 	add.w	r3, sl, #24
  40621a:	e7ae      	b.n	40617a <_realloc_r+0x2a6>
  40621c:	6933      	ldr	r3, [r6, #16]
  40621e:	6103      	str	r3, [r0, #16]
  406220:	6973      	ldr	r3, [r6, #20]
  406222:	6143      	str	r3, [r0, #20]
  406224:	f106 0218 	add.w	r2, r6, #24
  406228:	f100 0318 	add.w	r3, r0, #24
  40622c:	e697      	b.n	405f5e <_realloc_r+0x8a>
  40622e:	bf00      	nop
  406230:	2040047c 	.word	0x2040047c
  406234:	68b1      	ldr	r1, [r6, #8]
  406236:	f8ca 1010 	str.w	r1, [sl, #16]
  40623a:	68f1      	ldr	r1, [r6, #12]
  40623c:	f8ca 1014 	str.w	r1, [sl, #20]
  406240:	2a24      	cmp	r2, #36	; 0x24
  406242:	d00f      	beq.n	406264 <_realloc_r+0x390>
  406244:	3610      	adds	r6, #16
  406246:	f10a 0218 	add.w	r2, sl, #24
  40624a:	e6cb      	b.n	405fe4 <_realloc_r+0x110>
  40624c:	6933      	ldr	r3, [r6, #16]
  40624e:	f8ca 3018 	str.w	r3, [sl, #24]
  406252:	6973      	ldr	r3, [r6, #20]
  406254:	f8ca 301c 	str.w	r3, [sl, #28]
  406258:	3618      	adds	r6, #24
  40625a:	f10a 0320 	add.w	r3, sl, #32
  40625e:	e78c      	b.n	40617a <_realloc_r+0x2a6>
  406260:	463a      	mov	r2, r7
  406262:	e764      	b.n	40612e <_realloc_r+0x25a>
  406264:	6932      	ldr	r2, [r6, #16]
  406266:	f8ca 2018 	str.w	r2, [sl, #24]
  40626a:	6972      	ldr	r2, [r6, #20]
  40626c:	f8ca 201c 	str.w	r2, [sl, #28]
  406270:	3618      	adds	r6, #24
  406272:	f10a 0220 	add.w	r2, sl, #32
  406276:	e6b5      	b.n	405fe4 <_realloc_r+0x110>
  406278:	4631      	mov	r1, r6
  40627a:	4638      	mov	r0, r7
  40627c:	9301      	str	r3, [sp, #4]
  40627e:	f7ff fdc5 	bl	405e0c <memmove>
  406282:	9b01      	ldr	r3, [sp, #4]
  406284:	e759      	b.n	40613a <_realloc_r+0x266>
  406286:	68b1      	ldr	r1, [r6, #8]
  406288:	f8ca 1010 	str.w	r1, [sl, #16]
  40628c:	68f1      	ldr	r1, [r6, #12]
  40628e:	f8ca 1014 	str.w	r1, [sl, #20]
  406292:	2a24      	cmp	r2, #36	; 0x24
  406294:	d003      	beq.n	40629e <_realloc_r+0x3ca>
  406296:	3610      	adds	r6, #16
  406298:	f10a 0218 	add.w	r2, sl, #24
  40629c:	e747      	b.n	40612e <_realloc_r+0x25a>
  40629e:	6932      	ldr	r2, [r6, #16]
  4062a0:	f8ca 2018 	str.w	r2, [sl, #24]
  4062a4:	6972      	ldr	r2, [r6, #20]
  4062a6:	f8ca 201c 	str.w	r2, [sl, #28]
  4062aa:	3618      	adds	r6, #24
  4062ac:	f10a 0220 	add.w	r2, sl, #32
  4062b0:	e73d      	b.n	40612e <_realloc_r+0x25a>
  4062b2:	bf00      	nop

004062b4 <__aeabi_drsub>:
  4062b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4062b8:	e002      	b.n	4062c0 <__adddf3>
  4062ba:	bf00      	nop

004062bc <__aeabi_dsub>:
  4062bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004062c0 <__adddf3>:
  4062c0:	b530      	push	{r4, r5, lr}
  4062c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4062c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4062ca:	ea94 0f05 	teq	r4, r5
  4062ce:	bf08      	it	eq
  4062d0:	ea90 0f02 	teqeq	r0, r2
  4062d4:	bf1f      	itttt	ne
  4062d6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4062da:	ea55 0c02 	orrsne.w	ip, r5, r2
  4062de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4062e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4062e6:	f000 80e2 	beq.w	4064ae <__adddf3+0x1ee>
  4062ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4062ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4062f2:	bfb8      	it	lt
  4062f4:	426d      	neglt	r5, r5
  4062f6:	dd0c      	ble.n	406312 <__adddf3+0x52>
  4062f8:	442c      	add	r4, r5
  4062fa:	ea80 0202 	eor.w	r2, r0, r2
  4062fe:	ea81 0303 	eor.w	r3, r1, r3
  406302:	ea82 0000 	eor.w	r0, r2, r0
  406306:	ea83 0101 	eor.w	r1, r3, r1
  40630a:	ea80 0202 	eor.w	r2, r0, r2
  40630e:	ea81 0303 	eor.w	r3, r1, r3
  406312:	2d36      	cmp	r5, #54	; 0x36
  406314:	bf88      	it	hi
  406316:	bd30      	pophi	{r4, r5, pc}
  406318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40631c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406328:	d002      	beq.n	406330 <__adddf3+0x70>
  40632a:	4240      	negs	r0, r0
  40632c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406334:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40633c:	d002      	beq.n	406344 <__adddf3+0x84>
  40633e:	4252      	negs	r2, r2
  406340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406344:	ea94 0f05 	teq	r4, r5
  406348:	f000 80a7 	beq.w	40649a <__adddf3+0x1da>
  40634c:	f1a4 0401 	sub.w	r4, r4, #1
  406350:	f1d5 0e20 	rsbs	lr, r5, #32
  406354:	db0d      	blt.n	406372 <__adddf3+0xb2>
  406356:	fa02 fc0e 	lsl.w	ip, r2, lr
  40635a:	fa22 f205 	lsr.w	r2, r2, r5
  40635e:	1880      	adds	r0, r0, r2
  406360:	f141 0100 	adc.w	r1, r1, #0
  406364:	fa03 f20e 	lsl.w	r2, r3, lr
  406368:	1880      	adds	r0, r0, r2
  40636a:	fa43 f305 	asr.w	r3, r3, r5
  40636e:	4159      	adcs	r1, r3
  406370:	e00e      	b.n	406390 <__adddf3+0xd0>
  406372:	f1a5 0520 	sub.w	r5, r5, #32
  406376:	f10e 0e20 	add.w	lr, lr, #32
  40637a:	2a01      	cmp	r2, #1
  40637c:	fa03 fc0e 	lsl.w	ip, r3, lr
  406380:	bf28      	it	cs
  406382:	f04c 0c02 	orrcs.w	ip, ip, #2
  406386:	fa43 f305 	asr.w	r3, r3, r5
  40638a:	18c0      	adds	r0, r0, r3
  40638c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406394:	d507      	bpl.n	4063a6 <__adddf3+0xe6>
  406396:	f04f 0e00 	mov.w	lr, #0
  40639a:	f1dc 0c00 	rsbs	ip, ip, #0
  40639e:	eb7e 0000 	sbcs.w	r0, lr, r0
  4063a2:	eb6e 0101 	sbc.w	r1, lr, r1
  4063a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4063aa:	d31b      	bcc.n	4063e4 <__adddf3+0x124>
  4063ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4063b0:	d30c      	bcc.n	4063cc <__adddf3+0x10c>
  4063b2:	0849      	lsrs	r1, r1, #1
  4063b4:	ea5f 0030 	movs.w	r0, r0, rrx
  4063b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4063bc:	f104 0401 	add.w	r4, r4, #1
  4063c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4063c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4063c8:	f080 809a 	bcs.w	406500 <__adddf3+0x240>
  4063cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4063d0:	bf08      	it	eq
  4063d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4063d6:	f150 0000 	adcs.w	r0, r0, #0
  4063da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4063de:	ea41 0105 	orr.w	r1, r1, r5
  4063e2:	bd30      	pop	{r4, r5, pc}
  4063e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4063e8:	4140      	adcs	r0, r0
  4063ea:	eb41 0101 	adc.w	r1, r1, r1
  4063ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4063f2:	f1a4 0401 	sub.w	r4, r4, #1
  4063f6:	d1e9      	bne.n	4063cc <__adddf3+0x10c>
  4063f8:	f091 0f00 	teq	r1, #0
  4063fc:	bf04      	itt	eq
  4063fe:	4601      	moveq	r1, r0
  406400:	2000      	moveq	r0, #0
  406402:	fab1 f381 	clz	r3, r1
  406406:	bf08      	it	eq
  406408:	3320      	addeq	r3, #32
  40640a:	f1a3 030b 	sub.w	r3, r3, #11
  40640e:	f1b3 0220 	subs.w	r2, r3, #32
  406412:	da0c      	bge.n	40642e <__adddf3+0x16e>
  406414:	320c      	adds	r2, #12
  406416:	dd08      	ble.n	40642a <__adddf3+0x16a>
  406418:	f102 0c14 	add.w	ip, r2, #20
  40641c:	f1c2 020c 	rsb	r2, r2, #12
  406420:	fa01 f00c 	lsl.w	r0, r1, ip
  406424:	fa21 f102 	lsr.w	r1, r1, r2
  406428:	e00c      	b.n	406444 <__adddf3+0x184>
  40642a:	f102 0214 	add.w	r2, r2, #20
  40642e:	bfd8      	it	le
  406430:	f1c2 0c20 	rsble	ip, r2, #32
  406434:	fa01 f102 	lsl.w	r1, r1, r2
  406438:	fa20 fc0c 	lsr.w	ip, r0, ip
  40643c:	bfdc      	itt	le
  40643e:	ea41 010c 	orrle.w	r1, r1, ip
  406442:	4090      	lslle	r0, r2
  406444:	1ae4      	subs	r4, r4, r3
  406446:	bfa2      	ittt	ge
  406448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40644c:	4329      	orrge	r1, r5
  40644e:	bd30      	popge	{r4, r5, pc}
  406450:	ea6f 0404 	mvn.w	r4, r4
  406454:	3c1f      	subs	r4, #31
  406456:	da1c      	bge.n	406492 <__adddf3+0x1d2>
  406458:	340c      	adds	r4, #12
  40645a:	dc0e      	bgt.n	40647a <__adddf3+0x1ba>
  40645c:	f104 0414 	add.w	r4, r4, #20
  406460:	f1c4 0220 	rsb	r2, r4, #32
  406464:	fa20 f004 	lsr.w	r0, r0, r4
  406468:	fa01 f302 	lsl.w	r3, r1, r2
  40646c:	ea40 0003 	orr.w	r0, r0, r3
  406470:	fa21 f304 	lsr.w	r3, r1, r4
  406474:	ea45 0103 	orr.w	r1, r5, r3
  406478:	bd30      	pop	{r4, r5, pc}
  40647a:	f1c4 040c 	rsb	r4, r4, #12
  40647e:	f1c4 0220 	rsb	r2, r4, #32
  406482:	fa20 f002 	lsr.w	r0, r0, r2
  406486:	fa01 f304 	lsl.w	r3, r1, r4
  40648a:	ea40 0003 	orr.w	r0, r0, r3
  40648e:	4629      	mov	r1, r5
  406490:	bd30      	pop	{r4, r5, pc}
  406492:	fa21 f004 	lsr.w	r0, r1, r4
  406496:	4629      	mov	r1, r5
  406498:	bd30      	pop	{r4, r5, pc}
  40649a:	f094 0f00 	teq	r4, #0
  40649e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4064a2:	bf06      	itte	eq
  4064a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4064a8:	3401      	addeq	r4, #1
  4064aa:	3d01      	subne	r5, #1
  4064ac:	e74e      	b.n	40634c <__adddf3+0x8c>
  4064ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4064b2:	bf18      	it	ne
  4064b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4064b8:	d029      	beq.n	40650e <__adddf3+0x24e>
  4064ba:	ea94 0f05 	teq	r4, r5
  4064be:	bf08      	it	eq
  4064c0:	ea90 0f02 	teqeq	r0, r2
  4064c4:	d005      	beq.n	4064d2 <__adddf3+0x212>
  4064c6:	ea54 0c00 	orrs.w	ip, r4, r0
  4064ca:	bf04      	itt	eq
  4064cc:	4619      	moveq	r1, r3
  4064ce:	4610      	moveq	r0, r2
  4064d0:	bd30      	pop	{r4, r5, pc}
  4064d2:	ea91 0f03 	teq	r1, r3
  4064d6:	bf1e      	ittt	ne
  4064d8:	2100      	movne	r1, #0
  4064da:	2000      	movne	r0, #0
  4064dc:	bd30      	popne	{r4, r5, pc}
  4064de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4064e2:	d105      	bne.n	4064f0 <__adddf3+0x230>
  4064e4:	0040      	lsls	r0, r0, #1
  4064e6:	4149      	adcs	r1, r1
  4064e8:	bf28      	it	cs
  4064ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4064ee:	bd30      	pop	{r4, r5, pc}
  4064f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4064f4:	bf3c      	itt	cc
  4064f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4064fa:	bd30      	popcc	{r4, r5, pc}
  4064fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406508:	f04f 0000 	mov.w	r0, #0
  40650c:	bd30      	pop	{r4, r5, pc}
  40650e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406512:	bf1a      	itte	ne
  406514:	4619      	movne	r1, r3
  406516:	4610      	movne	r0, r2
  406518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40651c:	bf1c      	itt	ne
  40651e:	460b      	movne	r3, r1
  406520:	4602      	movne	r2, r0
  406522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406526:	bf06      	itte	eq
  406528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40652c:	ea91 0f03 	teqeq	r1, r3
  406530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406534:	bd30      	pop	{r4, r5, pc}
  406536:	bf00      	nop

00406538 <__aeabi_ui2d>:
  406538:	f090 0f00 	teq	r0, #0
  40653c:	bf04      	itt	eq
  40653e:	2100      	moveq	r1, #0
  406540:	4770      	bxeq	lr
  406542:	b530      	push	{r4, r5, lr}
  406544:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406548:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40654c:	f04f 0500 	mov.w	r5, #0
  406550:	f04f 0100 	mov.w	r1, #0
  406554:	e750      	b.n	4063f8 <__adddf3+0x138>
  406556:	bf00      	nop

00406558 <__aeabi_i2d>:
  406558:	f090 0f00 	teq	r0, #0
  40655c:	bf04      	itt	eq
  40655e:	2100      	moveq	r1, #0
  406560:	4770      	bxeq	lr
  406562:	b530      	push	{r4, r5, lr}
  406564:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406568:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40656c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406570:	bf48      	it	mi
  406572:	4240      	negmi	r0, r0
  406574:	f04f 0100 	mov.w	r1, #0
  406578:	e73e      	b.n	4063f8 <__adddf3+0x138>
  40657a:	bf00      	nop

0040657c <__aeabi_f2d>:
  40657c:	0042      	lsls	r2, r0, #1
  40657e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406582:	ea4f 0131 	mov.w	r1, r1, rrx
  406586:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40658a:	bf1f      	itttt	ne
  40658c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406598:	4770      	bxne	lr
  40659a:	f092 0f00 	teq	r2, #0
  40659e:	bf14      	ite	ne
  4065a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4065a4:	4770      	bxeq	lr
  4065a6:	b530      	push	{r4, r5, lr}
  4065a8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4065ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4065b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4065b4:	e720      	b.n	4063f8 <__adddf3+0x138>
  4065b6:	bf00      	nop

004065b8 <__aeabi_ul2d>:
  4065b8:	ea50 0201 	orrs.w	r2, r0, r1
  4065bc:	bf08      	it	eq
  4065be:	4770      	bxeq	lr
  4065c0:	b530      	push	{r4, r5, lr}
  4065c2:	f04f 0500 	mov.w	r5, #0
  4065c6:	e00a      	b.n	4065de <__aeabi_l2d+0x16>

004065c8 <__aeabi_l2d>:
  4065c8:	ea50 0201 	orrs.w	r2, r0, r1
  4065cc:	bf08      	it	eq
  4065ce:	4770      	bxeq	lr
  4065d0:	b530      	push	{r4, r5, lr}
  4065d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4065d6:	d502      	bpl.n	4065de <__aeabi_l2d+0x16>
  4065d8:	4240      	negs	r0, r0
  4065da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4065de:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4065e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4065e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4065ea:	f43f aedc 	beq.w	4063a6 <__adddf3+0xe6>
  4065ee:	f04f 0203 	mov.w	r2, #3
  4065f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4065f6:	bf18      	it	ne
  4065f8:	3203      	addne	r2, #3
  4065fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4065fe:	bf18      	it	ne
  406600:	3203      	addne	r2, #3
  406602:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  406606:	f1c2 0320 	rsb	r3, r2, #32
  40660a:	fa00 fc03 	lsl.w	ip, r0, r3
  40660e:	fa20 f002 	lsr.w	r0, r0, r2
  406612:	fa01 fe03 	lsl.w	lr, r1, r3
  406616:	ea40 000e 	orr.w	r0, r0, lr
  40661a:	fa21 f102 	lsr.w	r1, r1, r2
  40661e:	4414      	add	r4, r2
  406620:	e6c1      	b.n	4063a6 <__adddf3+0xe6>
  406622:	bf00      	nop

00406624 <__aeabi_dmul>:
  406624:	b570      	push	{r4, r5, r6, lr}
  406626:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40662a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40662e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406632:	bf1d      	ittte	ne
  406634:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406638:	ea94 0f0c 	teqne	r4, ip
  40663c:	ea95 0f0c 	teqne	r5, ip
  406640:	f000 f8de 	bleq	406800 <__aeabi_dmul+0x1dc>
  406644:	442c      	add	r4, r5
  406646:	ea81 0603 	eor.w	r6, r1, r3
  40664a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40664e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406652:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  406656:	bf18      	it	ne
  406658:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40665c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406664:	d038      	beq.n	4066d8 <__aeabi_dmul+0xb4>
  406666:	fba0 ce02 	umull	ip, lr, r0, r2
  40666a:	f04f 0500 	mov.w	r5, #0
  40666e:	fbe1 e502 	umlal	lr, r5, r1, r2
  406672:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406676:	fbe0 e503 	umlal	lr, r5, r0, r3
  40667a:	f04f 0600 	mov.w	r6, #0
  40667e:	fbe1 5603 	umlal	r5, r6, r1, r3
  406682:	f09c 0f00 	teq	ip, #0
  406686:	bf18      	it	ne
  406688:	f04e 0e01 	orrne.w	lr, lr, #1
  40668c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406690:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  406694:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406698:	d204      	bcs.n	4066a4 <__aeabi_dmul+0x80>
  40669a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40669e:	416d      	adcs	r5, r5
  4066a0:	eb46 0606 	adc.w	r6, r6, r6
  4066a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4066a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4066ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4066b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4066b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4066b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4066bc:	bf88      	it	hi
  4066be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4066c2:	d81e      	bhi.n	406702 <__aeabi_dmul+0xde>
  4066c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4066c8:	bf08      	it	eq
  4066ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4066ce:	f150 0000 	adcs.w	r0, r0, #0
  4066d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4066d6:	bd70      	pop	{r4, r5, r6, pc}
  4066d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4066dc:	ea46 0101 	orr.w	r1, r6, r1
  4066e0:	ea40 0002 	orr.w	r0, r0, r2
  4066e4:	ea81 0103 	eor.w	r1, r1, r3
  4066e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4066ec:	bfc2      	ittt	gt
  4066ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  4066f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4066f6:	bd70      	popgt	{r4, r5, r6, pc}
  4066f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4066fc:	f04f 0e00 	mov.w	lr, #0
  406700:	3c01      	subs	r4, #1
  406702:	f300 80ab 	bgt.w	40685c <__aeabi_dmul+0x238>
  406706:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40670a:	bfde      	ittt	le
  40670c:	2000      	movle	r0, #0
  40670e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  406712:	bd70      	pople	{r4, r5, r6, pc}
  406714:	f1c4 0400 	rsb	r4, r4, #0
  406718:	3c20      	subs	r4, #32
  40671a:	da35      	bge.n	406788 <__aeabi_dmul+0x164>
  40671c:	340c      	adds	r4, #12
  40671e:	dc1b      	bgt.n	406758 <__aeabi_dmul+0x134>
  406720:	f104 0414 	add.w	r4, r4, #20
  406724:	f1c4 0520 	rsb	r5, r4, #32
  406728:	fa00 f305 	lsl.w	r3, r0, r5
  40672c:	fa20 f004 	lsr.w	r0, r0, r4
  406730:	fa01 f205 	lsl.w	r2, r1, r5
  406734:	ea40 0002 	orr.w	r0, r0, r2
  406738:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40673c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406744:	fa21 f604 	lsr.w	r6, r1, r4
  406748:	eb42 0106 	adc.w	r1, r2, r6
  40674c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406750:	bf08      	it	eq
  406752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406756:	bd70      	pop	{r4, r5, r6, pc}
  406758:	f1c4 040c 	rsb	r4, r4, #12
  40675c:	f1c4 0520 	rsb	r5, r4, #32
  406760:	fa00 f304 	lsl.w	r3, r0, r4
  406764:	fa20 f005 	lsr.w	r0, r0, r5
  406768:	fa01 f204 	lsl.w	r2, r1, r4
  40676c:	ea40 0002 	orr.w	r0, r0, r2
  406770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406778:	f141 0100 	adc.w	r1, r1, #0
  40677c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406780:	bf08      	it	eq
  406782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406786:	bd70      	pop	{r4, r5, r6, pc}
  406788:	f1c4 0520 	rsb	r5, r4, #32
  40678c:	fa00 f205 	lsl.w	r2, r0, r5
  406790:	ea4e 0e02 	orr.w	lr, lr, r2
  406794:	fa20 f304 	lsr.w	r3, r0, r4
  406798:	fa01 f205 	lsl.w	r2, r1, r5
  40679c:	ea43 0302 	orr.w	r3, r3, r2
  4067a0:	fa21 f004 	lsr.w	r0, r1, r4
  4067a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4067a8:	fa21 f204 	lsr.w	r2, r1, r4
  4067ac:	ea20 0002 	bic.w	r0, r0, r2
  4067b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4067b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4067b8:	bf08      	it	eq
  4067ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4067be:	bd70      	pop	{r4, r5, r6, pc}
  4067c0:	f094 0f00 	teq	r4, #0
  4067c4:	d10f      	bne.n	4067e6 <__aeabi_dmul+0x1c2>
  4067c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4067ca:	0040      	lsls	r0, r0, #1
  4067cc:	eb41 0101 	adc.w	r1, r1, r1
  4067d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4067d4:	bf08      	it	eq
  4067d6:	3c01      	subeq	r4, #1
  4067d8:	d0f7      	beq.n	4067ca <__aeabi_dmul+0x1a6>
  4067da:	ea41 0106 	orr.w	r1, r1, r6
  4067de:	f095 0f00 	teq	r5, #0
  4067e2:	bf18      	it	ne
  4067e4:	4770      	bxne	lr
  4067e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4067ea:	0052      	lsls	r2, r2, #1
  4067ec:	eb43 0303 	adc.w	r3, r3, r3
  4067f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4067f4:	bf08      	it	eq
  4067f6:	3d01      	subeq	r5, #1
  4067f8:	d0f7      	beq.n	4067ea <__aeabi_dmul+0x1c6>
  4067fa:	ea43 0306 	orr.w	r3, r3, r6
  4067fe:	4770      	bx	lr
  406800:	ea94 0f0c 	teq	r4, ip
  406804:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406808:	bf18      	it	ne
  40680a:	ea95 0f0c 	teqne	r5, ip
  40680e:	d00c      	beq.n	40682a <__aeabi_dmul+0x206>
  406810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406814:	bf18      	it	ne
  406816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40681a:	d1d1      	bne.n	4067c0 <__aeabi_dmul+0x19c>
  40681c:	ea81 0103 	eor.w	r1, r1, r3
  406820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406824:	f04f 0000 	mov.w	r0, #0
  406828:	bd70      	pop	{r4, r5, r6, pc}
  40682a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40682e:	bf06      	itte	eq
  406830:	4610      	moveq	r0, r2
  406832:	4619      	moveq	r1, r3
  406834:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406838:	d019      	beq.n	40686e <__aeabi_dmul+0x24a>
  40683a:	ea94 0f0c 	teq	r4, ip
  40683e:	d102      	bne.n	406846 <__aeabi_dmul+0x222>
  406840:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406844:	d113      	bne.n	40686e <__aeabi_dmul+0x24a>
  406846:	ea95 0f0c 	teq	r5, ip
  40684a:	d105      	bne.n	406858 <__aeabi_dmul+0x234>
  40684c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406850:	bf1c      	itt	ne
  406852:	4610      	movne	r0, r2
  406854:	4619      	movne	r1, r3
  406856:	d10a      	bne.n	40686e <__aeabi_dmul+0x24a>
  406858:	ea81 0103 	eor.w	r1, r1, r3
  40685c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406860:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406864:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406868:	f04f 0000 	mov.w	r0, #0
  40686c:	bd70      	pop	{r4, r5, r6, pc}
  40686e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406872:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406876:	bd70      	pop	{r4, r5, r6, pc}

00406878 <__aeabi_ddiv>:
  406878:	b570      	push	{r4, r5, r6, lr}
  40687a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40687e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406882:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406886:	bf1d      	ittte	ne
  406888:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40688c:	ea94 0f0c 	teqne	r4, ip
  406890:	ea95 0f0c 	teqne	r5, ip
  406894:	f000 f8a7 	bleq	4069e6 <__aeabi_ddiv+0x16e>
  406898:	eba4 0405 	sub.w	r4, r4, r5
  40689c:	ea81 0e03 	eor.w	lr, r1, r3
  4068a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4068a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4068a8:	f000 8088 	beq.w	4069bc <__aeabi_ddiv+0x144>
  4068ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4068b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4068b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4068b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4068bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4068c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4068c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4068c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4068cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4068d0:	429d      	cmp	r5, r3
  4068d2:	bf08      	it	eq
  4068d4:	4296      	cmpeq	r6, r2
  4068d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4068da:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4068de:	d202      	bcs.n	4068e6 <__aeabi_ddiv+0x6e>
  4068e0:	085b      	lsrs	r3, r3, #1
  4068e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4068e6:	1ab6      	subs	r6, r6, r2
  4068e8:	eb65 0503 	sbc.w	r5, r5, r3
  4068ec:	085b      	lsrs	r3, r3, #1
  4068ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4068f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4068f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4068fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4068fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  406902:	bf22      	ittt	cs
  406904:	1ab6      	subcs	r6, r6, r2
  406906:	4675      	movcs	r5, lr
  406908:	ea40 000c 	orrcs.w	r0, r0, ip
  40690c:	085b      	lsrs	r3, r3, #1
  40690e:	ea4f 0232 	mov.w	r2, r2, rrx
  406912:	ebb6 0e02 	subs.w	lr, r6, r2
  406916:	eb75 0e03 	sbcs.w	lr, r5, r3
  40691a:	bf22      	ittt	cs
  40691c:	1ab6      	subcs	r6, r6, r2
  40691e:	4675      	movcs	r5, lr
  406920:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406924:	085b      	lsrs	r3, r3, #1
  406926:	ea4f 0232 	mov.w	r2, r2, rrx
  40692a:	ebb6 0e02 	subs.w	lr, r6, r2
  40692e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406932:	bf22      	ittt	cs
  406934:	1ab6      	subcs	r6, r6, r2
  406936:	4675      	movcs	r5, lr
  406938:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40693c:	085b      	lsrs	r3, r3, #1
  40693e:	ea4f 0232 	mov.w	r2, r2, rrx
  406942:	ebb6 0e02 	subs.w	lr, r6, r2
  406946:	eb75 0e03 	sbcs.w	lr, r5, r3
  40694a:	bf22      	ittt	cs
  40694c:	1ab6      	subcs	r6, r6, r2
  40694e:	4675      	movcs	r5, lr
  406950:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406954:	ea55 0e06 	orrs.w	lr, r5, r6
  406958:	d018      	beq.n	40698c <__aeabi_ddiv+0x114>
  40695a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40695e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406962:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406966:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40696a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40696e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406972:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406976:	d1c0      	bne.n	4068fa <__aeabi_ddiv+0x82>
  406978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40697c:	d10b      	bne.n	406996 <__aeabi_ddiv+0x11e>
  40697e:	ea41 0100 	orr.w	r1, r1, r0
  406982:	f04f 0000 	mov.w	r0, #0
  406986:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40698a:	e7b6      	b.n	4068fa <__aeabi_ddiv+0x82>
  40698c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406990:	bf04      	itt	eq
  406992:	4301      	orreq	r1, r0
  406994:	2000      	moveq	r0, #0
  406996:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40699a:	bf88      	it	hi
  40699c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4069a0:	f63f aeaf 	bhi.w	406702 <__aeabi_dmul+0xde>
  4069a4:	ebb5 0c03 	subs.w	ip, r5, r3
  4069a8:	bf04      	itt	eq
  4069aa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4069ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4069b2:	f150 0000 	adcs.w	r0, r0, #0
  4069b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4069ba:	bd70      	pop	{r4, r5, r6, pc}
  4069bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4069c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4069c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4069c8:	bfc2      	ittt	gt
  4069ca:	ebd4 050c 	rsbsgt	r5, r4, ip
  4069ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4069d2:	bd70      	popgt	{r4, r5, r6, pc}
  4069d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4069d8:	f04f 0e00 	mov.w	lr, #0
  4069dc:	3c01      	subs	r4, #1
  4069de:	e690      	b.n	406702 <__aeabi_dmul+0xde>
  4069e0:	ea45 0e06 	orr.w	lr, r5, r6
  4069e4:	e68d      	b.n	406702 <__aeabi_dmul+0xde>
  4069e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4069ea:	ea94 0f0c 	teq	r4, ip
  4069ee:	bf08      	it	eq
  4069f0:	ea95 0f0c 	teqeq	r5, ip
  4069f4:	f43f af3b 	beq.w	40686e <__aeabi_dmul+0x24a>
  4069f8:	ea94 0f0c 	teq	r4, ip
  4069fc:	d10a      	bne.n	406a14 <__aeabi_ddiv+0x19c>
  4069fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406a02:	f47f af34 	bne.w	40686e <__aeabi_dmul+0x24a>
  406a06:	ea95 0f0c 	teq	r5, ip
  406a0a:	f47f af25 	bne.w	406858 <__aeabi_dmul+0x234>
  406a0e:	4610      	mov	r0, r2
  406a10:	4619      	mov	r1, r3
  406a12:	e72c      	b.n	40686e <__aeabi_dmul+0x24a>
  406a14:	ea95 0f0c 	teq	r5, ip
  406a18:	d106      	bne.n	406a28 <__aeabi_ddiv+0x1b0>
  406a1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406a1e:	f43f aefd 	beq.w	40681c <__aeabi_dmul+0x1f8>
  406a22:	4610      	mov	r0, r2
  406a24:	4619      	mov	r1, r3
  406a26:	e722      	b.n	40686e <__aeabi_dmul+0x24a>
  406a28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406a2c:	bf18      	it	ne
  406a2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406a32:	f47f aec5 	bne.w	4067c0 <__aeabi_dmul+0x19c>
  406a36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406a3a:	f47f af0d 	bne.w	406858 <__aeabi_dmul+0x234>
  406a3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406a42:	f47f aeeb 	bne.w	40681c <__aeabi_dmul+0x1f8>
  406a46:	e712      	b.n	40686e <__aeabi_dmul+0x24a>

00406a48 <__gedf2>:
  406a48:	f04f 3cff 	mov.w	ip, #4294967295
  406a4c:	e006      	b.n	406a5c <__cmpdf2+0x4>
  406a4e:	bf00      	nop

00406a50 <__ledf2>:
  406a50:	f04f 0c01 	mov.w	ip, #1
  406a54:	e002      	b.n	406a5c <__cmpdf2+0x4>
  406a56:	bf00      	nop

00406a58 <__cmpdf2>:
  406a58:	f04f 0c01 	mov.w	ip, #1
  406a5c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406a60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406a68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406a6c:	bf18      	it	ne
  406a6e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406a72:	d01b      	beq.n	406aac <__cmpdf2+0x54>
  406a74:	b001      	add	sp, #4
  406a76:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406a7a:	bf0c      	ite	eq
  406a7c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406a80:	ea91 0f03 	teqne	r1, r3
  406a84:	bf02      	ittt	eq
  406a86:	ea90 0f02 	teqeq	r0, r2
  406a8a:	2000      	moveq	r0, #0
  406a8c:	4770      	bxeq	lr
  406a8e:	f110 0f00 	cmn.w	r0, #0
  406a92:	ea91 0f03 	teq	r1, r3
  406a96:	bf58      	it	pl
  406a98:	4299      	cmppl	r1, r3
  406a9a:	bf08      	it	eq
  406a9c:	4290      	cmpeq	r0, r2
  406a9e:	bf2c      	ite	cs
  406aa0:	17d8      	asrcs	r0, r3, #31
  406aa2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406aa6:	f040 0001 	orr.w	r0, r0, #1
  406aaa:	4770      	bx	lr
  406aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406ab4:	d102      	bne.n	406abc <__cmpdf2+0x64>
  406ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406aba:	d107      	bne.n	406acc <__cmpdf2+0x74>
  406abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406ac4:	d1d6      	bne.n	406a74 <__cmpdf2+0x1c>
  406ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406aca:	d0d3      	beq.n	406a74 <__cmpdf2+0x1c>
  406acc:	f85d 0b04 	ldr.w	r0, [sp], #4
  406ad0:	4770      	bx	lr
  406ad2:	bf00      	nop

00406ad4 <__aeabi_cdrcmple>:
  406ad4:	4684      	mov	ip, r0
  406ad6:	4610      	mov	r0, r2
  406ad8:	4662      	mov	r2, ip
  406ada:	468c      	mov	ip, r1
  406adc:	4619      	mov	r1, r3
  406ade:	4663      	mov	r3, ip
  406ae0:	e000      	b.n	406ae4 <__aeabi_cdcmpeq>
  406ae2:	bf00      	nop

00406ae4 <__aeabi_cdcmpeq>:
  406ae4:	b501      	push	{r0, lr}
  406ae6:	f7ff ffb7 	bl	406a58 <__cmpdf2>
  406aea:	2800      	cmp	r0, #0
  406aec:	bf48      	it	mi
  406aee:	f110 0f00 	cmnmi.w	r0, #0
  406af2:	bd01      	pop	{r0, pc}

00406af4 <__aeabi_dcmpeq>:
  406af4:	f84d ed08 	str.w	lr, [sp, #-8]!
  406af8:	f7ff fff4 	bl	406ae4 <__aeabi_cdcmpeq>
  406afc:	bf0c      	ite	eq
  406afe:	2001      	moveq	r0, #1
  406b00:	2000      	movne	r0, #0
  406b02:	f85d fb08 	ldr.w	pc, [sp], #8
  406b06:	bf00      	nop

00406b08 <__aeabi_dcmplt>:
  406b08:	f84d ed08 	str.w	lr, [sp, #-8]!
  406b0c:	f7ff ffea 	bl	406ae4 <__aeabi_cdcmpeq>
  406b10:	bf34      	ite	cc
  406b12:	2001      	movcc	r0, #1
  406b14:	2000      	movcs	r0, #0
  406b16:	f85d fb08 	ldr.w	pc, [sp], #8
  406b1a:	bf00      	nop

00406b1c <__aeabi_dcmple>:
  406b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406b20:	f7ff ffe0 	bl	406ae4 <__aeabi_cdcmpeq>
  406b24:	bf94      	ite	ls
  406b26:	2001      	movls	r0, #1
  406b28:	2000      	movhi	r0, #0
  406b2a:	f85d fb08 	ldr.w	pc, [sp], #8
  406b2e:	bf00      	nop

00406b30 <__aeabi_dcmpge>:
  406b30:	f84d ed08 	str.w	lr, [sp, #-8]!
  406b34:	f7ff ffce 	bl	406ad4 <__aeabi_cdrcmple>
  406b38:	bf94      	ite	ls
  406b3a:	2001      	movls	r0, #1
  406b3c:	2000      	movhi	r0, #0
  406b3e:	f85d fb08 	ldr.w	pc, [sp], #8
  406b42:	bf00      	nop

00406b44 <__aeabi_dcmpgt>:
  406b44:	f84d ed08 	str.w	lr, [sp, #-8]!
  406b48:	f7ff ffc4 	bl	406ad4 <__aeabi_cdrcmple>
  406b4c:	bf34      	ite	cc
  406b4e:	2001      	movcc	r0, #1
  406b50:	2000      	movcs	r0, #0
  406b52:	f85d fb08 	ldr.w	pc, [sp], #8
  406b56:	bf00      	nop

00406b58 <__aeabi_dcmpun>:
  406b58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406b60:	d102      	bne.n	406b68 <__aeabi_dcmpun+0x10>
  406b62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406b66:	d10a      	bne.n	406b7e <__aeabi_dcmpun+0x26>
  406b68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406b70:	d102      	bne.n	406b78 <__aeabi_dcmpun+0x20>
  406b72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406b76:	d102      	bne.n	406b7e <__aeabi_dcmpun+0x26>
  406b78:	f04f 0000 	mov.w	r0, #0
  406b7c:	4770      	bx	lr
  406b7e:	f04f 0001 	mov.w	r0, #1
  406b82:	4770      	bx	lr

00406b84 <__aeabi_d2iz>:
  406b84:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406b88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406b8c:	d215      	bcs.n	406bba <__aeabi_d2iz+0x36>
  406b8e:	d511      	bpl.n	406bb4 <__aeabi_d2iz+0x30>
  406b90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406b98:	d912      	bls.n	406bc0 <__aeabi_d2iz+0x3c>
  406b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406baa:	fa23 f002 	lsr.w	r0, r3, r2
  406bae:	bf18      	it	ne
  406bb0:	4240      	negne	r0, r0
  406bb2:	4770      	bx	lr
  406bb4:	f04f 0000 	mov.w	r0, #0
  406bb8:	4770      	bx	lr
  406bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406bbe:	d105      	bne.n	406bcc <__aeabi_d2iz+0x48>
  406bc0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406bc4:	bf08      	it	eq
  406bc6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406bca:	4770      	bx	lr
  406bcc:	f04f 0000 	mov.w	r0, #0
  406bd0:	4770      	bx	lr
  406bd2:	bf00      	nop
  406bd4:	756e654d 	.word	0x756e654d
  406bd8:	202a0a3a 	.word	0x202a0a3a
  406bdc:	6167694c 	.word	0x6167694c
  406be0:	69702072 	.word	0x69702072
  406be4:	20616373 	.word	0x20616373
  406be8:	3a44454c 	.word	0x3a44454c
  406bec:	0a206c20 	.word	0x0a206c20
  406bf0:	6544202a 	.word	0x6544202a
  406bf4:	67696c73 	.word	0x67696c73
  406bf8:	70207261 	.word	0x70207261
  406bfc:	61637369 	.word	0x61637369
  406c00:	44454c20 	.word	0x44454c20
  406c04:	2064203a 	.word	0x2064203a
  406c08:	41202a0a 	.word	0x41202a0a
  406c0c:	6e656d75 	.word	0x6e656d75
  406c10:	20726174 	.word	0x20726174
  406c14:	71657266 	.word	0x71657266
  406c18:	636e6575 	.word	0x636e6575
  406c1c:	203a6169 	.word	0x203a6169
  406c20:	2a0a202b 	.word	0x2a0a202b
  406c24:	6d694420 	.word	0x6d694420
  406c28:	69756e69 	.word	0x69756e69
  406c2c:	72662072 	.word	0x72662072
  406c30:	65757165 	.word	0x65757165
  406c34:	6169636e 	.word	0x6169636e
  406c38:	202d203a 	.word	0x202d203a
  406c3c:	48202a0a 	.word	0x48202a0a
  406c40:	2061726f 	.word	0x2061726f
  406c44:	61757461 	.word	0x61757461
  406c48:	68203a6c 	.word	0x68203a6c
  406c4c:	202a0a20 	.word	0x202a0a20
  406c50:	756e654d 	.word	0x756e654d
  406c54:	0a6d203a 	.word	0x0a6d203a
  406c58:	00000000 	.word	0x00000000
  406c5c:	63736950 	.word	0x63736950
  406c60:	454c2061 	.word	0x454c2061
  406c64:	4e4f2044 	.word	0x4e4f2044
  406c68:	0000000a 	.word	0x0000000a
  406c6c:	63736950 	.word	0x63736950
  406c70:	454c2061 	.word	0x454c2061
  406c74:	464f2044 	.word	0x464f2044
  406c78:	00000a46 	.word	0x00000a46
  406c7c:	656d7541 	.word	0x656d7541
  406c80:	6e61746e 	.word	0x6e61746e
  406c84:	66206f64 	.word	0x66206f64
  406c88:	75716572 	.word	0x75716572
  406c8c:	69636e65 	.word	0x69636e65
  406c90:	6d652061 	.word	0x6d652061
  406c94:	7a483220 	.word	0x7a483220
  406c98:	0000000a 	.word	0x0000000a
  406c9c:	696d6944 	.word	0x696d6944
  406ca0:	6e69756e 	.word	0x6e69756e
  406ca4:	61206f64 	.word	0x61206f64
  406ca8:	65726620 	.word	0x65726620
  406cac:	6e657571 	.word	0x6e657571
  406cb0:	20616963 	.word	0x20616963
  406cb4:	32206d65 	.word	0x32206d65
  406cb8:	000a7a48 	.word	0x000a7a48
  406cbc:	61726f68 	.word	0x61726f68
  406cc0:	75746120 	.word	0x75746120
  406cc4:	0a3a6c61 	.word	0x0a3a6c61
  406cc8:	3a642520 	.word	0x3a642520
  406ccc:	253a6425 	.word	0x253a6425
  406cd0:	000a2064 	.word	0x000a2064
  406cd4:	00000043 	.word	0x00000043

00406cd8 <_global_impure_ptr>:
  406cd8:	20400018                                ..@ 

00406cdc <zeroes.7035>:
  406cdc:	30303030 30303030 30303030 30303030     0000000000000000
  406cec:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  406cfc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  406d0c:	00000000 33323130 37363534 62613938     ....0123456789ab
  406d1c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  406d2c:	00000030                                0...

00406d30 <blanks.7034>:
  406d30:	20202020 20202020 20202020 20202020                     
  406d40:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  406d50:	49534f50 00000058 0000002e 00000000     POSIX...........

00406d60 <__mprec_tens>:
  406d60:	00000000 3ff00000 00000000 40240000     .......?......$@
  406d70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406d80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406d90:	00000000 412e8480 00000000 416312d0     .......A......cA
  406da0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406db0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406dc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406dd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406de0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406df0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406e00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406e10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406e20:	79d99db4 44ea7843                       ...yCx.D

00406e28 <__mprec_bigtens>:
  406e28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406e38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406e48:	7f73bf3c 75154fdd                       <.s..O.u

00406e50 <p05.5373>:
  406e50:	00000005 00000019 0000007d              ........}...

00406e5c <_init>:
  406e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e5e:	bf00      	nop
  406e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406e62:	bc08      	pop	{r3}
  406e64:	469e      	mov	lr, r3
  406e66:	4770      	bx	lr

00406e68 <__init_array_start>:
  406e68:	00403b51 	.word	0x00403b51

00406e6c <__frame_dummy_init_array_entry>:
  406e6c:	00400165                                e.@.

00406e70 <_fini>:
  406e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e72:	bf00      	nop
  406e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406e76:	bc08      	pop	{r3}
  406e78:	469e      	mov	lr, r3
  406e7a:	4770      	bx	lr

00406e7c <__fini_array_start>:
  406e7c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <g_interrupt_enabled>:
2040000c:	0001 0000                                   ....

20400010 <SystemCoreClock>:
20400010:	0900 003d                                   ..=.

20400014 <freq>:
20400014:	0001 0000                                   ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
2040004c:	6cd4 0040 0000 0000 0000 0000 0000 0000     .l@.............
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <_impure_ptr>:
20400440:	0018 2040                                   ..@ 

20400444 <lconv>:
20400444:	6d58 0040 6d0c 0040 6d0c 0040 6d0c 0040     Xm@..m@..m@..m@.
20400454:	6d0c 0040 6d0c 0040 6d0c 0040 6d0c 0040     .m@..m@..m@..m@.
20400464:	6d0c 0040 6d0c 0040 ffff ffff ffff ffff     .m@..m@.........
20400474:	ffff ffff ffff 0000                         ........

2040047c <__malloc_av_>:
	...
20400484:	047c 2040 047c 2040 0484 2040 0484 2040     |.@ |.@ ..@ ..@ 
20400494:	048c 2040 048c 2040 0494 2040 0494 2040     ..@ ..@ ..@ ..@ 
204004a4:	049c 2040 049c 2040 04a4 2040 04a4 2040     ..@ ..@ ..@ ..@ 
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 

20400884 <__malloc_trim_threshold>:
20400884:	0000 0002                                   ....

20400888 <__malloc_sbrk_base>:
20400888:	ffff ffff                                   ....
